import { useState, useEffect, useMemo } from 'react' import { useQuery } from '@tanstack/react-query' import { motion } from 'framer-motion' import { supabase } from '@/lib/supabase' import { BlogCard, BlogList } from '@/components/blog/BlogCard' import { BlogSidebar } from '@/components/blog/BlogSidebar' import { BlogFilter, BlogFilters } from '@/components/blog/BlogFilter' import { BlogSEO } from '@/components/blog/BlogSEO' import { Button } from '@/components/ui/button' import { Input } from '@/components/ui/input' import { Badge } from '@/components/ui/badge' import { Card, CardContent } from '@/components/ui/card' import { Loader2, Search, Grid, List, BookOpen, TrendingUp, Calendar, Users, MessageSquare } from 'lucide-react' import { BlogPost, BlogCategory, BlogTag, BlogPostQuery } from '@/types' export function BlogPage() { const [searchQuery, setSearchQuery] = useState('') const [currentFilters, setCurrentFilters] = useState<BlogFilters>({ search: '', categoryId: null, tagId: null, sortBy: 'published_at', sortOrder: 'desc', dateFilter: 'all', isFeatured: null }) const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid') const [currentPage, setCurrentPage] = useState(1) const postsPerPage = 9 // Fetch blog posts with filters const fetchBlogPosts = async (filters: BlogFilters, page: number) => { let query = supabase .from('blog_posts') .select('*', { count: 'exact' }) // Apply filters if (filters.search) { query = query.or(`title.ilike.%${filters.search}%,excerpt.ilike.%${filters.search}%,content.ilike.%${filters.search}%`) } if (filters.categoryId) { query = query.filter('categories', 'cs', `[{"id": "${filters.categoryId}"}]`) } if (filters.tagId) { query = query.filter('tags', 'cs', `[{"id": "${filters.tagId}"}]`) } if (filters.isFeatured !== null) { query = query.eq('is_featured', filters.isFeatured) } // Apply date filter if (filters.dateFilter !== 'all') { const now = new Date() let startDate = new Date() switch (filters.dateFilter) { case 'today': startDate.setHours(0, 0, 0, 0) break case 'week': startDate.setDate(now.getDate() - 7) break case 'month': startDate.setMonth(now.getMonth() - 1) break case 'year': startDate.setFullYear(now.getFullYear() - 1) break } query = query.gte('published_at', startDate.toISOString()) } // Apply sorting const orderDirection = filters.sortOrder === 'desc' ? false : true query = query.order(filters.sortBy, { ascending: orderDirection }) // Apply pagination const from = (page - 1) * postsPerPage const to = from + postsPerPage - 1 query = query.range(from, to) const { data, error, count } = await query if (error) throw error return { posts: data || [], total: count || 0, has_more: (count || 0) > to + 1 } } // Fetch categories const { data: categories = [] } = useQuery({ queryKey: ['blog-categories'], queryFn: async () => { const { data, error } = await supabase .from('blog_categories') .select('*') .order('name') if (error) throw error return data } }) // Fetch tags const { data: tags = [] } = useQuery({ queryKey: ['blog-tags'], queryFn: async () => { const { data, error } = await supabase .from('blog_tags') .select('*') .order('post_count', { ascending: false }) if (error) throw error return data } }) // Fetch featured post const { data: featuredPost = null } = useQuery({ queryKey: ['blog-featured-post'], queryFn: async () => { const { data, error } = await supabase .from('blog_posts') .select('*') .eq('is_featured', true) .eq('status', 'published') .order('published_at', { ascending: false }) .limit(1) .single() if (error && error.code !== 'PGRST116') throw error return data } }) // Fetch popular posts const { data: popularPosts = [] } = useQuery({ queryKey: ['blog-popular-posts'], queryFn: async () => { const { data, error } = await supabase .from('blog_posts') .select('*') .eq('status', 'published') .order('view_count', { ascending: false }) .limit(5) if (error) throw error return data } }) // Fetch recent posts const { data: recentPosts = [] } = useQuery({ queryKey: ['blog-recent-posts'], queryFn: async () => { const { data, error } = await supabase .from('blog_posts') .select('*') .eq('status', 'published') .order('published_at', { ascending: false }) .limit(5) if (error) throw error return data } }) // Main posts query const { data: postsData, isLoading, error } = useQuery({ queryKey: ['blog-posts', currentFilters, currentPage], queryFn: () => fetchBlogPosts(currentFilters, currentPage), keepPreviousData: true }) const totalPages = Math.ceil((postsData?.total || 0) / postsPerPage) const handleFilterChange = (filters: BlogFilters) => { setCurrentFilters(filters) setCurrentPage(1) } const handleSearch = (query: string) => { setCurrentFilters(prev => ({ ...prev, search: query })) setCurrentPage(1) } const handlePageChange = (page: number) => { setCurrentPage(page) window.scrollTo({ top: 0, behavior: 'smooth' }) } // Generate pagination const generatePagination = () => { const pages = [] const maxVisible = 7 if (totalPages <= maxVisible) { for (let i = 1; i <= totalPages; i++) { pages.push(i) } } else { pages.push(1) if (currentPage > 3) pages.push('...') const start = Math.max(2, currentPage - 1) const end = Math.min(totalPages - 1, currentPage + 1) for (let i = start; i <= end; i++) { pages.push(i) } if (currentPage < totalPages - 2) pages.push('...') if (totalPages > 1) pages.push(totalPages) } return pages } if (error) { return ( <div className="container mx-auto px-4 py-8"> <div className="text-center"> <h2 className="text-2xl font-bold mb-4">Error loading blog posts</h2> <p className="text-muted-foreground">Please try again later.</p> </div> </div> ) } return ( <> <BlogSEO title="Blog - Forex Trading Insights & Broker Reviews | BrokerAnalysis" description="Stay updated with the latest forex trading strategies, broker reviews, market analysis, and trading education from industry experts." keywords="forex blog, trading insights, broker reviews, market analysis, trading education, forex strategies" type="blog" posts={postsData?.posts || []} /> <div className="container mx-auto px-4 py-8"> {/* Header */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="text-center mb-12" > <div className="flex items-center justify-center gap-2 mb-4"> <BookOpen className="h-8 w-8 text-primary" /> <h1 className="text-4xl md:text-5xl font-bold">Blog</h1> </div> <p className="text-xl text-muted-foreground max-w-2xl mx-auto"> Expert insights on forex trading, broker reviews, market analysis, and trading strategies </p> {/* Quick Stats */} <div className="flex justify-center gap-8 mt-8"> <div className="text-center"> <div className="text-2xl font-bold text-primary">100+</div> <div className="text-sm text-muted-foreground">Articles</div> </div> <div className="text-center"> <div className="text-2xl font-bold text-primary">8</div> <div className="text-sm text-muted-foreground">Categories</div> </div> <div className="text-center"> <div className="text-2xl font-bold text-primary">15+</div> <div className="text-sm text-muted-foreground">Authors</div> </div> <div className="text-center"> <div className="text-2xl font-bold text-primary">50K+</div> <div className="text-sm text-muted-foreground">Readers</div> </div> </div> </motion.div> <div className="grid grid-cols-1 lg:grid-cols-4 gap-8"> {/* Main Content */} <div className="lg:col-span-3"> {/* View Controls */} <div className="flex items-center justify-between mb-6"> <div className="flex items-center gap-2"> <Button variant={viewMode === 'grid' ? 'default' : 'outline'} size="sm" onClick={() => setViewMode('grid')} > <Grid className="h-4 w-4" /> </Button> <Button variant={viewMode === 'list' ? 'default' : 'outline'} size="sm" onClick={() => setViewMode('list')} > <List className="h-4 w-4" /> </Button> </div> <div className="text-sm text-muted-foreground"> Showing {postsData?.posts.length || 0} of {postsData?.total || 0} posts </div> </div> {/* Blog Posts */} {isLoading ? ( <div className="space-y-6"> {[...Array(3)].map((_, i) => ( <div key={i} className="animate-pulse"> <Card> <CardContent className="p-6"> <div className="h-6 bg-muted rounded mb-4"></div> <div className="h-4 bg-muted rounded mb-2"></div> <div className="h-4 bg-muted rounded w-3/4"></div> </CardContent> </Card> </div> ))} </div> ) : ( <BlogList posts={postsData?.posts || []} featuredPost={currentPage === 1 ? featuredPost : null} /> )} {/* Pagination */} {totalPages > 1 && ( <div className="flex justify-center mt-8"> <div className="flex items-center gap-2"> <Button variant="outline" size="sm" onClick={() => handlePageChange(currentPage - 1)} disabled={currentPage === 1} > Previous </Button> {generatePagination().map((page, index) => ( <div key={index}> {page === '...' ? ( <span className="px-2 py-1">...</span> ) : ( <Button variant={currentPage === page ? 'default' : 'outline'} size="sm" onClick={() => handlePageChange(page as number)} > {page} </Button> )} </div> ))} <Button variant="outline" size="sm" onClick={() => handlePageChange(currentPage + 1)} disabled={currentPage === totalPages} > Next </Button> </div> </div> )} </div> {/* Sidebar */} <div className="lg:col-span-1"> <div className="sticky top-24"> <BlogSidebar categories={categories} tags={tags} popularPosts={popularPosts} recentPosts={recentPosts} onSearch={handleSearch} /> </div> </div> </div> </div> </> ) }