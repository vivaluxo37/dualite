import { useState } from 'react' import { Navigate } from 'react-router-dom' import { Heart, TrendingUp, BookOpen, BarChart3, Clock, Target, Award, Settings, Bell, Calendar, Activity } from 'lucide-react' import { useClerkAuthContext } from '@/contexts/ClerkAuthContext' import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card' import { Button } from '@/components/ui/button' import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs' import { Link } from 'react-router-dom' import { SavedBrokers } from '@/components/dashboard/SavedBrokers' import { MatchHistory } from '@/components/dashboard/MatchHistory' import LearningProgress from '@/components/dashboard/LearningProgress' import { DashboardSEO, DashboardBreadcrumb, DashboardInternalLinks } from '@/components/seo/DashboardSEO' import { SettingsModal } from '@/components/settings/SettingsModal' import { AlertsModal } from '@/components/alerts/AlertsModal' import { BlogPostsWidget } from '@/components/blog/LatestBlogPosts' import { useSavedBrokers } from '@/hooks/useSavedBrokers' import { useQuery } from '@tanstack/react-query' import { supabase } from '@/lib/supabase' export function DashboardPage() { const { isSignedIn, isLoaded, userId } = useClerkAuthContext() const [activeTab, setActiveTab] = useState('overview') const [showSettings, setShowSettings] = useState(false) const [showAlerts, setShowAlerts] = useState(false) // Redirect to home if not signed in if (!isLoaded) { return <div className="flex items-center justify-center min-h-screen">Loading...</div> } if (!isSignedIn) { return <Navigate to="/" replace /> } // Get saved brokers const { savedBrokers } = useSavedBrokers() // Get match history const { data: matchHistory } = useQuery({ queryKey: ['matchHistory', userId], queryFn: async () => { if (!userId) return [] const { data, error } = await supabase .from('ai_matcher_results') .select('*') .eq('user_id', userId) .order('created_at', { ascending: false }) if (error) throw error return data }, enabled: !!userId, }) // Get learning progress const { data: userProgress } = useQuery({ queryKey: ['user-progress', userId], queryFn: async () => { if (!userId) return [] const { data, error } = await supabase .from('user_progress') .select(` *, learning_modules ( estimated_duration, total_lessons ) `) .eq('user_id', userId) if (error) throw error return data }, enabled: !!userId, }) // Calculate real stats const userStats = { totalSavedBrokers: savedBrokers.length, totalMatches: matchHistory?.length || 0, learningHours: userProgress?.reduce((sum, p) => { const progress = p.completed_lessons / p.learning_modules.total_lessons return sum + (p.learning_modules.estimated_duration * progress) }, 0) || 0, coursesCompleted: userProgress?.filter(p => p.completed_at).length || 0 } return ( <> <DashboardSEO /> <div className="container mx-auto px-4 py-8"> {/* SEO Breadcrumb */} <DashboardBreadcrumb className="mb-6" /> {/* Header */} <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-8"> <div> <h1 className="text-3xl font-bold tracking-tight"> Your Trading Dashboard </h1> <p className="text-muted-foreground mt-2"> Welcome back! Here's your trading journey overview with portfolio management, broker comparisons, and trading tools. </p> </div> <div className="flex items-center gap-2 mt-4 md:mt-0"> <Button variant="outline" size="sm" onClick={() => setShowSettings(true)}> <Settings className="h-4 w-4 mr-2" /> Settings </Button> <Button variant="outline" size="sm" onClick={() => setShowAlerts(true)}> <Bell className="h-4 w-4 mr-2" /> Alerts </Button> </div> </div> {/* Stats Overview */} <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8"> <Card> <CardContent className="p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm font-medium text-muted-foreground">Saved Brokers</p> <p className="text-2xl font-bold" aria-label={`${userStats.totalSavedBrokers} saved brokers`}> {userStats.totalSavedBrokers} </p> <p className="text-xs text-muted-foreground mt-1">Track your favorite brokers</p> </div> <Heart className="h-8 w-8 text-red-500" aria-hidden="true" /> </div> </CardContent> </Card> <Card> <CardContent className="p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm font-medium text-muted-foreground">AI Matches</p> <p className="text-2xl font-bold" aria-label={`${userStats.totalMatches} AI broker matches`}> {userStats.totalMatches} </p> <p className="text-xs text-muted-foreground mt-1">AI-powered broker recommendations</p> </div> <Target className="h-8 w-8 text-blue-500" aria-hidden="true" /> </div> </CardContent> </Card> <Card> <CardContent className="p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm font-medium text-muted-foreground">Learning Hours</p> <p className="text-2xl font-bold" aria-label={`${userStats.learningHours} learning hours completed`}> {userStats.learningHours} </p> <p className="text-xs text-muted-foreground mt-1">Trading education time</p> </div> <Clock className="h-8 w-8 text-green-500" aria-hidden="true" /> </div> </CardContent> </Card> <Card> <CardContent className="p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm font-medium text-muted-foreground">Courses Completed</p> <p className="text-2xl font-bold" aria-label={`${userStats.coursesCompleted} trading courses completed`}> {userStats.coursesCompleted} </p> <p className="text-xs text-muted-foreground mt-1">Trading skills mastered</p> </div> <Award className="h-8 w-8 text-purple-500" aria-hidden="true" /> </div> </CardContent> </Card> </div> {/* Main Content Tabs */} <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6"> <TabsList className="grid w-full grid-cols-5"> <TabsTrigger value="overview">Overview</TabsTrigger> <TabsTrigger value="brokers">Saved Brokers</TabsTrigger> <TabsTrigger value="matches">Match History</TabsTrigger> <TabsTrigger value="learning">Learning Progress</TabsTrigger> <TabsTrigger value="blog">Blog Updates</TabsTrigger> </TabsList> <TabsContent value="overview" className="space-y-6"> <div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> {/* Recent Activity */} <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <BarChart3 className="h-5 w-5" /> Recent Activity </CardTitle> </CardHeader> <CardContent> <div className="space-y-4"> <div className="flex items-center gap-3 p-3 rounded-lg bg-muted/50"> <Heart className="h-4 w-4 text-red-500" /> <div className="flex-1"> <p className="text-sm font-medium">Saved IC Markets</p> <p className="text-xs text-muted-foreground">2 hours ago</p> </div> </div> <div className="flex items-center gap-3 p-3 rounded-lg bg-muted/50"> <Target className="h-4 w-4 text-blue-500" /> <div className="flex-1"> <p className="text-sm font-medium">Completed AI Matcher</p> <p className="text-xs text-muted-foreground">1 day ago</p> </div> </div> <div className="flex items-center gap-3 p-3 rounded-lg bg-muted/50"> <BookOpen className="h-4 w-4 text-green-500" /> <div className="flex-1"> <p className="text-sm font-medium">Finished Technical Analysis lesson</p> <p className="text-xs text-muted-foreground">3 days ago</p> </div> </div> </div> </CardContent> </Card> {/* Quick Actions */} <Card> <CardHeader> <CardTitle>Quick Actions</CardTitle> <CardDescription> Jump back into your trading journey with our comprehensive trading tools </CardDescription> </CardHeader> <CardContent className="space-y-3"> <Link to="/ai-match" title="AI-Powered Broker Matching - Find your perfect forex broker based on trading style"> <Button className="w-full justify-start" variant="outline"> <Target className="h-4 w-4 mr-2" /> Find New Brokers </Button> </Link> <Link to="/compare" title="Compare Forex Brokers - Side-by-side broker comparison with spreads, fees, and regulation"> <Button className="w-full justify-start" variant="outline"> <BarChart3 className="h-4 w-4 mr-2" /> Compare Brokers </Button> </Link> <Link to="/learn" title="Forex Trading Education - Learn technical analysis, risk management, and trading strategies"> <Button className="w-full justify-start" variant="outline"> <BookOpen className="h-4 w-4 mr-2" /> Continue Learning </Button> </Link> <Link to="/calculators" title="Trading Calculators - Profit, margin, pip value, and position size calculators"> <Button className="w-full justify-start" variant="outline"> <TrendingUp className="h-4 w-4 mr-2" /> Trading Calculators </Button> </Link> <Link to="/simulator" title="Trading Simulator - Practice trading strategies with virtual money"> <Button className="w-full justify-start" variant="outline"> <TrendingUp className="h-4 w-4 mr-2" /> Trading Simulator </Button> </Link> <Link to="/brokers" title="Browse Forex Brokers - Explore regulated forex brokers by country and features"> <Button className="w-full justify-start" variant="outline"> <Heart className="h-4 w-4 mr-2" /> Browse Brokers </Button> </Link> </CardContent> </Card> </div> </TabsContent> <TabsContent value="brokers" className="space-y-6"> <SavedBrokers /> </TabsContent> <TabsContent value="matches" className="space-y-6"> <MatchHistory /> </TabsContent> <TabsContent value="learning" className="space-y-6"> <LearningProgress /> </TabsContent> <TabsContent value="blog" className="space-y-6"> <BlogPostsWidget /> </TabsContent> </Tabs> {/* SEO Internal Links Section */} <div className="mt-12"> <DashboardInternalLinks /> </div> {/* Settings Modal */} <SettingsModal isOpen={showSettings} onClose={() => setShowSettings(false)} /> {/* Alerts Modal */} <AlertsModal isOpen={showAlerts} onClose={() => setShowAlerts(false)} /> </div> </> ) } 