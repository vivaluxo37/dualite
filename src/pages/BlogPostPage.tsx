import { useState, useEffect } from 'react' import { useParams, Link } from 'react-router-dom' import { useQuery } from '@tanstack/react-query' import { motion } from 'framer-motion' import { supabase } from '@/lib/supabase' import { BlogContent } from '@/components/blog/BlogContent' import { BlogSidebar } from '@/components/blog/BlogSidebar' import { BlogSEO } from '@/components/blog/BlogSEO' import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card' import { Button } from '@/components/ui/button' import { Badge } from '@/components/ui/badge' import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar' import { Loader2, ArrowLeft, Share2, Heart, MessageCircle, BookOpen, Clock, Eye, User, Calendar, Hash } from 'lucide-react' import { BlogPost, BlogCategory, BlogTag } from '@/types' export function BlogPostPage() { const { slug } = useParams<{ slug: string }>() const [viewCount, setViewCount] = useState(0) const [likeCount, setLikeCount] = useState(0) const [isLiked, setIsLiked] = useState(false) // Fetch blog post const { data: post, isLoading, error } = useQuery({ queryKey: ['blog-post', slug], queryFn: async () => { if (!slug) throw new Error('Slug is required') const { data, error } = await supabase .from('blog_posts') .select('*') .eq('slug', slug) .eq('status', 'published') .single() if (error) throw error return data }, enabled: !!slug }) // Fetch related posts const { data: relatedPosts = [] } = useQuery({ queryKey: ['blog-related-posts', post?.id, post?.categories], queryFn: async () => { if (!post?.id || !post?.categories?.length) return [] const categoryIds = post.categories.map(cat => cat.category.id) const { data, error } = await supabase .from('blog_posts') .select(` id, title, slug, excerpt, featured_image_url, published_at, reading_time, view_count, `) .neq('id', post.id) .eq('status', 'published') .in('id', ( supabase .from('blog_post_categories') .select('post_id') .in('category_id', categoryIds) )) .order('published_at', { ascending: false }) .limit(3) if (error) throw error return data }, enabled: !!post?.id }) // Fetch categories const { data: categories = [] } = useQuery({ queryKey: ['blog-categories'], queryFn: async () => { const { data, error } = await supabase .from('blog_categories') .select('*') .order('name') if (error) throw error return data } }) // Fetch tags const { data: tags = [] } = useQuery({ queryKey: ['blog-tags'], queryFn: async () => { const { data, error } = await supabase .from('blog_tags') .select('*') .order('post_count', { ascending: false }) if (error) throw error return data } }) // Fetch popular posts const { data: popularPosts = [] } = useQuery({ queryKey: ['blog-popular-posts'], queryFn: async () => { const { data, error } = await supabase .from('blog_posts') .select(` id, title, slug, excerpt, published_at, reading_time, view_count, `) .eq('status', 'published') .order('view_count', { ascending: false }) .limit(5) if (error) throw error return data } }) // Increment view count useEffect(() => { if (post && !viewCount) { const incrementViewCount = async () => { try { await supabase .from('blog_posts') .update({ view_count: (post.view_count || 0) + 1 }) .eq('id', post.id) setViewCount(post.view_count || 0) } catch (error) { console.error('Error incrementing view count:', error) } } incrementViewCount() } }, [post, viewCount]) // Load like state from localStorage useEffect(() => { if (post) { const savedLikes = localStorage.getItem(`blog_likes_${post.id}`) const savedLiked = localStorage.getItem(`blog_liked_${post.id}`) if (savedLikes) { setLikeCount(parseInt(savedLikes)) } if (savedLiked) { setIsLiked(savedLiked === 'true') } } }, [post]) if (isLoading) { return ( <div className="container mx-auto px-4 py-8"> <div className="flex justify-center items-center min-h-[400px]"> <Loader2 className="h-8 w-8 animate-spin text-primary" /> </div> </div> ) } if (error || !post) { return ( <div className="container mx-auto px-4 py-8"> <div className="text-center"> <h2 className="text-2xl font-bold mb-4">Post not found</h2> <p className="text-muted-foreground mb-6">The blog post you're looking for doesn't exist.</p> <Button asChild> <Link to="/blog">Back to Blog</Link> </Button> </div> </div> ) } const formatDate = (date: string) => { try { return new Date(date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) } catch { return 'Invalid date' } } const getReadingTime = (minutes: number) => { if (minutes < 1) return '1 min read' if (minutes === 1) return '1 min read' return `${minutes} min read` } const handleLike = () => { const newLiked = !isLiked setIsLiked(newLiked) const newLikeCount = newLiked ? likeCount + 1 : likeCount - 1 setLikeCount(newLikeCount) localStorage.setItem(`blog_likes_${post.id}`, newLikeCount.toString()) localStorage.setItem(`blog_liked_${post.id}`, newLiked.toString()) } const handleShare = async () => { if (navigator.share) { try { await navigator.share({ title: post.title, text: post.excerpt || post.content.substring(0, 100), url: window.location.href }) } catch (err) { // User canceled share } } else { // Fallback - copy to clipboard await navigator.clipboard.writeText(window.location.href) } } return ( <> <BlogSEO title={post.seo_title || post.title} description={post.seo_description || post.excerpt || post.content.substring(0, 160)} keywords={post.seo_keywords?.join(', ') || post.meta_keywords?.join(', ') || 'forex trading, broker reviews'} canonicalUrl={window.location.href} ogImage={post.featured_image_url || undefined} type="post" post={post} authorName={post.author?.display_name || 'BrokerAnalysis'} publishedDate={post.published_at || post.created_at} modifiedDate={post.updated_at} /> <div className="container mx-auto px-4 py-8"> <div className="grid grid-cols-1 lg:grid-cols-4 gap-8"> {/* Main Content */} <div className="lg:col-span-3"> <BlogContent post={post} /> {/* Related Posts */} {relatedPosts.length > 0 && ( <Card className="mt-8"> <CardHeader> <CardTitle className="flex items-center gap-2"> <BookOpen className="h-5 w-5" /> Related Articles </CardTitle> </CardHeader> <CardContent> <div className="grid gap-4"> {relatedPosts.map((relatedPost) => ( <Link key={relatedPost.id} to={`/blog/${relatedPost.slug}`} className="block p-4 border rounded-lg hover:bg-muted/50 transition-colors group" > <div className="flex gap-4"> {relatedPost.featured_image_url && ( <img src={relatedPost.featured_image_url} alt={relatedPost.title} className="w-20 h-20 object-cover rounded-lg" /> )} <div className="flex-1 space-y-2"> <h3 className="font-semibold line-clamp-2 group-hover:text-primary transition-colors"> {relatedPost.title} </h3> <p className="text-sm text-muted-foreground line-clamp-2"> {relatedPost.excerpt || 'No excerpt available'} </p> <div className="flex items-center gap-4 text-xs text-muted-foreground"> <div className="flex items-center gap-1"> <Calendar className="h-3 w-3" /> <span>{formatDate(relatedPost.published_at || relatedPost.created_at)}</span> </div> <div className="flex items-center gap-1"> <Clock className="h-3 w-3" /> <span>{getReadingTime(relatedPost.reading_time)}</span> </div> <div className="flex items-center gap-1"> <Eye className="h-3 w-3" /> <span>{relatedPost.view_count}</span> </div> </div> </div> </div> </Link> ))} </div> </CardContent> </Card> )} {/* Comments Section */} {post.is_comment_enabled && ( <Card className="mt-8"> <CardHeader> <CardTitle className="flex items-center gap-2"> <MessageCircle className="h-5 w-5" /> Comments ({post._count?.comments || 0}) </CardTitle> </CardHeader> <CardContent> <div className="space-y-4"> <p className="text-muted-foreground"> Comments feature coming soon! Stay tuned for interactive discussions. </p> </div> </CardContent> </Card> )} </div> {/* Sidebar */} <div className="lg:col-span-1"> <div className="sticky top-24 space-y-6"> {/* Author Card */} {post.author && ( <Card> <CardContent className="p-6"> <div className="text-center space-y-4"> <Avatar className="h-16 w-16 mx-auto"> <AvatarImage src={post.author.avatar_url || undefined} /> <AvatarFallback> <User className="h-8 w-8" /> </AvatarFallback> </Avatar> <div> <h3 className="font-semibold">{post.author.display_name || 'Anonymous'}</h3> <p className="text-sm text-muted-foreground">Author</p> </div> <div className="flex justify-center gap-2"> <Button variant="outline" size="sm"> Follow </Button> </div> </div> </CardContent> </Card> )} {/* Blog Sidebar */} <BlogSidebar categories={categories} tags={tags} popularPosts={popularPosts} recentPosts={popularPosts.slice(0, 5)} /> {/* Share Card */} <Card> <CardContent className="p-6"> <h3 className="font-semibold mb-4">Share this article</h3> <div className="flex gap-2"> <Button variant="outline" size="sm" onClick={handleShare}> <Share2 className="h-4 w-4 mr-2" /> Share </Button> <Button variant="outline" size="sm" onClick={handleLike}> <Heart className={`h-4 w-4 mr-2 ${isLiked ? 'fill-current text-red-500' : ''}`} /> {likeCount} </Button> </div> </CardContent> </Card> </div> </div> </div> </div> </> ) }