import { useParams, Link } from 'react-router-dom' import { Suspense, lazy } from 'react' import { NotFoundPage } from '@/components/error/NotFoundPage' import { LoadingState } from '@/components/error/LoadingState' import { ErrorBoundary } from '@/components/error/ErrorBoundary' import { regionDataMap } from '@/data/forex-brokers/regions' import { tradingTypeDataMap } from '@/data/forex-brokers/trading-types' import { regionalDataMap } from '@/data/forex-brokers/regional' // Lazy load page components for better performance const RegionBrokerPage = lazy(() => import('./RegionBrokerPage')) const TradingTypePage = lazy(() => import('./TradingTypePage')) const RegionalPage = lazy(() => import('./RegionalPage')) const NepalRegionalPage = lazy(() => import('./NepalRegionalPage')) const USForexBrokersPage = lazy(() => import('./USForexBrokersPage')) const CanadaForexBrokersPage = lazy(() => import('./CanadaForexBrokersPage')) const DubaiRegionalPage = lazy(() => import('./DubaiRegionalPage')) const SingaporeRegionalPage = lazy(() => import('./SingaporeRegionalPage')) const SouthAfricaRegionalPage = lazy(() => import('./SouthAfricaRegionalPage')) const PakistanRegionalPage = lazy(() => import('./PakistanRegionalPage')) const IndiaRegionalPage = lazy(() => import('./IndiaRegionalPage')) const MalaysiaRegionalPage = lazy(() => import('./regions/malaysia').then(module => ({ default: module.default }))) const AustraliaRegionalPage = lazy(() => import('./regions/australia').then(module => ({ default: module.default }))) const BeginnersForexBrokersPage = lazy(() => import('./BeginnersForexBrokersPage')) const IslamicForexBrokersPage = lazy(() => import('./IslamicForexBrokersPage')) const LowestSpreadPage = lazy(() => import('./LowestSpreadPage')) const AutoTradingPage = lazy(() => import('./AutoTradingPage')) const CopyTradingPage = lazy(() => import('./CopyTradingPage')) const DemoAccountsPage = lazy(() => import('./DemoAccountsPage')) const OilTradingPage = lazy(() => import('./OilTradingPage')) const ECNBrokersPage = lazy(() => import('./ECNBrokersPage')) const StockTradingBrokersPage = lazy(() => import('./trading-types/StockTradingBrokersPage')) const ScalpingPage = lazy(() => import('./ScalpingPage')) const HighLeveragePage = lazy(() => import('./HighLeveragePage')) export function ForexBrokersRouter() { const { '*': path } = useParams() if (!path) { // Handle landing page or redirect return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading forex brokers..." />}> <NotFoundPage title="Forex Brokers Landing" description="Welcome to our comprehensive forex broker guide." suggestions={[ "Browse our broker categories", "Search for specific brokers", "Check out our trading guides" ]} showBackButton={false} /> </Suspense> </ErrorBoundary> ) } // Parse the path to determine which type of page to show const pathParts = path.split('/') if (pathParts[0] === 'regions' && pathParts[1]) { const regionId = pathParts[1] // Handle special case for USA, Canada and Dubai regional pages if (regionId === 'usa') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading US forex brokers..." />}> <USForexBrokersPage /> </Suspense> </ErrorBoundary> ) } if (regionId === 'canada') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading Canadian forex brokers..." />}> <CanadaForexBrokersPage /> </Suspense> </ErrorBoundary> ) } if (regionId === 'dubai') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading Dubai forex brokers..." />}> <DubaiRegionalPage /> </Suspense> </ErrorBoundary> ) } // Handle Nepal-specific page with enhanced content if (regionId === 'nepal') { const nepalData = regionalDataMap[regionId] if (!nepalData) { console.error('Nepal data not found in regionalDataMap for regionId:', regionId) return ( <ErrorBoundary> <NotFoundPage title="Nepal Data Not Found" description="The Nepal forex brokers data could not be loaded." suggestions={[ "Check the data configuration", "Try refreshing the page", "Contact support if the issue persists" ]} showBackButton={true} /> </ErrorBoundary> ) } return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading Nepal forex brokers..." />}> <NepalRegionalPage data={nepalData} /> </Suspense> </ErrorBoundary> ) } // Handle Singapore-specific page if (regionId === 'singapore') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading Singapore forex brokers..." />}> <SingaporeRegionalPage /> </Suspense> </ErrorBoundary> ) } // Handle South Africa-specific page if (regionId === 'south-africa' || regionId === 'southafrica') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading South Africa forex brokers..." />}> <SouthAfricaRegionalPage /> </Suspense> </ErrorBoundary> ) } // Handle Pakistan-specific page if (regionId === 'pakistan') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading Pakistan forex brokers..." />}> <PakistanRegionalPage /> </Suspense> </ErrorBoundary> ) } // Handle India-specific page if (regionId === 'india') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading India forex brokers..." />}> <IndiaRegionalPage /> </Suspense> </ErrorBoundary> ) } // Handle Malaysia-specific page if (regionId === 'malaysia') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading Malaysia forex brokers..." />}> <MalaysiaRegionalPage /> </Suspense> </ErrorBoundary> ) } const data = regionDataMap[regionId] if (!data) { return ( <ErrorBoundary> <NotFoundPage title="Region Not Found" description={`The region "${regionId}" was not found in our forex brokers database.`} suggestions={[ "Check the region name for typos", "Browse our available regions", "Try searching for forex brokers in your area" ]} showBackButton={true} /> </ErrorBoundary> ) } return ( <ErrorBoundary> <Suspense fallback={<LoadingState message={`Loading ${data.name} region brokers...`} />}> <RegionBrokerPage data={data} /> </Suspense> </ErrorBoundary> ) } if (pathParts[0] === 'trading-types' && pathParts[1]) { let typeId = pathParts[1] // Handle URL mappings for trading types const urlMappings: Record<string, string> = { // Long-form URLs to short-form IDs 'auto-trading-forex-brokers': 'auto-trading', 'beginners-forex-brokers': 'beginners', 'copy-trading-forex-brokers': 'copy-trading', 'demo-accounts-forex-brokers': 'demo-accounts', 'islamic-forex-brokers': 'islamic', 'low-spread-forex-brokers': 'low-spread', 'oil-trading-forex-brokers': 'oil-trading', 'ecn-forex-brokers': 'ecn', 'crude-oil-brokers': 'oil-trading', 'mt4-forex-brokers': 'mt4', 'stock-trading-brokers': 'stock-trading', 'scalping-forex-brokers': 'scalping', 'high-leverage-forex-brokers': 'high-leverage', // Alternative naming conventions 'ecn-brokers': 'ecn', 'scalping-brokers': 'scalping', 'high-leverage-brokers': 'high-leverage', // Redirect leverage to high-leverage 'leverage': 'high-leverage' } typeId = urlMappings[typeId] || typeId // Use specific components for certain trading types if (typeId === 'demo-accounts') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading demo account forex brokers..." />}> <DemoAccountsPage /> </Suspense> </ErrorBoundary> ) } if (typeId === 'beginners') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading beginner forex brokers..." />}> <BeginnersForexBrokersPage /> </Suspense> </ErrorBoundary> ) } if (typeId === 'islamic') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading Islamic forex brokers..." />}> <IslamicForexBrokersPage /> </Suspense> </ErrorBoundary> ) } if (typeId === 'low-spread') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading lowest spread forex brokers..." />}> <LowestSpreadPage /> </Suspense> </ErrorBoundary> ) } if (typeId === 'auto-trading') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading auto trading forex brokers..." />}> <AutoTradingPage /> </Suspense> </ErrorBoundary> ) } if (typeId === 'copy-trading') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading copy trading forex brokers..." />}> <CopyTradingPage /> </Suspense> </ErrorBoundary> ) } if (typeId === 'oil-trading') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading oil trading brokers..." />}> <OilTradingPage /> </Suspense> </ErrorBoundary> ) } if (typeId === 'ecn') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading ECN forex brokers..." />}> <ECNBrokersPage /> </Suspense> </ErrorBoundary> ) } if (typeId === 'stock-trading') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading stock trading brokers..." />}> <StockTradingBrokersPage /> </Suspense> </ErrorBoundary> ) } if (typeId === 'scalping') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading scalping forex brokers..." />}> <ScalpingPage /> </Suspense> </ErrorBoundary> ) } if (typeId === 'high-leverage') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading high leverage forex brokers..." />}> <HighLeveragePage /> </Suspense> </ErrorBoundary> ) } const data = tradingTypeDataMap[typeId] if (!data) { return ( <ErrorBoundary> <NotFoundPage title="Trading Type Not Found" description={`The trading type "${typeId}" was not found in our forex brokers database.`} suggestions={[ "Check the trading type name for typos", "Browse our available trading types", "Try searching for specific broker features" ]} showBackButton={true} /> </ErrorBoundary> ) } return ( <ErrorBoundary> <Suspense fallback={<LoadingState message={`Loading ${data.name} trading brokers...`} />}> <TradingTypePage data={data} /> </Suspense> </ErrorBoundary> ) } if (pathParts[0] === 'regional' && pathParts[1]) { let countryId = pathParts[1] // Handle URL mappings for regional pages const regionalUrlMappings: Record<string, string> = { 'us-forex-brokers': 'usa', 'canadian-forex-brokers': 'canada', 'dubai-forex-brokers': 'dubai', 'india-forex-brokers': 'india', 'malaysia-forex-brokers': 'malaysia', 'nepal-forex-brokers': 'nepal', 'pakistan-forex-brokers': 'pakistan', 'singapore-forex-brokers': 'singapore', 'south-africa-forex-brokers': 'south-africa' } countryId = regionalUrlMappings[countryId] || countryId // Use specific component for US, Canada and Dubai forex brokers if (countryId === 'usa') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading US forex brokers..." />}> <USForexBrokersPage /> </Suspense> </ErrorBoundary> ) } if (countryId === 'canada') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading Canadian forex brokers..." />}> <CanadaForexBrokersPage /> </Suspense> </ErrorBoundary> ) } if (countryId === 'dubai') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading Dubai forex brokers..." />}> <DubaiRegionalPage /> </Suspense> </ErrorBoundary> ) } // Handle Nepal with enhanced content in regional section as well if (countryId === 'nepal') { const nepalData = regionalDataMap[countryId] if (!nepalData) { console.error('Nepal data not found in regionalDataMap for countryId:', countryId) return ( <ErrorBoundary> <NotFoundPage title="Nepal Data Not Found" description="The Nepal forex brokers data could not be loaded." suggestions={[ "Check the data configuration", "Try refreshing the page", "Contact support if the issue persists" ]} showBackButton={true} /> </ErrorBoundary> ) } return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading Nepal forex brokers..." />}> <NepalRegionalPage data={nepalData} /> </Suspense> </ErrorBoundary> ) } // Handle Singapore-specific page in regional section as well if (countryId === 'singapore') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading Singapore forex brokers..." />}> <SingaporeRegionalPage /> </Suspense> </ErrorBoundary> ) } // Handle South Africa-specific page in regional section as well if (countryId === 'south-africa' || countryId === 'southafrica') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading South Africa forex brokers..." />}> <SouthAfricaRegionalPage /> </Suspense> </ErrorBoundary> ) } // Handle Pakistan-specific page in regional section as well if (countryId === 'pakistan') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading Pakistan forex brokers..." />}> <PakistanRegionalPage /> </Suspense> </ErrorBoundary> ) } // Handle India-specific page in regional section as well if (countryId === 'india') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading India forex brokers..." />}> <IndiaRegionalPage /> </Suspense> </ErrorBoundary> ) } // Handle Malaysia-specific page in regional section as well if (countryId === 'malaysia') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading Malaysia forex brokers..." />}> <MalaysiaRegionalPage /> </Suspense> </ErrorBoundary> ) } // Handle Australia-specific page in regional section as well if (countryId === 'australia') { return ( <ErrorBoundary> <Suspense fallback={<LoadingState message="Loading Australia forex brokers..." />}> <AustraliaRegionalPage /> </Suspense> </ErrorBoundary> ) } const data = regionalDataMap[countryId] if (!data) { return ( <ErrorBoundary> <NotFoundPage title="Country Not Found" description={`The country "${countryId}" was not found in our forex brokers database.`} suggestions={[ "Check the country name for typos", "Browse our available countries", "Try searching for forex brokers in your region" ]} showBackButton={true} /> </ErrorBoundary> ) } return ( <ErrorBoundary> <Suspense fallback={<LoadingState message={`Loading ${data.country} brokers...`} />}> <RegionalPage data={data} /> </Suspense> </ErrorBoundary> ) } // Catch-all for any other routes return ( <ErrorBoundary> <NotFoundPage title="Page Not Found" description="The forex broker page you're looking for doesn't exist." suggestions={[ "Check the URL for typos", "Browse our forex broker categories", "Return to the home page and start over" ]} showBackButton={true} /> </ErrorBoundary> ) }