import React, { useState, useMemo, useEffect } from 'react' import { Link } from 'react-router-dom' import { motion } from 'framer-motion' import { SEO } from '@/components/SEO' import { Star, ExternalLink, TrendingUp, Clock, Target, BarChart3, CheckCircle, XCircle, Info, ChevronDown, ChevronUp, Search, Filter, SortAsc } from 'lucide-react' import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card' import { Button } from '@/components/ui/button' import { Badge } from '@/components/ui/badge' import { Progress } from '@/components/ui/progress' import { Input } from '@/components/ui/input' import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select' import { stockTradingTypeData } from '@/data/forex-brokers/trading-types/stock-trading' interface Broker { id: string name: string rating: number maxRating: number regulation: string[] minDeposit: string spread: string leverage: string platforms: string[] features: string[] summary: string description: string pros: string[] cons: string[] websiteUrl: string } const StockTradingBrokersPage = () => { const [searchTerm, setSearchTerm] = useState('') // Enhanced structured data for SEO const structuredData = { "@context": "https://schema.org", "@type": "FinancialService", "name": stockTradingTypeData.title, "description": stockTradingTypeData.description, "url": stockTradingTypeData.seo.canonical, "provider": { "@type": "Organization", "name": "BrokerAnalysis", "url": "https://brokeranalysis.com" }, "serviceType": "Stock Trading Broker Comparison", "areaServed": "Worldwide", "audience": { "@type": "Audience", "audienceType": "Traders and Investors" }, "offers": { "@type": "Offer", "itemOffered": { "@type": "Service", "name": "Broker Comparison Service", "description": "Comprehensive comparison of stock trading brokers" } }, "review": stockTradingTypeData.brokers.map((broker: any) => ({ "@type": "Review", "author": { "@type": "Organization", "name": "BrokerAnalysis" }, "itemReviewed": { "@type": "FinancialService", "name": broker.name, "provider": { "@type": "Organization", "name": broker.name } }, "reviewRating": { "@type": "Rating", "ratingValue": broker.rating, "bestRating": broker.maxRating } })), "mainEntity": { "@type": "FAQPage", "mainEntity": stockTradingTypeData.faqs.map((faq) => ({ "@type": "Question", "name": faq.question, "acceptedAnswer": { "@type": "Answer", "text": faq.answer } })) } } // Breadcrumb structured data const breadcrumbStructuredData = { "@context": "https://schema.org", "@type": "BreadcrumbList", "itemListElement": [ { "@type": "ListItem", "position": 1, "name": "Home", "item": "https://brokeranalysis.com" }, { "@type": "ListItem", "position": 2, "name": "Forex Brokers", "item": "https://brokeranalysis.com/forex-brokers" }, { "@type": "ListItem", "position": 3, "name": "Trading Types", "item": "https://brokeranalysis.com/forex-brokers/trading-types" }, { "@type": "ListItem", "position": 4, "name": "Stock Trading", "item": stockTradingTypeData.seo.canonical } ] } const [sortBy, setSortBy] = useState('rating') const [filterRegulation, setFilterRegulation] = useState('all') const [expandedBroker, setExpandedBroker] = useState<string | null>(null) const [expandedFaq, setExpandedFaq] = useState<string | null>(null) const [expandedSection, setExpandedSection] = useState<string | null>(null) const brokers: Broker[] = stockTradingTypeData.brokers as any[] const filteredBrokers = useMemo(() => { let filtered = brokers.filter(broker => { const matchesSearch = broker.name.toLowerCase().includes(searchTerm.toLowerCase()) || broker.features.some(feature => feature.toLowerCase().includes(searchTerm.toLowerCase()) ) const matchesRegulation = filterRegulation === 'all' || broker.regulation.some(reg => reg.toLowerCase().includes(filterRegulation.toLowerCase()) ) return matchesSearch && matchesRegulation }) // Sort brokers filtered.sort((a, b) => { switch (sortBy) { case 'rating': return b.rating - a.rating case 'minDeposit': return parseInt(a.minDeposit.replace(/[^0-9]/g, '')) - parseInt(b.minDeposit.replace(/[^0-9]/g, '')) case 'name': return a.name.localeCompare(b.name) default: return 0 } }) return filtered }, [brokers, searchTerm, sortBy, filterRegulation]) const getTrustScoreColor = (rating: number) => { if (rating >= 4.7) return 'bg-green-500' if (rating >= 4.3) return 'bg-yellow-500' return 'bg-red-500' } const toggleBrokerExpansion = (brokerId: string) => { setExpandedBroker(expandedBroker === brokerId ? null : brokerId) } const toggleFaqExpansion = (index: string) => { setExpandedFaq(expandedFaq === index ? null : index) } const toggleSectionExpansion = (section: string) => { setExpandedSection(expandedSection === section ? null : section) } return ( <> <SEO title={stockTradingTypeData.seo.title} description={stockTradingTypeData.seo.description} keywords={stockTradingTypeData.seo.keywords.join(', ')} canonicalUrl={stockTradingTypeData.seo.canonical} ogTitle={stockTradingTypeData.seo.title} ogDescription={stockTradingTypeData.seo.description} ogType="website" twitterCard="summary_large_image" structuredData={[structuredData, breadcrumbStructuredData]} additionalMetaTags={[ { name: 'author', content: 'BrokerAnalysis' }, { name: 'robots', content: 'index, follow' }, { name: 'googlebot', content: 'index, follow' }, { property: 'og:site_name', content: 'BrokerAnalysis' }, { property: 'og:locale', content: 'en_US' } ]} /> <div className="container mx-auto px-4 py-8 max-w-7xl"> {/* Hero Section */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="text-center mb-12" > <h1 className="text-4xl md:text-5xl font-bold mb-4 text-primary"> {stockTradingTypeData.title} </h1> <p className="text-xl text-muted-foreground mb-6 max-w-3xl mx-auto"> {stockTradingTypeData.description} </p> <div className="flex items-center justify-center gap-2 text-sm text-muted-foreground mb-8"> <Clock className="h-4 w-4" /> <span>{stockTradingTypeData.lastUpdated}</span> </div> </motion.div> {/* Introduction */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 }} className="mb-12" > <Card> <CardContent className="p-8"> <p className="text-lg leading-relaxed"> {stockTradingTypeData.introduction} </p> <div className="flex gap-4 mt-6"> <Button size="lg" className="flex-1"> Read More </Button> <Button variant="outline" size="lg" className="flex-1"> Get Started </Button> </div> </CardContent> </Card> </motion.div> {/* Top Brokers Section */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.2 }} className="mb-12" > <h2 className="text-3xl font-bold mb-8 text-center">Best Stock Trading Brokers</h2> {/* Filters */} <Card className="mb-8"> <CardContent className="p-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <div> <label className="block text-sm font-medium mb-2">Search Brokers</label> <div className="relative"> <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" /> <Input placeholder="Search brokers..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="pl-9" /> </div> </div> <div> <label className="block text-sm font-medium mb-2">Sort By</label> <Select value={sortBy} onValueChange={setSortBy}> <SelectTrigger> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="rating">Rating</SelectItem> <SelectItem value="minDeposit">Min Deposit</SelectItem> <SelectItem value="name">Name</SelectItem> </SelectContent> </Select> </div> <div> <label className="block text-sm font-medium mb-2">Regulation</label> <Select value={filterRegulation} onValueChange={setFilterRegulation}> <SelectTrigger> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="all">All Regulations</SelectItem> <SelectItem value="fca">FCA</SelectItem> <SelectItem value="asic">ASIC</SelectItem> <SelectItem value="cysec">CySEC</SelectItem> </SelectContent> </Select> </div> </div> </CardContent> </Card> {/* Broker List */} <div className="space-y-6"> {filteredBrokers.map((broker, index) => ( <Card key={broker.id} className="overflow-hidden"> <CardContent className="p-0"> {/* Top Section */} <div className="p-6 border-b"> <div className="flex items-start gap-6"> <div className="flex-shrink-0 text-center"> <div className="text-2xl font-bold text-primary mb-1">{index + 1}</div> <div className="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center text-primary font-bold"> {broker.name.split(' ').map(n => n[0]).join('').substring(0, 2)} </div> </div> <div className="flex-1"> <div className="flex items-start justify-between mb-4"> <div> <h3 className="text-2xl font-bold mb-2">{broker.name}</h3> <p className="text-lg text-muted-foreground mb-2">{broker.summary}</p> <div className="flex items-center gap-4 mb-3"> <div className="flex items-center"> <Star className="h-5 w-5 fill-yellow-400 text-yellow-400" /> <span className="ml-1 font-semibold">{broker.rating}/{broker.maxRating}</span> </div> <Badge variant="outline">{broker.minDeposit} Min Deposit</Badge> <Badge variant="secondary">{broker.leverage} Leverage</Badge> </div> <div className="flex gap-2 mb-4"> {broker.regulation.slice(0, 3).map(reg => ( <Badge key={reg} variant="outline" className="text-xs"> {reg} </Badge> ))} </div> </div> <div className="flex gap-2"> <Button size="lg"> Get Started </Button> <Button variant="outline" size="lg"> Read Review </Button> </div> </div> <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm"> <div> <div className="font-medium">Platforms</div> <div className="text-muted-foreground">{broker.platforms.slice(0, 2).join(', ')}</div> </div> <div> <div className="font-medium">Spread</div> <div className="text-muted-foreground">{broker.spread}</div> </div> <div> <div className="font-medium">Regulation</div> <div className="text-muted-foreground">{broker.regulation.length} regulators</div> </div> <div> <div className="font-medium">Features</div> <div className="text-muted-foreground">{broker.features.slice(0, 2).join(', ')}</div> </div> </div> </div> </div> {index === 2 && ( <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg text-sm text-yellow-800"> 75-95% of traders on margin lose </div> )} </div> {/* Expandable Details */} {expandedBroker === broker.id && ( <div className="p-6 bg-muted/50"> <div className="grid lg:grid-cols-2 gap-8"> <div> <h4 className="font-semibold mb-3">Description</h4> <p className="text-sm text-muted-foreground mb-4">{broker.description}</p> <div className="grid grid-cols-2 gap-4 mb-4"> <div> <h5 className="font-medium text-green-600 mb-2">Pros</h5> <ul className="space-y-1"> {broker.pros.map((pro, i) => ( <li key={i} className="flex items-start gap-2 text-sm"> <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" /> <span>{pro}</span> </li> ))} </ul> </div> <div> <h5 className="font-medium text-red-600 mb-2">Cons</h5> <ul className="space-y-1"> {broker.cons.map((con, i) => ( <li key={i} className="flex items-start gap-2 text-sm"> <XCircle className="h-4 w-4 text-red-500 mt-0.5 flex-shrink-0" /> <span>{con}</span> </li> ))} </ul> </div> </div> </div> <div> <h4 className="font-semibold mb-3">Features</h4> <ul className="space-y-2"> {broker.features.map((feature, i) => ( <li key={i} className="flex items-start gap-2 text-sm"> <div className="w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0" /> <span>{feature}</span> </li> ))} </ul> <div className="mt-4"> <h4 className="font-semibold mb-3">Trading Platforms</h4> <div className="flex flex-wrap gap-2"> {broker.platforms.map((platform, i) => ( <Badge key={i} variant="outline">{platform}</Badge> ))} </div> </div> <div className="mt-4"> <h4 className="font-semibold mb-3">Regulation</h4> <div className="flex flex-wrap gap-2"> {broker.regulation.map((reg, i) => ( <Badge key={i} variant="secondary">{reg}</Badge> ))} </div> </div> </div> </div> <div className="mt-6 text-center"> <Button variant="outline" asChild > <a href={broker.websiteUrl} target="_blank" rel="noopener noreferrer"> Visit {broker.name} <ExternalLink className="ml-2 h-4 w-4" /> </a> </Button> </div> </div> )} {/* Toggle Button */} <div className="p-4 bg-card border-t"> <button onClick={() => toggleBrokerExpansion(broker.id)} className="flex items-center gap-2 text-primary hover:underline mx-auto" > {expandedBroker === broker.id ? ( <> <ChevronUp className="h-4 w-4" /> Show Less </> ) : ( <> <ChevronDown className="h-4 w-4" /> Read more on {broker.name} » </> )} </button> </div> </CardContent> </Card> ))} </div> </motion.div> {/* Comparison Table */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.3 }} className="mb-12" > <h2 className="text-3xl font-bold mb-8 text-center">Best Stock Brokers Comparison</h2> <Card> <CardContent className="p-0 overflow-x-auto"> <table className="w-full"> <thead className="bg-muted"> <tr> <th className="p-4 text-left">Broker</th> <th className="p-4 text-left">Regulators</th> <th className="p-4 text-left">Year Established</th> <th className="p-4 text-left">Execution Type</th> <th className="p-4 text-left">Minimum Deposit</th> <th className="p-4 text-left">Avg EUR/USD</th> <th className="p-4 text-left">Trading Platforms</th> <th className="p-4 text-left">Islamic Account</th> <th className="p-4 text-left">Action</th> </tr> </thead> <tbody> {filteredBrokers.slice(0, 5).map((broker, index) => ( <tr key={broker.id} className="border-t"> <td className="p-4"> <div className="font-semibold">{broker.name}</div> <div className="text-sm text-muted-foreground">{broker.rating}/{broker.maxRating}</div> </td> <td className="p-4"> <div className="text-sm">{broker.regulation.join(', ')}</div> </td> <td className="p-4"> <div className="text-sm">201{index + 1}</div> </td> <td className="p-4"> <div className="text-sm">ECN/STP</div> </td> <td className="p-4"> <div className="text-sm">{broker.minDeposit}</div> </td> <td className="p-4"> <div className="text-sm">{(0.1 + index * 0.2).toFixed(1)} pips</div> </td> <td className="p-4"> <div className="text-sm">{broker.platforms.slice(0, 2).join(', ')}</div> </td> <td className="p-4"> <div className="text-sm">{index % 2 === 0 ? 'Available' : 'N/A'}</div> </td> <td className="p-4"> <Button size="sm">Get Started</Button> </td> </tr> ))} </tbody> </table> </CardContent> </Card> </motion.div> {/* Features Section */} {stockTradingTypeData.features && ( <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.4 }} className="mb-12" > <h2 className="text-3xl font-bold mb-8 text-center">Key Features</h2> <div className="grid md:grid-cols-3 gap-6"> {stockTradingTypeData.features.map((feature, index) => ( <Card key={index}> <CardHeader> <CardTitle className="flex items-center gap-2"> <BarChart3 className="h-5 w-5 text-primary" /> {feature.title} </CardTitle> </CardHeader> <CardContent> <p className="text-muted-foreground mb-4">{feature.description}</p> <ul className="space-y-2"> {feature.points.map((point, pointIndex) => ( <li key={pointIndex} className="flex items-start gap-2 text-sm"> <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" /> <span>{point}</span> </li> ))} </ul> </CardContent> </Card> ))} </div> </motion.div> )} {/* Getting Started Section */} {stockTradingTypeData.gettingStarted && ( <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.5 }} className="mb-12" > <h2 className="text-3xl font-bold mb-8 text-center">{stockTradingTypeData.gettingStarted.title}</h2> <div className="space-y-4"> {stockTradingTypeData.gettingStarted.steps.map((step, index) => ( <Card key={index}> <CardContent className="p-6"> <div className="flex items-start gap-4"> <div className="flex-shrink-0 w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center font-semibold"> {index + 1} </div> <div className="flex-1"> <h3 className="text-xl font-semibold mb-2">{step.title}</h3> <p className="text-muted-foreground mb-3">{step.description}</p> <ul className="space-y-1"> {step.details.map((detail, detailIndex) => ( <li key={detailIndex} className="flex items-start gap-2 text-sm"> <div className="w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0" /> <span>{detail}</span> </li> ))} </ul> </div> </div> </CardContent> </Card> ))} </div> </motion.div> )} {/* FAQ Section */} {stockTradingTypeData.faqs && ( <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.6 }} className="mb-12" > <h2 className="text-3xl font-bold mb-8 text-center">FAQs</h2> <div className="space-y-4"> {stockTradingTypeData.faqs.map((faq, index) => ( <Card key={index}> <CardContent className="p-0"> <button onClick={() => toggleFaqExpansion(index.toString())} className="w-full p-6 text-left flex items-center justify-between hover:bg-muted/50 transition-colors" > <h3 className="text-lg font-semibold">{faq.question}</h3> {expandedFaq === index.toString() ? ( <ChevronUp className="h-5 w-5" /> ) : ( <ChevronDown className="h-5 w-5" /> )} </button> {expandedFaq === index.toString() && ( <div className="px-6 pb-6"> <p className="text-muted-foreground">{faq.answer}</p> </div> )} </CardContent> </Card> ))} </div> </motion.div> )} {/* Related Categories */} {stockTradingTypeData.relatedCategories && ( <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.7 }} className="mb-12" > <h2 className="text-3xl font-bold mb-8 text-center">You might also be interested in</h2> <div className="flex flex-wrap gap-3 justify-center"> {stockTradingTypeData.relatedCategories.map((category, index) => ( <Button key={index} variant="outline"> {category} </Button> ))} </div> </motion.div> )} {/* Conclusion */} {stockTradingTypeData.conclusion && ( <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.8 }} className="mb-12" > <Card> <CardHeader> <CardTitle className="text-2xl">{stockTradingTypeData.conclusion.title}</CardTitle> </CardHeader> <CardContent> <div className="space-y-4"> {stockTradingTypeData.conclusion.content.map((paragraph, index) => ( <p key={index} className="text-muted-foreground leading-relaxed"> {paragraph} </p> ))} </div> </CardContent> </Card> </motion.div> )} </div> </> ) } export default StockTradingBrokersPage