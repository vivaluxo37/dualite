import { useEffect, useState } from 'react' import { useParams, useNavigate } from 'react-router-dom' import { SEO } from '@/components/SEO' import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card' import { Badge } from '@/components/ui/badge' import { Button } from '@/components/ui/button' import { Link } from 'react-router-dom' import { ExternalLink, Star, CheckCircle, AlertTriangle, Loader2, Brain, RefreshCw, Minus, Plus, Globe, Shield, TrendingUp, Target } from 'lucide-react' import { motion } from 'framer-motion' import { BlogAIAgentIntegration } from '@/lib/blog-ai-agent-integration' import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table' import { regionalDataMap } from '@/data/forex-brokers/regional' import { RegionalData } from '@/data/forex-brokers/regional/types' interface RegionBroker { id: string name: string logo: string rating: number maxRating: number minDeposit: string spread: string leverage: string regulations: string[] platforms: string[] features: string[] websiteUrl: string description?: string pros: string[] cons: string[] established_year?: number | null execution_model?: string spreads_avg_eur_usd?: string spreads_avg_gbp_usd?: string spreads_avg_gold?: string swap_free?: boolean | null negative_balance_protection?: boolean | null } export default function RegionPage() { const { region } = useParams<{ region: string }>() const navigate = useNavigate() const [siteUrl, setSiteUrl] = useState('') const [currentUrl, setCurrentUrl] = useState('') const [isGeneratingContent, setIsGeneratingContent] = useState(false) const [regionalData, setRegionalData] = useState<RegionalData | null>(null) const [displayBrokers, setDisplayBrokers] = useState<RegionBroker[]>([]) // Initialize SEO workflow integration const [blogAI] = useState(() => new BlogAIAgentIntegration()) useEffect(() => { setSiteUrl(window.location.origin) setCurrentUrl(window.location.href) if (region) { const data = regionalDataMap[region.toLowerCase()] if (data) { setRegionalData(data) // Process broker data for display const processedBrokers = data.brokers.map(broker => ({ ...broker, description: `Top-rated forex broker serving ${data.name} traders with ${broker.minDeposit} minimum deposit and ${broker.spread} spreads.`, pros: [ 'Competitive trading conditions', `${data.name} payment method support`, 'Strong regulatory oversight', 'Excellent customer support', 'Advanced trading platforms' ], cons: [ 'Market volatility risks', 'Leverage restrictions may apply', 'Regional regulatory requirements' ], established_year: 2010, execution_model: 'Market Execution', spreads_avg_eur_usd: '0.8 pips', spreads_avg_gbp_usd: '1.2 pips', spreads_avg_gold: '0.5 pips', swap_free: true, negative_balance_protection: true })) setDisplayBrokers(processedBrokers) } else { // Region not found, redirect to brokers page navigate('/forex-brokers') } } }, [region, navigate]) if (!regionalData) { return ( <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center"> <div className="text-center"> <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4" /> <p className="text-gray-600">Loading regional data...</p> </div> </div> ) } const handleGenerateSEO = async () => { setIsGeneratingContent(true) try { const result = await blogAI.executeSEOWorkflow({ targetUrl: currentUrl, siteUrl, contentFocus: 'forex-brokers-regional', region: region }) if (result.success) { console.log('SEO workflow completed:', result) } else { console.error('SEO workflow failed:', result.error) } } catch (error) { console.error('Error executing SEO workflow:', error) } finally { setIsGeneratingContent(false) } } const handleContentRefresh = async () => { setIsGeneratingContent(true) try { const result = await blogAI.executeSEOWorkflow({ targetUrl: currentUrl, siteUrl, contentFocus: 'forex-brokers-regional', region: region, forceRefresh: true }) if (result.success) { console.log('Content refresh completed:', result) } else { console.error('Content refresh failed:', result.error) } } catch (error) { console.error('Error refreshing content:', error) } finally { setIsGeneratingContent(false) } } const handleStructuredDataGeneration = async () => { setIsGeneratingContent(true) try { const result = await blogAI.generateStructuredData({ contentType: 'forex-brokers-regional', data: { brokers: displayBrokers, region: region, url: currentUrl } }) if (result.success) { console.log('Structured data generated:', result) } else { console.error('Structured data generation failed:', result.error) } } catch (error) { console.error('Error generating structured data:', error) } finally { setIsGeneratingContent(false) } } const handleQualityCheck = async () => { setIsGeneratingContent(true) try { const result = await blogAI.performQualityCheck({ content: { title: regionalData.title, description: regionalData.description, introduction: regionalData.introduction, keyPoints: regionalData.keyPoints || [], faqs: regionalData.faqs }, type: 'forex-brokers-regional' }) if (result.success) { console.log('Quality check completed:', result) } else { console.error('Quality check failed:', result.error) } } catch (error) { console.error('Error performing quality check:', error) } finally { setIsGeneratingContent(false) } } // Determine theme colors based on region const getThemeColors = () => { const regionLower = region?.toLowerCase() || '' switch (regionLower) { case 'singapore': return { primary: 'from-red-500 to-red-600', secondary: 'from-blue-500 to-indigo-600', accent: 'from-yellow-500 to-orange-600', bg: 'from-red-50 via-blue-50 to-indigo-50' } case 'south-africa': case 'southafrica': return { primary: 'from-green-600 to-emerald-600', secondary: 'from-blue-600 to-indigo-600', accent: 'from-yellow-500 to-orange-600', bg: 'from-green-50 via-blue-50 to-indigo-50' } case 'pakistan': return { primary: 'from-green-600 to-emerald-600', secondary: 'from-white to-gray-100', accent: 'from-red-500 to-red-600', bg: 'from-green-50 via-white to-gray-50' } case 'india': return { primary: 'from-orange-500 to-saffron-600', secondary: 'from-green-600 to-emerald-600', accent: 'from-blue-600 to-indigo-600', bg: 'from-saffron-50 via-orange-50 to-amber-50' } case 'nepal': return { primary: 'from-red-600 to-red-700', secondary: 'from-blue-600 to-indigo-600', accent: 'from-yellow-500 to-orange-600', bg: 'from-red-50 via-blue-50 to-indigo-50' } default: return { primary: 'from-blue-600 to-indigo-600', secondary: 'from-purple-600 to-pink-600', accent: 'from-yellow-500 to-orange-600', bg: 'from-blue-50 via-purple-50 to-pink-50' } } } const theme = getThemeColors() return ( <div className={`min-h-screen bg-gradient-to-br ${theme.bg} }> <SEO title={regionalData.seo.title} description={regionalData.seo.description} keywords={regionalData.seo.keywords} canonical={regionalData.seo.canonical} ogImage={`${siteUrl}/og-image.svg`} structuredData={{ "@context": "https://schema.org", "@type": "FinancialService", "name": regionalData.title, "description": regionalData.description, "url": currentUrl, "image": `${siteUrl}/og-image.svg`, "provider": { "@type": "Organization", "name": "BrokerAnalysis", "url": siteUrl }, "serviceArea": { "@type": "Country", "name": regionalData.country }, "serviceType": "Forex Trading", "areaServed": regionalData.country.toUpperCase() }} hreflang={{ 'en': currentUrl }} /> <div className="container mx-auto px-4 py-8"> {/* Header Section */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="text-center mb-12" > <div className="flex items-center justify-center gap-4 mb-6"> <div className={`w-16 h-16 bg-gradient-to-br ${theme.primary} rounded-full flex items-center justify-center`}> <TrendingUp className="w-8 h-8 text-white" /> </div> <div className={`w-16 h-16 bg-gradient-to-br ${theme.secondary} rounded-full flex items-center justify-center`}> <Globe className="w-8 h-8 text-white" /> </div> <div className={`w-16 h-16 bg-gradient-to-br ${theme.accent} rounded-full flex items-center justify-center`}> <Shield className="w-8 h-8 text-white" /> </div> </div> <h1 className={`text-4xl md:text-5xl font-bold bg-gradient-to-r ${theme.primary} ${theme.secondary} ${theme.accent} bg-clip-text text-transparent mb-6`}> {regionalData.title} </h1> <p className="text-xl text-gray-700 max-w-4xl mx-auto mb-4"> {regionalData.subtitle} </p> <div className="flex items-center justify-center gap-4 mb-8"> <Badge variant="secondary" className="bg-blue-100 text-blue-800"> <Shield className="w-4 h-4 mr-2" /> Regulated Brokers </Badge> <Badge variant="secondary" className="bg-green-100 text-green-800"> <CheckCircle className="w-4 h-4 mr-2" /> Local Support </Badge> <Badge variant="secondary" className="bg-purple-100 text-purple-800"> <Target className="w-4 h-4 mr-2" /> Competitive Rates </Badge> </div> </motion.div> {/* SEO Controls */} <Card className="mb-8 border-gray-200"> <CardHeader> <CardTitle className="flex items-center gap-2"> <Brain className="w-5 h-5 text-blue-600" /> SEO & Content Controls </CardTitle> </CardHeader> <CardContent> <div className="flex flex-wrap gap-4"> <Button onClick={handleGenerateSEO} disabled={isGeneratingContent} className="bg-blue-600 hover:bg-blue-700" > {isGeneratingContent ? ( <Loader2 className="w-4 h-4 mr-2 animate-spin" /> ) : ( <Brain className="w-4 h-4 mr-2" /> )} Generate SEO </Button> <Button onClick={handleContentRefresh} disabled={isGeneratingContent} variant="outline" className="border-gray-200 text-gray-700 hover:bg-gray-50" > {isGeneratingContent ? ( <Loader2 className="w-4 h-4 mr-2 animate-spin" /> ) : ( <RefreshCw className="w-4 h-4 mr-2" /> )} Refresh Content </Button> <Button onClick={handleStructuredDataGeneration} disabled={isGeneratingContent} variant="outline" className="border-green-200 text-green-700 hover:bg-green-50" > {isGeneratingContent ? ( <Loader2 className="w-4 h-4 mr-2 animate-spin" /> ) : ( <Target className="w-4 h-4 mr-2" /> )} Generate Schema </Button> <Button onClick={handleQualityCheck} disabled={isGeneratingContent} variant="outline" className="border-orange-200 text-orange-700 hover:bg-orange-50" > {isGeneratingContent ? ( <Loader2 className="w-4 h-4 mr-2 animate-spin" /> ) : ( <CheckCircle className="w-4 h-4 mr-2" /> )} Quality Check </Button> </div> </CardContent> </Card> {/* Introduction */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 }} className="mb-12" > <Card className="bg-white/80 backdrop-blur-sm"> <CardContent className="p-8"> <div className="prose prose-lg max-w-none"> <p className="text-lg leading-relaxed text-gray-700"> {regionalData.introduction} </p> </div> </CardContent> </Card> </motion.div> {/* Key Points */} {regionalData.keyPoints && ( <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.2 }} className="mb-12" > <Card className="bg-white/80 backdrop-blur-sm"> <CardHeader> <CardTitle className="text-2xl font-semibold text-gray-900"> Key Highlights for {regionalData.name} Traders </CardTitle> </CardHeader> <CardContent> <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6"> {regionalData.keyPoints.map((point, index) => ( <div key={index} className="flex items-start gap-3"> <CheckCircle className="w-5 h-5 text-green-600 mt-1 flex-shrink-0" /> <p className="text-gray-700">{point}</p> </div> ))} </div> </CardContent> </Card> </motion.div> )} {/* Brokers Comparison Table */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.3 }} className="mb-12" > <Card className="bg-white/80 backdrop-blur-sm"> <CardHeader> <CardTitle className="text-2xl font-semibold text-gray-900"> Top Forex Brokers for {regionalData.name} Traders </CardTitle> </CardHeader> <CardContent> <div className="overflow-x-auto"> <Table> <TableHeader> <TableRow className="border-gray-200"> <TableHead>Broker</TableHead> <TableHead>Rating</TableHead> <TableHead>Min Deposit</TableHead> <TableHead>Spread</TableHead> <TableHead>Leverage</TableHead> <TableHead>Regulation</TableHead> <TableHead>Platforms</TableHead> <TableHead>Features</TableHead> <TableHead>Action</TableHead> </TableRow> </TableHeader> <TableBody> {displayBrokers.map((broker, index) => ( <TableRow key={broker.id} className="hover:bg-gray-50"> <TableCell> <div className="flex items-center gap-3"> <div className={`w-10 h-10 bg-gradient-to-br ${theme.primary} rounded-lg flex items-center justify-center text-white font-bold`}> {broker.logo} </div> <div> <div className="font-semibold text-gray-900">{broker.name}</div> <div className="text-sm text-gray-600"> {broker.platforms.join(', ')} </div> </div> </div> </TableCell> <TableCell> <div className="flex items-center gap-1"> <Star className="w-4 h-4 text-yellow-500 fill-current" /> <span className="font-medium">{broker.rating}</span> <span className="text-gray-500">/5</span> </div> </TableCell> <TableCell className="font-mono">{broker.minDeposit}</TableCell> <TableCell className="font-mono">{broker.spread}</TableCell> <TableCell className="font-mono">{broker.leverage}</TableCell> <TableCell> <div className="flex flex-wrap gap-1"> {broker.regulations.map((reg, idx) => ( <Badge key={idx} variant="outline" className="text-xs"> {reg} </Badge> ))} </div> </TableCell> <TableCell> <div className="flex flex-wrap gap-1"> {broker.platforms.map((platform, idx) => ( <Badge key={idx} variant="secondary" className="text-xs"> {platform} </Badge> ))} </div> </TableCell> <TableCell> <div className="flex flex-wrap gap-1"> {broker.features.slice(0, 3).map((feature, idx) => ( <Badge key={idx} variant="outline" className="text-xs"> {feature} </Badge> ))} {broker.features.length > 3 && ( <Badge variant="outline" className="text-xs"> +{broker.features.length - 3} more </Badge> )} </div> </TableCell> <TableCell> <div className="flex gap-2"> <Button asChild size="sm" variant="outline"> <Link to={`/forex-brokers/${broker.name.toLowerCase().replace(/\s+/g, '-')}`}> Review </Link> </Button> <Button asChild size="sm" variant="outline"> <a href={broker.websiteUrl} target="_blank" rel="noopener noreferrer"> <ExternalLink className="w-3 h-3" /> </a> </Button> </div> </TableCell> </TableRow> ))} </TableBody> </Table> </div> </CardContent> </Card> </motion.div> {/* Detailed Broker Cards */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.4 }} className="mb-12" > <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6"> {displayBrokers.map((broker, index) => ( <Card key={broker.id} className="bg-white/80 backdrop-blur-sm hover:shadow-lg transition-shadow"> <CardHeader> <div className="flex items-center justify-between"> <div className="flex items-center gap-3"> <div className={`w-12 h-12 bg-gradient-to-br ${theme.primary} rounded-lg flex items-center justify-center text-white font-bold`}> {broker.logo} </div> <div> <CardTitle className="text-lg">{broker.name}</CardTitle> <div className="flex items-center gap-1"> <Star className="w-4 h-4 text-yellow-500 fill-current" /> <span className="font-medium">{broker.rating}</span> <span className="text-gray-500">/5</span> </div> </div> </div> </div> </CardHeader> <CardContent> <div className="space-y-4"> <div className="grid grid-cols-2 gap-4 text-sm"> <div> <span className="text-gray-600">Min Deposit:</span> <div className="font-medium">{broker.minDeposit}</div> </div> <div> <span className="text-gray-600">Spread:</span> <div className="font-medium">{broker.spread}</div> </div> <div> <span className="text-gray-600">Leverage:</span> <div className="font-medium">{broker.leverage}</div> </div> <div> <span className="text-gray-600">Established:</span> <div className="font-medium">{broker.established_year}</div> </div> </div> <div> <h4 className="font-medium text-gray-900 mb-2">Features</h4> <div className="flex flex-wrap gap-1"> {broker.features.map((feature, idx) => ( <Badge key={idx} variant="secondary" className="text-xs"> {feature} </Badge> ))} </div> </div> <div className="flex gap-2"> <Button asChild className="flex-1"> <Link to={`/forex-brokers/${broker.name.toLowerCase().replace(/\s+/g, '-')}`}> Read Review </Link> </Button> <Button asChild variant="outline" size="icon"> <a href={broker.websiteUrl} target="_blank" rel="noopener noreferrer"> <ExternalLink className="w-4 h-4" /> </a> </Button> </div> </div> </CardContent> </Card> ))} </div> </motion.div> {/* Regulations */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.5 }} className="mb-12" > <Card className="bg-white/80 backdrop-blur-sm"> <CardHeader> <CardTitle className="text-2xl font-semibold text-gray-900"> Trading Regulations in {regionalData.name} </CardTitle> </CardHeader> <CardContent> <div className="grid md:grid-cols-3 gap-6"> {regionalData.regulations.map((reg, index) => ( <Card key={index} className="border-gray-200"> <CardHeader> <CardTitle className="text-lg text-gray-700"> {reg.title} </CardTitle> </CardHeader> <CardContent> <p className="text-gray-700 mb-4"> {reg.description} </p> <ul className="space-y-2"> {reg.points.map((point, idx) => ( <li key={idx} className="flex items-start gap-2"> <CheckCircle className="w-4 h-4 text-green-600 mt-0.5 flex-shrink-0" /> <span className="text-gray-700 text-sm">{point}</span> </li> ))} </ul> </CardContent> </Card> ))} </div> </CardContent> </Card> </motion.div> {/* FAQ Section */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.6 }} className="mb-12" > <Card className="bg-white/80 backdrop-blur-sm"> <CardHeader> <CardTitle className="text-2xl font-semibold text-gray-900"> Frequently Asked Questions </CardTitle> </CardHeader> <CardContent> <div className="space-y-6"> {regionalData.faqs.map((faq, index) => ( <div key={index} className="border-l-4 border-blue-500 pl-6"> <h3 className="text-lg font-semibold text-gray-900 mb-2"> {faq.question} </h3> <p className="text-gray-700"> {faq.answer} </p> </div> ))} </div> </CardContent> </Card> </motion.div> {/* Conclusion */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.7 }} > <Card className={`bg-gradient-to-br ${theme.bg} }> <CardHeader> <CardTitle className="text-2xl font-semibold text-gray-900"> {regionalData.conclusion.title} </CardTitle> </CardHeader> <CardContent> <div className="space-y-4"> {regionalData.conclusion.content.map((paragraph, index) => ( <p key={index} className="text-gray-700 leading-relaxed"> {paragraph} </p> ))} </div> </CardContent> </Card> </motion.div> </div> </div> ) }