import { useState, useMemo } from 'react' import { useParams, Link } from 'react-router-dom' import { useQuery } from '@tanstack/react-query' import { motion } from 'framer-motion' import { supabase } from '../lib/supabase' import { Broker } from '../types' import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card' import { Button } from '../components/ui/button' import { Badge } from '../components/ui/badge' import { Input } from '../components/ui/input' import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select' import { Progress } from '../components/ui/progress' import { Star, Shield, Search, Filter, MapPin, Globe, ExternalLink, ArrowLeft } from 'lucide-react' import { Alert, AlertDescription } from '../components/ui/alert' const countryNames: Record<string, string> = { 'usa': 'United States', 'uk': 'United Kingdom', 'australia': 'Australia', 'canada': 'Canada', 'germany': 'Germany', 'france': 'France', 'japan': 'Japan', 'singapore': 'Singapore', 'switzerland': 'Switzerland', 'cyprus': 'Cyprus' } const countryFlags: Record<string, string> = { 'usa': '🇺🇸', 'uk': '🇬🇧', 'australia': '🇦🇺', 'canada': '🇨🇦', 'germany': '🇩🇪', 'france': '🇫🇷', 'japan': '🇯🇵', 'singapore': '🇸🇬', 'switzerland': '🇨🇭', 'cyprus': '🇨🇾' } export function CountryBrokerPage() { const { country } = useParams<{ country: string }>() const [search, setSearch] = useState('') const [sortBy, setSortBy] = useState('trust_score') const [minDeposit, setMinDeposit] = useState('') const [regulation, setRegulation] = useState('') const { data: brokers = [], isLoading, error } = useQuery({ queryKey: ['brokers', country], queryFn: async () => { const { data, error } = await supabase .from('brokers') .select('*') .eq('is_active', true) .ilike('country', `%${country}%`) .order('trust_score', { ascending: false }) if (error) throw error return data as Broker[] }, staleTime: 5 * 60 * 1000, gcTime: 10 * 60 * 1000, }) const filteredAndSortedBrokers = useMemo(() => { const filtered = brokers?.filter(broker => { const matchesSearch = broker.name.toLowerCase().includes(search.toLowerCase()) || broker.description?.toLowerCase().includes(search.toLowerCase()) const matchesMinDeposit = !minDeposit || (broker.min_deposit || 0) <= parseInt(minDeposit) const matchesRegulation = !regulation || broker.regulations?.some(reg => reg.toLowerCase().includes(regulation.toLowerCase()) ) return matchesSearch && matchesMinDeposit && matchesRegulation }) // Sort brokers filtered.sort((a, b) => { switch (sortBy) { case 'trust_score': return (b.trust_score || 0) - (a.trust_score || 0) case 'rating': return (b.avg_rating || 0) - (a.avg_rating || 0) case 'min_deposit': return (a.min_deposit || 0) - (b.min_deposit || 0) case 'spreads': return (a.spreads_avg || 0) - (b.spreads_avg || 0) case 'name': return a.name.localeCompare(b.name) default: return 0 } }) return filtered }, [brokers, search, sortBy, minDeposit, regulation]) const countryDisplayName = country ? countryNames[country.toLowerCase()] || country : 'Unknown' const countryFlag = country ? countryFlags[country.toLowerCase()] || '🌍' : '🌍' if (error) { return ( <div className="container mx-auto px-4 py-8"> <Alert variant="destructive"> <AlertDescription> Failed to load brokers. Please try again later. </AlertDescription> </Alert> </div> ) } return ( <div className="container mx-auto px-4 py-8"> {/* Header */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="mb-8" > <div className="flex items-center gap-4 mb-4"> <Button variant="ghost" size="sm" asChild> <Link to="/brokers" className="flex items-center gap-2"> <ArrowLeft className="h-4 w-4" /> All Brokers </Link> </Button> </div> <div className="flex items-center gap-3 mb-4"> <span className="text-4xl">{countryFlag}</span> <div> <h1 className="text-3xl md:text-4xl font-bold tracking-tighter"> {countryDisplayName} Forex Brokers </h1> <p className="text-muted-foreground text-lg"> Discover the best forex brokers regulated and operating in {countryDisplayName} </p> </div> </div> {/* Stats */} <div className="grid grid-cols-2 md:grid-cols-4 gap-4"> <Card> <CardContent className="p-4 text-center"> <div className="text-2xl font-bold text-primary">{brokers.length}</div> <div className="text-sm text-muted-foreground">Total Brokers</div> </CardContent> </Card> <Card> <CardContent className="p-4 text-center"> <div className="text-2xl font-bold text-primary"> {brokers.filter(b => (b.trust_score || 0) >= 80).length} </div> <div className="text-sm text-muted-foreground">High Trust Score</div> </CardContent> </Card> <Card> <CardContent className="p-4 text-center"> <div className="text-2xl font-bold text-primary"> {brokers.filter(b => (b.avg_rating || 0) >= 4).length} </div> <div className="text-sm text-muted-foreground">Top Rated</div> </CardContent> </Card> <Card> <CardContent className="p-4 text-center"> <div className="text-2xl font-bold text-primary"> {Math.min(...brokers.map(b => b.min_deposit || 0)) || 0} </div> <div className="text-sm text-muted-foreground">Min Deposit ($)</div> </CardContent> </Card> </div> </motion.div> {/* Filters */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 }} className="mb-8" > <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Filter className="h-5 w-5" /> Filter & Search </CardTitle> </CardHeader> <CardContent> <div className="grid md:grid-cols-2 lg:grid-cols-5 gap-4"> <div className="relative"> <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" /> <Input placeholder="Search brokers..." value={search} onChange={(e) => setSearch(e.target.value)} className="pl-10" /> </div> <Select value={sortBy} onValueChange={setSortBy}> <SelectTrigger> <SelectValue placeholder="Sort by" /> </SelectTrigger> <SelectContent> <SelectItem value="trust_score">Trust Score</SelectItem> <SelectItem value="rating">Rating</SelectItem> <SelectItem value="min_deposit">Min Deposit</SelectItem> <SelectItem value="spreads">Spreads</SelectItem> <SelectItem value="name">Name</SelectItem> </SelectContent> </Select> <Input type="number" placeholder="Max min deposit" value={minDeposit} onChange={(e) => setMinDeposit(e.target.value)} /> <Input placeholder="Regulation (e.g., FCA)" value={regulation} onChange={(e) => setRegulation(e.target.value)} /> <div className="flex items-center gap-2"> <span className="text-sm text-muted-foreground"> {filteredAndSortedBrokers.length} of {brokers.length} brokers </span> </div> </div> </CardContent> </Card> </motion.div> {/* Brokers List */} {isLoading ? ( <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6"> {[...Array(6)].map((_, i) => ( <Card key={i} className="animate-pulse"> <CardContent className="p-6"> <div className="h-6 bg-muted rounded mb-4" /> <div className="h-4 bg-muted rounded mb-2" /> <div className="h-4 bg-muted rounded w-2/3" /> </CardContent> </Card> ))} </div> ) : filteredAndSortedBrokers.length === 0 ? ( <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="text-center py-12" > <MapPin className="h-12 w-12 text-muted-foreground mx-auto mb-4" /> <h3 className="text-xl font-semibold mb-2">No brokers found</h3> <p className="text-muted-foreground mb-4"> {search || minDeposit || regulation ? 'Try adjusting your filters to see more results.' : `No brokers are currently available for ${countryDisplayName}.`} </p> <Button variant="outline" onClick={() => { setSearch('') setMinDeposit('') setRegulation('') }}> Clear Filters </Button> </motion.div> ) : ( <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.2 }} className="grid md:grid-cols-2 lg:grid-cols-3 gap-6" > {filteredAndSortedBrokers.map((broker, index) => ( <motion.div key={broker.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: index * 0.1 }} > <Card className="h-full hover:shadow-lg transition-shadow"> <CardHeader> <div className="flex items-start justify-between"> <div> <CardTitle className="text-lg">{broker.name}</CardTitle> <div className="flex items-center gap-2 mt-1"> <Badge variant="secondary" className="text-xs"> <MapPin className="h-3 w-3 mr-1" /> {broker.country} </Badge> {broker.founded_year && ( <Badge variant="outline" className="text-xs"> Est. {broker.founded_year} </Badge> )} </div> </div> <div className="text-right"> <div className="flex items-center gap-1"> <Shield className="h-4 w-4 text-primary" /> <span className="font-semibold">{broker.trust_score || 0}</span> </div> <div className="text-xs text-muted-foreground">Trust Score</div> </div> </div> </CardHeader> <CardContent className="space-y-4"> {/* Rating */} <div className="flex items-center justify-between"> <div className="flex items-center gap-2"> <div className="flex items-center"> {[...Array(5)].map((_, i) => ( <Star key={i} className={`h-4 w-4 ${ i < Math.floor(broker.avg_rating || 0) ? 'text-yellow-400 fill-current' : 'text-muted-foreground' }`} /> ))} </div> <span className="text-sm font-medium"> {broker.avg_rating?.toFixed(1) || '0.0'} </span> </div> <span className="text-xs text-muted-foreground"> {broker.review_count || 0} reviews </span> </div> {/* Key Info */} <div className="grid grid-cols-2 gap-4 text-sm"> <div> <div className="text-muted-foreground">Min Deposit</div> <div className="font-semibold">${broker.min_deposit || 0}</div> </div> <div> <div className="text-muted-foreground">Avg Spreads</div> <div className="font-semibold">{broker.spreads_avg || 0} pips</div> </div> </div> {/* Regulations */} {broker.regulations && broker.regulations.length > 0 && ( <div> <div className="text-xs text-muted-foreground mb-1">Regulated by</div> <div className="flex flex-wrap gap-1"> {broker.regulations.slice(0, 3).map((reg, i) => ( <Badge key={i} variant="outline" className="text-xs"> {reg} </Badge> ))} {broker.regulations.length > 3 && ( <Badge variant="outline" className="text-xs"> +{broker.regulations.length - 3} more </Badge> )} </div> </div> )} {/* Trust Score Progress */} <div> <div className="flex justify-between text-xs mb-1"> <span className="text-muted-foreground">Trust Score</span> <span className="font-medium">{broker.trust_score || 0}/100</span> </div> <Progress value={broker.trust_score || 0} className="h-2" /> </div> {/* Actions */} <div className="flex gap-2 pt-2"> <Button asChild className="flex-1"> <Link to={`/brokers/${broker.id}`}> View Details </Link> </Button> {broker.affiliate_url && ( <Button variant="outline" size="sm" asChild> <a href={broker.affiliate_url} target="_blank" rel="noopener noreferrer" className="flex items-center gap-1" > <ExternalLink className="h-3 w-3" /> Visit </a> </Button> )} </div> </CardContent> </Card> </motion.div> ))} </motion.div> )} {/* Additional Info */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.4 }} className="mt-12" > <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Globe className="h-5 w-5" /> About {countryDisplayName} Forex Market </CardTitle> </CardHeader> <CardContent> <p className="text-muted-foreground leading-relaxed"> {countryDisplayName} has a well-established forex market with strong regulatory oversight. The brokers listed above are regulated and authorized to operate in {countryDisplayName}, providing traders with secure and reliable trading environments. Always verify a broker's regulatory status before opening an account. </p> <div className="flex gap-4 mt-4"> <Button variant="outline" asChild> <Link to="/compare">Compare Brokers</Link> </Button> <Button variant="outline" asChild> <Link to="/ai-match">Find My Broker</Link> </Button> </div> </CardContent> </Card> </motion.div> </div> ) } 