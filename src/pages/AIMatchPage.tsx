import { useState } from 'react' import { useQuery } from '@tanstack/react-query' import { motion } from 'framer-motion' import { Bot, ArrowRight, CheckCircle, Loader2, Star, Lock, LogIn } from 'lucide-react' import { supabase } from '../lib/supabase' import { Broker } from '../types' import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '../components/ui/card' import { Button } from '../components/ui/button' import { Label } from '../components/ui/label' import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select' import { RadioGroup, RadioGroupItem } from '../components/ui/radio-group' import { Checkbox } from '../components/ui/checkbox' import { Badge } from '../components/ui/badge' import { Progress } from '../components/ui/progress' import { ExternalLink, AffiliateLink } from '../components/ui/external-link' import { Link } from 'react-router-dom' import { useClerkAuthContext } from '../contexts/ClerkAuthContext' import { ClerkAuthDialog } from '../components/auth/ClerkAuthDialog' interface QuizData { experience: string tradingStyle: string budget: string instruments: string[] regulation: string features: string[] riskTolerance: string } interface MatchResult { broker: Broker matchScore: number reasons: string[] } const steps = [ { id: 1, title: 'Experience Level', description: 'Tell us about your trading background' }, { id: 2, title: 'Trading Style', description: 'How do you prefer to trade?' }, { id: 3, title: 'Budget & Instruments', description: 'Your investment preferences' }, { id: 4, title: 'Requirements', description: 'What matters most to you?' }, { id: 5, title: 'Results', description: 'Your personalized broker matches' } ] export function AIMatchPage() { const { isSignedIn, isLoaded, userId } = useClerkAuthContext() const [currentStep, setCurrentStep] = useState(1) const [isAnalyzing, setIsAnalyzing] = useState(false) const [showAuthDialog, setShowAuthDialog] = useState(false) const [isSavingResults, setIsSavingResults] = useState(false) const [quizData, setQuizData] = useState<QuizData>({ experience: '', tradingStyle: '', budget: '', instruments: [], regulation: '', features: [], riskTolerance: '' }) const [matches, setMatches] = useState<MatchResult[]>([]) const { data: brokers = [] } = useQuery<Broker[]>({ queryKey: ['brokers-for-matching'], queryFn: async () => { const { data, error } = await supabase .from('brokers') .select('*') .eq('is_active', true) .order('trust_score', { ascending: false }) if (error) throw error return data }, }) const saveResultsToDatabase = async (matches: MatchResult[]) => { if (!userId) return try { setIsSavingResults(true) const userPreferences = { experience_level: quizData.experience, trading_style: quizData.tradingStyle, budget_range: quizData.budget, instruments: quizData.instruments, regulation_preference: quizData.regulation, features: quizData.features, risk_tolerance: quizData.riskTolerance } const recommendedBrokers = matches.map(match => ({ broker_id: match.broker.id, broker_name: match.broker.name, match_percentage: match.matchScore, reasons: match.reasons, rating: match.broker.avg_rating || 0, regulation: match.broker.regulations?.[0] || 'N/A', min_deposit: Number(match.broker.min_deposit) || 0, spreads_avg: Number(match.broker.spreads_avg) || 0, leverage_max: match.broker.leverage_max || 0, trust_score: match.broker.trust_score || 0 })) const { data, error } = await supabase .from('ai_matcher_results') .insert({ user_id: userId, match_score: Math.round(matches[0]?.matchScore || 0), user_preferences: userPreferences, recommended_brokers: recommendedBrokers, session_id: generateSessionId(), user_agent: navigator.userAgent, ip_address: null // We don't collect IP addresses for privacy }) .select() if (error) { console.error('Error saving results:', error) } else { console.log('Results saved successfully:', data) } } catch (error) { console.error('Error saving results to database:', error) } finally { setIsSavingResults(false) } } const generateSessionId = () => { return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}` } const calculateMatches = () => { setIsAnalyzing(true) // Simulate AI analysis delay setTimeout(() => { const scoredBrokers = brokers.map(broker => { let score = 0 const reasons: string[] = [] // Experience level scoring if (quizData.experience === 'beginner') { if (broker.platforms && broker.platforms.includes('Education')) { score += 20 reasons.push('Offers educational resources for beginners') } if (Number(broker.min_deposit) <= 100) { score += 15 reasons.push('Low minimum deposit suitable for beginners') } } else if (quizData.experience === 'intermediate') { if ((broker.trust_score || 0) >= 70) { score += 20 reasons.push('High trust score for reliable trading') } if (Number(broker.spreads_avg) <= 2.0) { score += 15 reasons.push('Competitive spreads for cost-effective trading') } } else if (quizData.experience === 'expert') { if (Number(broker.spreads_avg) <= 1.5) { score += 25 reasons.push('Ultra-tight spreads for professional trading') } if (broker.leverage_max && Number(broker.leverage_max) >= 100) { score += 15 reasons.push('High leverage options available') } } // Trading style scoring if (quizData.tradingStyle === 'scalping' && Number(broker.spreads_avg) <= 1.5) { score += 25 reasons.push('Excellent for scalping with tight spreads') } else if (quizData.tradingStyle === 'day-trading' && Number(broker.spreads_avg) <= 2.0) { score += 20 reasons.push('Good spreads for day trading') } else if (quizData.tradingStyle === 'swing-trading' && broker.platforms && broker.platforms.includes('Education')) { score += 15 reasons.push('Research tools available for swing trading') } // Budget scoring if (quizData.budget === 'under-500' && Number(broker.min_deposit) <= 100) { score += 20 reasons.push('Low minimum deposit fits your budget') } else if (quizData.budget === '500-2000' && Number(broker.min_deposit) <= 500) { score += 15 reasons.push('Reasonable minimum deposit requirement') } else if (quizData.budget === 'over-2000') { score += 10 reasons.push('Suitable for higher investment amounts') } // Regulation preference if (quizData.regulation !== 'no-preference') { const hasPreferredRegulation = broker.regulations && broker.regulations.some(reg => reg.toLowerCase().includes(quizData.regulation.toLowerCase()) ) if (hasPreferredRegulation) { score += 20 reasons.push(`Regulated by your preferred authority (${quizData.regulation.toUpperCase()})`) } } // Features scoring if (quizData.features.includes('mobile-app')) { score += 10 reasons.push('Mobile trading platform available') } if (quizData.features.includes('education') && broker.platforms && broker.platforms.includes('Education')) { score += 15 reasons.push('Comprehensive educational resources') } if (quizData.features.includes('demo-account')) { score += 10 reasons.push('Demo account for risk-free practice') } if (quizData.features.includes('research-tools')) { score += 10 reasons.push('Advanced research and analysis tools') } // Base score from trust score and rating score += ((broker.trust_score || 0) / 100) * 20 score += ((broker.avg_rating || 0) / 5) * 10 return { broker, matchScore: Math.min(100, Math.round(score)), reasons: reasons.slice(0, 4) // Limit to top 4 reasons } }) // Sort by match score and take top 5 const topMatches = scoredBrokers .sort((a, b) => b.matchScore - a.matchScore) .slice(0, 5) setMatches(topMatches) setIsAnalyzing(false) setCurrentStep(5) // Save results to database saveResultsToDatabase(topMatches) }, 2000) } const handleNext = () => { if (currentStep < 4) { setCurrentStep(currentStep + 1) } else { calculateMatches() } } const handleBack = () => { if (currentStep > 1) { setCurrentStep(currentStep - 1) } } const isStepComplete = (step: number) => { switch (step) { case 1: return quizData.experience !== '' case 2: return quizData.tradingStyle !== '' case 3: return quizData.budget !== '' && quizData.instruments.length > 0 case 4: return quizData.regulation !== '' && quizData.riskTolerance !== '' default: return false } } const getTrustScoreColor = (score: number) => { if (score >= 80) return 'bg-green-500' if (score >= 60) return 'bg-yellow-500' return 'bg-red-500' } const getMatchScoreColor = (score: number) => { if (score >= 80) return 'text-green-600' if (score >= 60) return 'text-yellow-600' return 'text-red-600' } // Show loading state while checking authentication if (!isLoaded) { return ( <div className="container mx-auto px-4 py-8"> <div className="flex items-center justify-center min-h-[400px]"> <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div> </div> </div> ) } // Show authentication gate if user is not logged in if (!isSignedIn) { return ( <div className="container mx-auto px-4 py-8"> {/* Header */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="text-center mb-8" > <div className="flex items-center justify-center gap-3 mb-4"> <div className="p-3 bg-primary/10 rounded-lg text-primary"> <Bot className="h-8 w-8" /> </div> <h1 className="text-3xl md:text-4xl font-bold tracking-tighter">AI Broker Matcher</h1> </div> <p className="text-muted-foreground text-lg max-w-2xl mx-auto"> Answer a few questions and let our AI find the perfect forex broker tailored to your trading style and preferences. </p> </motion.div> {/* Authentication Gate */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 }} className="max-w-md mx-auto" > <Card> <CardHeader className="text-center"> <div className="mx-auto mb-4 p-3 bg-primary/10 rounded-full w-fit"> <Lock className="h-8 w-8 text-primary" /> </div> <CardTitle>Sign In Required</CardTitle> <CardDescription> Please sign in to access the AI Broker Matcher and get personalized recommendations. </CardDescription> </CardHeader> <CardContent className="space-y-4"> <Button onClick={() => setShowAuthDialog(true)} className="w-full" size="lg" > <LogIn className="mr-2 h-4 w-4" /> Sign In </Button> <div className="text-center"> <span className="text-sm text-muted-foreground">Quick access with social accounts</span> </div> </CardContent> </Card> </motion.div> {/* Auth Dialog */} <ClerkAuthDialog isOpen={showAuthDialog} onClose={() => setShowAuthDialog(false)} /> </div> ) } return ( <div className="container mx-auto px-4 py-8"> {/* Header */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="text-center mb-8" > <div className="flex items-center justify-center gap-3 mb-4"> <div className="p-3 bg-primary/10 rounded-lg text-primary"> <Bot className="h-8 w-8" /> </div> <h1 className="text-3xl md:text-4xl font-bold tracking-tighter">AI Broker Matcher</h1> </div> <p className="text-muted-foreground text-lg max-w-2xl mx-auto"> Answer a few questions and let our AI find the perfect forex broker tailored to your trading style and preferences. </p> </motion.div> {/* Progress Steps */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 }} className="mb-8" > <div className="flex items-center justify-between max-w-4xl mx-auto"> {steps.map((step, index) => ( <div key={step.id} className="flex items-center"> <div className="flex flex-col items-center"> <div className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium transition-colors ${ currentStep >= step.id ? 'bg-primary text-primary-foreground' : 'bg-muted text-muted-foreground' }`}> {currentStep > step.id ? ( <CheckCircle className="h-5 w-5" /> ) : ( step.id )} </div> <div className="text-center mt-2 hidden md:block"> <div className="text-sm font-medium">{step.title}</div> <div className="text-xs text-muted-foreground">{step.description}</div> </div> </div> {index < steps.length - 1 && ( <div className={`w-16 h-0.5 mx-4 transition-colors ${ currentStep > step.id ? 'bg-primary' : 'bg-muted' }`} /> )} </div> ))} </div> </motion.div> {/* Quiz Content */} <motion.div key={currentStep} initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: -20 }} className="max-w-2xl mx-auto" > <Card> <CardHeader> <CardTitle className="text-center"> {steps[currentStep - 1]?.title} </CardTitle> </CardHeader> <CardContent className="space-y-6"> {/* Step 1: Experience Level */} {currentStep === 1 && ( <div className="space-y-4"> <Label className="text-base font-medium">What's your trading experience level?</Label> <RadioGroup value={quizData.experience} onValueChange={(value) => setQuizData({ ...quizData, experience: value })} className="space-y-3" > <div className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-muted/50"> <RadioGroupItem value="beginner" id="beginner" /> <Label htmlFor="beginner" className="flex-1 cursor-pointer"> <div className="font-medium">Beginner</div> <div className="text-sm text-muted-foreground">New to forex trading, looking to learn</div> </Label> </div> <div className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-muted/50"> <RadioGroupItem value="intermediate" id="intermediate" /> <Label htmlFor="intermediate" className="flex-1 cursor-pointer"> <div className="font-medium">Intermediate</div> <div className="text-sm text-muted-foreground">Some trading experience, familiar with basics</div> </Label> </div> <div className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-muted/50"> <RadioGroupItem value="expert" id="expert" /> <Label htmlFor="expert" className="flex-1 cursor-pointer"> <div className="font-medium">Expert</div> <div className="text-sm text-muted-foreground">Experienced trader, advanced strategies</div> </Label> </div> </RadioGroup> </div> )} {/* Step 2: Trading Style */} {currentStep === 2 && ( <div className="space-y-4"> <Label className="text-base font-medium">What's your preferred trading style?</Label> <RadioGroup value={quizData.tradingStyle} onValueChange={(value) => setQuizData({ ...quizData, tradingStyle: value })} className="space-y-3" > <div className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-muted/50"> <RadioGroupItem value="scalping" id="scalping" /> <Label htmlFor="scalping" className="flex-1 cursor-pointer"> <div className="font-medium">Scalping</div> <div className="text-sm text-muted-foreground">Quick trades, seconds to minutes</div> </Label> </div> <div className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-muted/50"> <RadioGroupItem value="day-trading" id="day-trading" /> <Label htmlFor="day-trading" className="flex-1 cursor-pointer"> <div className="font-medium">Day Trading</div> <div className="text-sm text-muted-foreground">Intraday positions, closed same day</div> </Label> </div> <div className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-muted/50"> <RadioGroupItem value="swing-trading" id="swing-trading" /> <Label htmlFor="swing-trading" className="flex-1 cursor-pointer"> <div className="font-medium">Swing Trading</div> <div className="text-sm text-muted-foreground">Medium-term, days to weeks</div> </Label> </div> <div className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-muted/50"> <RadioGroupItem value="position-trading" id="position-trading" /> <Label htmlFor="position-trading" className="flex-1 cursor-pointer"> <div className="font-medium">Position Trading</div> <div className="text-sm text-muted-foreground">Long-term, weeks to months</div> </Label> </div> </RadioGroup> </div> )} {/* Step 3: Budget & Instruments */} {currentStep === 3 && ( <div className="space-y-6"> <div className="space-y-4"> <Label className="text-base font-medium">What's your initial trading budget?</Label> <Select value={quizData.budget} onValueChange={(value) => setQuizData({ ...quizData, budget: value })}> <SelectTrigger> <SelectValue placeholder="Select your budget range" /> </SelectTrigger> <SelectContent> <SelectItem value="under-500">Under $500</SelectItem> <SelectItem value="500-2000">$500 - $2,000</SelectItem> <SelectItem value="2000-10000">$2,000 - $10,000</SelectItem> <SelectItem value="over-10000">Over $10,000</SelectItem> </SelectContent> </Select> </div> <div className="space-y-4"> <Label className="text-base font-medium">Which instruments do you want to trade? (Select all that apply)</Label> <div className="grid grid-cols-2 gap-3"> {['Major Pairs', 'Minor Pairs', 'Exotic Pairs', 'Commodities', 'Indices', 'Cryptocurrencies'].map((instrument) => ( <div key={instrument} className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-muted/50"> <Checkbox id={instrument} checked={quizData.instruments.includes(instrument)} onCheckedChange={(checked) => { if (checked) { setQuizData({ ...quizData, instruments: [...quizData.instruments, instrument] }) } else { setQuizData({ ...quizData, instruments: quizData.instruments.filter(i => i !== instrument) }) } }} /> <Label htmlFor={instrument} className="cursor-pointer text-sm">{instrument}</Label> </div> ))} </div> </div> </div> )} {/* Step 4: Requirements */} {currentStep === 4 && ( <div className="space-y-6"> <div className="space-y-4"> <Label className="text-base font-medium">Do you have a preferred regulatory authority?</Label> <Select value={quizData.regulation} onValueChange={(value) => setQuizData({ ...quizData, regulation: value })}> <SelectTrigger> <SelectValue placeholder="Select regulation preference" /> </SelectTrigger> <SelectContent> <SelectItem value="no-preference">No Preference</SelectItem> <SelectItem value="fca">FCA (UK)</SelectItem> <SelectItem value="cysec">CySEC (Cyprus)</SelectItem> <SelectItem value="asic">ASIC (Australia)</SelectItem> <SelectItem value="cftc">CFTC (US)</SelectItem> <SelectItem value="bafin">BaFin (Germany)</SelectItem> </SelectContent> </Select> </div> <div className="space-y-4"> <Label className="text-base font-medium">What's your risk tolerance?</Label> <RadioGroup value={quizData.riskTolerance} onValueChange={(value) => setQuizData({ ...quizData, riskTolerance: value })} className="space-y-3" > <div className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-muted/50"> <RadioGroupItem value="conservative" id="conservative" /> <Label htmlFor="conservative" className="flex-1 cursor-pointer"> <div className="font-medium">Conservative</div> <div className="text-sm text-muted-foreground">Prefer stability and lower risk</div> </Label> </div> <div className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-muted/50"> <RadioGroupItem value="moderate" id="moderate" /> <Label htmlFor="moderate" className="flex-1 cursor-pointer"> <div className="font-medium">Moderate</div> <div className="text-sm text-muted-foreground">Balanced approach to risk and reward</div> </Label> </div> <div className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-muted/50"> <RadioGroupItem value="aggressive" id="aggressive" /> <Label htmlFor="aggressive" className="flex-1 cursor-pointer"> <div className="font-medium">Aggressive</div> <div className="text-sm text-muted-foreground">Willing to take higher risks for potential gains</div> </Label> </div> </RadioGroup> </div> <div className="space-y-4"> <Label className="text-base font-medium">Which features are important to you? (Select all that apply)</Label> <div className="grid grid-cols-1 gap-3"> {[ { id: 'mobile-app', label: 'Mobile Trading App', desc: 'Trade on the go' }, { id: 'education', label: 'Educational Resources', desc: 'Learning materials and courses' }, { id: 'demo-account', label: 'Demo Account', desc: 'Risk-free practice trading' }, { id: 'research-tools', label: 'Research Tools', desc: 'Market analysis and insights' } ].map((feature) => ( <div key={feature.id} className="flex items-center space-x-2 p-3 border rounded-lg hover:bg-muted/50"> <Checkbox id={feature.id} checked={quizData.features.includes(feature.id)} onCheckedChange={(checked) => { if (checked) { setQuizData({ ...quizData, features: [...quizData.features, feature.id] }) } else { setQuizData({ ...quizData, features: quizData.features.filter(f => f !== feature.id) }) } }} /> <Label htmlFor={feature.id} className="flex-1 cursor-pointer"> <div className="font-medium">{feature.label}</div> <div className="text-sm text-muted-foreground">{feature.desc}</div> </Label> </div> ))} </div> </div> </div> )} {/* Step 5: Results */} {currentStep === 5 && ( <div className="space-y-6"> {isAnalyzing ? ( <div className="text-center py-12"> <Loader2 className="h-12 w-12 animate-spin mx-auto mb-4 text-primary" /> <h3 className="text-xl font-semibold mb-2">Analyzing Your Preferences</h3> <p className="text-muted-foreground">Our AI is finding the perfect brokers for you...</p> </div> ) : ( <div> <div className="text-center mb-8"> <h3 className="text-2xl font-bold mb-2">Your Personalized Broker Matches</h3> <p className="text-muted-foreground">Based on your preferences, here are the top brokers for you:</p> </div> <div className="space-y-4"> {matches.map((match, index) => ( <motion.div key={match.broker.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: index * 0.1 }} > <Card className="hover:shadow-lg transition-shadow"> <CardContent className="p-6"> <div className="flex items-start justify-between mb-4"> <div className="flex items-start gap-4"> {match.broker.logo_url && ( <img src={match.broker.logo_url} alt={`${match.broker.name} logo`} className="w-12 h-12 object-contain rounded" /> )} <div> <h4 className="text-xl font-semibold mb-1">{match.broker.name}</h4> <div className="flex items-center gap-2 mb-2"> <Badge variant="outline">{match.broker.country}</Badge> {match.broker.regulations.slice(0, 2).map((reg) => ( <Badge key={reg} variant="secondary">{reg}</Badge> ))} </div> <div className="flex items-center gap-2"> <div className="flex items-center"> <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" /> <span className="ml-1 text-sm font-medium">{(match.broker.avg_rating || 0).toFixed(1)}</span> <span className="text-muted-foreground text-sm ml-1">({match.broker.review_count || 0})</span> </div> </div> </div> </div> <div className="text-right"> <div className="text-sm text-muted-foreground mb-1">Match Score</div> <div className={`text-3xl font-bold ${getMatchScoreColor(match.matchScore)}`}> {match.matchScore}% </div> </div> </div> <div className="grid md:grid-cols-2 gap-6"> <div> <h5 className="font-medium mb-3">Why this broker matches you:</h5> <ul className="space-y-2"> {match.reasons.map((reason, idx) => ( <li key={idx} className="flex items-start gap-2 text-sm"> <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" /> <span>{reason}</span> </li> ))} </ul> </div> <div className="space-y-4"> <div className="grid grid-cols-2 gap-4 text-sm"> <div> <div className="font-medium">Trust Score</div> <div className="flex items-center gap-2"> <span>{match.broker.trust_score || 0}</span> <Progress value={match.broker.trust_score || 0} className="h-2 flex-1" indicatorClassName={getTrustScoreColor(match.broker.trust_score || 0)} /> </div> </div> <div> <div className="font-medium">Min Deposit</div> <div className="text-muted-foreground">${Number(match.broker.min_deposit) || 0}</div> </div> <div> <div className="font-medium">Avg Spreads</div> <div className="text-muted-foreground">{Number(match.broker.spreads_avg) || 0} pips</div> </div> <div> <div className="font-medium">Max Leverage</div> <div className="text-muted-foreground"> {match.broker.leverage_max ? `1:${match.broker.leverage_max}` : 'N/A'} </div> </div> </div> <div className="flex gap-2"> <Button asChild className="flex-1"> <Link to={`/review/${match.broker.id}`}>View Details</Link> </Button> {match.broker.affiliate_url && ( <AffiliateLink href={match.broker.affiliate_url} brokerName={match.broker.name} variant="outline" size="sm" showText={false} /> )} </div> </div> </div> </CardContent> </Card> </motion.div> ))} </div> <div className="text-center mt-8 space-x-4"> <Button variant="outline" onClick={() => { setCurrentStep(1) setMatches([]) setQuizData({ experience: '', tradingStyle: '', budget: '', instruments: [], regulation: '', features: [], riskTolerance: '' }) }}> Start Over </Button> <Button asChild> <Link to="/dashboard"> View Dashboard </Link> </Button> </div> </div> )} </div> )} {/* Navigation Buttons */} {currentStep < 5 && !isAnalyzing && ( <div className="flex justify-between pt-6"> <Button variant="outline" onClick={handleBack} disabled={currentStep === 1} > Back </Button> <Button onClick={handleNext} disabled={!isStepComplete(currentStep)} className="ml-auto" > {currentStep === 4 ? ( <> Get My Matches <ArrowRight className="ml-2 h-4 w-4" /> </> ) : ( <> Next <ArrowRight className="ml-2 h-4 w-4" /> </> )} </Button> </div> )} </CardContent> </Card> </motion.div> </div> ) }