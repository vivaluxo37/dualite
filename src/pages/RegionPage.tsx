import React from 'react' import { useParams, Link } from 'react-router-dom' import { BrokerCard } from '@/components/broker/BrokerCard' import { BrokerComparisonTable } from '@/components/broker/BrokerComparisonTable' import { SEO } from '@/components/SEO' import { ErrorBoundary } from '@/components/error/ErrorBoundary' import { LoadingState } from '@/components/error/LoadingState' import { regionDataMap } from '@/data/forex-brokers/regions' interface RegionPageProps { data?: any } export function RegionPage({ data }: RegionPageProps) { const { regionId } = useParams<{ regionId: string }>() // If data is provided via props, use it (for lazy-loaded components) // Otherwise, get it from the regionDataMap using the URL parameter const regionData = data || regionDataMap[regionId || ''] if (!regionData) { return ( <ErrorBoundary> <div className="container mx-auto px-4 py-8"> <div className="text-center"> <h1 className="text-4xl font-bold mb-4">Region Not Found</h1> <p className="text-lg text-gray-600 mb-8"> The region "{regionId}" was not found in our database. </p> <Link to="/brokers" className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors" > Browse All Brokers </Link> </div> </div> </ErrorBoundary> ) } return ( <ErrorBoundary> <SEO title={regionData.seo?.title || regionData.title} description={regionData.seo?.description || regionData.description} keywords={regionData.seo?.keywords?.join(', ') || ''} canonicalUrl={regionData.seo?.canonical} /> <div className="container mx-auto px-4 py-8"> {/* Header Section */} <div className="text-center mb-12"> <h1 className="text-4xl font-bold mb-4">{regionData.title}</h1> <p className="text-xl text-gray-600 mb-4">{regionData.subtitle}</p> <p className="text-gray-500">Last updated: {regionData.lastUpdated}</p> </div> {/* Introduction */} <div className="bg-white rounded-lg shadow-md p-6 mb-8"> <h2 className="text-2xl font-semibold mb-4">Introduction</h2> <div className="prose max-w-none"> {regionData.introduction.split('\n').map((paragraph: string, index: number) => ( <p key={index} className="mb-4 text-gray-700"> {paragraph} </p> ))} </div> </div> {/* Featured Brokers */} <div className="mb-12"> <h2 className="text-3xl font-bold mb-6 text-center">Top Brokers in {regionData.name}</h2> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {regionData.brokers.map((broker: any) => ( <BrokerCard key={broker.id} broker={broker} /> ))} </div> </div> {/* Comparison Table */} {regionData.comparisonTable && ( <div className="mb-12"> <h2 className="text-3xl font-bold mb-6 text-center">Broker Comparison</h2> <BrokerComparisonTable brokers={regionData.brokers} /> </div> )} {/* Regulations */} <div className="bg-blue-50 rounded-lg p-6 mb-8"> <h2 className="text-2xl font-semibold mb-4">{regionData.regulations.title}</h2> <p className="text-gray-700 mb-4">{regionData.regulations.description}</p> <ul className="list-disc list-inside space-y-2"> {regionData.regulations.points.map((point: string, index: number) => ( <li key={index} className="text-gray-700">{point}</li> ))} </ul> </div> {/* How to Choose */} {regionData.howToChoose && ( <div className="bg-white rounded-lg shadow-md p-6 mb-8"> <h2 className="text-2xl font-semibold mb-4">{regionData.howToChoose.title}</h2> <div className="space-y-4"> {regionData.howToChoose.content.map((item: string, index: number) => ( <p key={index} className="text-gray-700">{item}</p> ))} </div> </div> )} {/* Key Points */} {regionData.keyPoints && ( <div className="bg-green-50 rounded-lg p-6 mb-8"> <h2 className="text-2xl font-semibold mb-4">Key Points</h2> <ul className="list-disc list-inside space-y-2"> {regionData.keyPoints.map((point: string, index: number) => ( <li key={index} className="text-gray-700">{point}</li> ))} </ul> </div> )} {/* FAQs */} <div className="mb-12"> <h2 className="text-3xl font-bold mb-6 text-center">Frequently Asked Questions</h2> <div className="space-y-6"> {regionData.faqs.map((faq: any, index: number) => ( <div key={index} className="bg-white rounded-lg shadow-md p-6"> <h3 className="text-xl font-semibold mb-3">{faq.question}</h3> <p className="text-gray-700">{faq.answer}</p> </div> ))} </div> </div> {/* Related Pages */} {regionData.relatedPages && regionData.relatedPages.length > 0 && ( <div className="mb-12"> <h2 className="text-2xl font-semibold mb-4">Related Pages</h2> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"> {regionData.relatedPages.map((page: string, index: number) => ( <Link key={index} to="#" className="bg-blue-100 hover:bg-blue-200 p-4 rounded-lg transition-colors" > {page} </Link> ))} </div> </div> )} {/* Conclusion */} <div className="bg-gray-100 rounded-lg p-6"> <h2 className="text-2xl font-semibold mb-4">{regionData.conclusion.title}</h2> <div className="space-y-4"> {regionData.conclusion.content.map((paragraph: string, index: number) => ( <p key={index} className="text-gray-700">{paragraph}</p> ))} </div> </div> </div> </ErrorBoundary> ) } export default RegionPage 