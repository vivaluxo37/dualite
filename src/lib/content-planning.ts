// Content Planning Agent using SEO Content Planner from global agents // This service creates comprehensive content outlines and topic clusters export interface ContentOutline { id?: string; broker_id: string; keyword_cluster_id: string; title: string; content_type: 'guide' | 'review' | 'comparison' | 'tutorial' | 'news'; target_word_count: number; target_audience: string; search_intent: 'informational' | 'commercial' | 'transactional' | 'navigational'; outline_structure: OutlineSection[]; key_points: string[]; internal_linking_opportunities: string[]; content_goals: string[]; created_at: string; updated_at: string; } export interface OutlineSection { id: string; title: string; level: number; // H1, H2, H3, etc. content_type: 'introduction' | 'main_content' | 'conclusion' | 'call_to_action'; key_points: string[]; target_word_count: number; subsections?: OutlineSection[]; } export interface TopicCluster { id?: string; broker_id: string; cluster_name: string; pillar_content_id?: string; content_pieces: string[]; topic_gaps: string[]; content_strategy: ContentStrategy; created_at: string; } export interface ContentStrategy { primary_keywords: string[]; secondary_keywords: string[]; semantic_keywords: string[]; content_priorities: { topic: string; priority: 'high' | 'medium' | 'low'; reason: string; }[]; internal_linking_plan: { from: string; to: string; anchor_text: string; }[]; content_calendar: { week: number; content_type: string; topic: string; target_keywords: string[]; }[]; } export class ContentPlanningAgent { private supabaseProjectId: string; constructor(supabaseProjectId: string) { this.supabaseProjectId = supabaseProjectId; } async createContentOutline( brokerId: string, keywordCluster: string, keywords: string[], contentType: 'guide' | 'review' | 'comparison' | 'tutorial' | 'news' ): Promise<ContentOutline> { try { console.log(`Creating content outline for ${keywordCluster}`); // Step 1: Analyze keywords and search intent const intentAnalysis = this.analyzeSearchIntent(keywords, contentType); // Step 2: Determine target audience const targetAudience = this.determineTargetAudience(keywords, contentType); // Step 3: Create comprehensive outline structure const outlineStructure = this.createOutlineStructure(keywordCluster, intentAnalysis, contentType); // Step 4: Extract key points and content goals const keyPoints = this.extractKeyPoints(keywords, outlineStructure); const contentGoals = this.defineContentGoals(contentType, targetAudience); // Step 5: Identify internal linking opportunities const internalLinks = this.identifyInternalLinkingOpportunities(brokerId, keywordCluster); // Step 6: Calculate target word count const targetWordCount = this.calculateTargetWordCount(contentType, outlineStructure); const contentOutline: ContentOutline = { broker_id: brokerId, keyword_cluster_id: keywordCluster, title: this.generateTitle(keywordCluster, contentType, intentAnalysis.intent), content_type: contentType, target_word_count: targetWordCount, target_audience: targetAudience, search_intent: intentAnalysis.intent, outline_structure: outlineStructure, key_points: keyPoints, internal_linking_opportunities: internalLinks, content_goals: contentGoals, created_at: new Date().toISOString(), updated_at: new Date().toISOString() }; // Save to database const savedOutline = await this.saveContentOutline(contentOutline); return savedOutline; } catch (error) { console.error('Error creating content outline:', error); throw error; } } private analyzeSearchIntent(keywords: string[], contentType: string): { intent: 'informational' | 'commercial' | 'transactional' | 'navigational'; confidence: number; signals: string[]; } { const keywordText = keywords.join(' ').toLowerCase(); const signals: string[] = []; let intent: 'informational' | 'commercial' | 'transactional' | 'navigational' = 'informational'; let confidence = 0; // Informational intent signals const informationalSignals = ['how to', 'guide', 'tutorial', 'learn', 'what is', 'explain', 'understand']; const commercialSignals = ['review', 'comparison', 'vs', 'best', 'top', 'alternative', 'rating']; const transactionalSignals = ['buy', 'sign up', 'register', 'open account', 'deposit', 'trade', 'bonus']; const navigationalSignals = ['login', 'website', 'official', 'contact', 'support']; // Count signals for (const signal of informationalSignals) { if (keywordText.includes(signal)) { signals.push(signal); confidence += 20; } } for (const signal of commercialSignals) { if (keywordText.includes(signal)) { signals.push(signal); confidence += 25; } } for (const signal of transactionalSignals) { if (keywordText.includes(signal)) { signals.push(signal); confidence += 30; } } for (const signal of navigationalSignals) { if (keywordText.includes(signal)) { signals.push(signal); confidence += 35; } } // Determine primary intent based on content type and signals if (contentType === 'tutorial' || contentType === 'guide') { intent = 'informational'; confidence = Math.max(confidence, 70); } else if (contentType === 'review' || contentType === 'comparison') { intent = 'commercial'; confidence = Math.max(confidence, 70); } else if (contentType === 'news') { intent = 'informational'; confidence = Math.max(confidence, 60); } // Override based on strong signals if (signals.some(s => transactionalSignals.includes(s))) { intent = 'transactional'; } else if (signals.some(s => commercialSignals.includes(s))) { intent = 'commercial'; } else if (signals.some(s => navigationalSignals.includes(s))) { intent = 'navigational'; } return { intent, confidence: Math.min(confidence, 100), signals }; } private determineTargetAudience(keywords: string[], contentType: string): string { const keywordText = keywords.join(' ').toLowerCase(); // Beginner signals const beginnerSignals = ['beginner', 'starter', 'newbie', 'how to', 'learn', 'basics']; // Advanced signals const advancedSignals = ['advanced', 'professional', 'expert', 'strategy', 'analysis']; // Comparison signals const comparisonSignals = ['vs', 'comparison', 'alternative', 'best']; if (beginnerSignals.some(signal => keywordText.includes(signal))) { return 'Beginner traders looking to learn about forex trading'; } else if (advancedSignals.some(signal => keywordText.includes(signal))) { return 'Experienced traders seeking advanced trading strategies'; } else if (comparisonSignals.some(signal => keywordText.includes(signal))) { return 'Traders comparing different brokers for the best choice'; } else if (contentType === 'review') { return 'Traders researching broker reliability and features'; } else if (contentType === 'tutorial') { return 'Traders looking to improve their trading skills'; } return 'General forex trading audience'; } private createOutlineStructure( topic: string, intentAnalysis: any, contentType: 'guide' | 'review' | 'comparison' | 'tutorial' | 'news' ): OutlineSection[] { const baseStructure: OutlineSection[] = []; // Introduction section baseStructure.push({ id: 'intro', title: this.generateIntroductionTitle(topic, contentType), level: 1, content_type: 'introduction', key_points: this.generateIntroductionKeyPoints(topic, intentAnalysis.intent), target_word_count: 150 }); // Main content sections based on content type switch (contentType) { case 'review': baseStructure.push(...this.createReviewOutline(topic)); break; case 'comparison': baseStructure.push(...this.createComparisonOutline(topic)); break; case 'tutorial': baseStructure.push(...this.createTutorialOutline(topic)); break; case 'guide': baseStructure.push(...this.createGuideOutline(topic)); break; case 'news': baseStructure.push(...this.createNewsOutline(topic)); break; } // Conclusion section baseStructure.push({ id: 'conclusion', title: 'Conclusion', level: 1, content_type: 'conclusion', key_points: this.generateConclusionKeyPoints(topic, intentAnalysis.intent), target_word_count: 100 }); return baseStructure; } private generateIntroductionTitle(topic: string, contentType: string): string { const templates: { [key: string]: string } = { review: `Comprehensive ${topic} Review: What You Need to Know`, comparison: `${topic} vs Competitors: Detailed Comparison`, tutorial: `How to ${topic}: Complete Tutorial`, guide: `The Ultimate Guide to ${topic}`, news: `Latest Updates on ${topic}` }; return templates[contentType] || `Understanding ${topic}`; } private generateIntroductionKeyPoints(topic: string, intent: string): string[] { const basePoints = [ `Brief overview of ${topic}`, 'Why this topic matters for forex traders', 'What readers will learn from this content' ]; if (intent === 'commercial') { basePoints.push('Key factors to consider when evaluating options'); } else if (intent === 'informational') { basePoints.push('Key concepts and terminology explained'); } return basePoints; } private createReviewOutline(_topic: string): OutlineSection[] { return [ { id: 'overview', title: 'Broker Overview', level: 2, content_type: 'main_content', key_points: [ 'Company background and history', 'Regulatory status and licenses', 'Global presence and reputation' ], target_word_count: 200 }, { id: 'trading-conditions', title: 'Trading Conditions', level: 2, content_type: 'main_content', key_points: [ 'Account types and minimum deposits', 'Spreads and commission structure', 'Lverage options and margin requirements' ], target_word_count: 250 }, { id: 'platforms', title: 'Trading Platforms', level: 2, content_type: 'main_content', key_points: [ 'Available trading platforms (MT4, MT5, proprietary)', 'Platform features and usability', 'Mobile trading capabilities' ], target_word_count: 200 }, { id: 'pros-cons', title: 'Pros and Cons', level: 2, content_type: 'main_content', key_points: [ 'Key advantages and strengths', 'Potential drawbacks and limitations', 'Overall assessment' ], target_word_count: 200 } ]; } private createComparisonOutline(_topic: string): OutlineSection[] { return [ { id: 'criteria', title: 'Comparison Criteria', level: 2, content_type: 'main_content', key_points: [ 'Key factors for broker comparison', 'Scoring methodology', 'Importance weights for each criterion' ], target_word_count: 150 }, { id: 'features', title: 'Feature Comparison', level: 2, content_type: 'main_content', key_points: [ 'Trading platforms and tools', 'Account types and conditions', 'Regulatory oversight and safety' ], target_word_count: 300 }, { id: 'costs', title: 'Cost Structure Analysis', level: 2, content_type: 'main_content', key_points: [ 'Spreads comparison', 'Commission and fee structures', 'Hidden costs to consider' ], target_word_count: 250 }, { id: 'recommendation', title: 'Recommendations', level: 2, content_type: 'main_content', key_points: [ 'Best choice for different trader types', 'Runner-up options', 'Final verdict' ], target_word_count: 200 } ]; } private createTutorialOutline(_topic: string): OutlineSection[] { return [ { id: 'prerequisites', title: 'Prerequisites', level: 2, content_type: 'main_content', key_points: [ 'Required knowledge and skills', 'Necessary tools and resources', 'Time commitment expectations' ], target_word_count: 150 }, { id: 'step-by-step', title: 'Step-by-Step Instructions', level: 2, content_type: 'main_content', key_points: [ 'Detailed walkthrough of each step', 'Screenshots and visual aids', 'Common pitfalls and how to avoid them' ], target_word_count: 400 }, { id: 'tips', title: 'Pro Tips and Best Practices', level: 2, content_type: 'main_content', key_points: [ 'Expert recommendations', 'Time-saving techniques', 'Advanced tips for experienced users' ], target_word_count: 200 } ]; } private createGuideOutline(_topic: string): OutlineSection[] { return [ { id: 'fundamentals', title: 'Understanding the Fundamentals', level: 2, content_type: 'main_content', key_points: [ 'Core concepts and terminology', 'How it works in practice', 'Importance in forex trading' ], target_word_count: 250 }, { id: 'strategies', title: 'Strategies and Approaches', level: 2, content_type: 'main_content', key_points: [ 'Different strategies explained', 'When to use each approach', 'Risk management considerations' ], target_word_count: 300 }, { id: 'examples', title: 'Real-World Examples', level: 2, content_type: 'main_content', key_points: [ 'Case studies and examples', 'Success stories and lessons learned', 'Practical applications' ], target_word_count: 250 } ]; } private createNewsOutline(_topic: string): OutlineSection[] { return [ { id: 'summary', title: 'News Summary', level: 2, content_type: 'main_content', key_points: [ 'Key developments and announcements', 'Timeline of events', 'Market reaction and impact' ], target_word_count: 200 }, { id: 'analysis', title: 'Expert Analysis', level: 2, content_type: 'main_content', key_points: [ 'Industry expert opinions', 'Market analyst insights', 'Potential future implications' ], target_word_count: 250 }, { id: 'impact', title: 'Impact on Traders', level: 2, content_type: 'main_content', key_points: [ 'How this affects retail traders', 'Recommended actions and precautions', 'Long-term considerations' ], target_word_count: 200 } ]; } private generateConclusionKeyPoints(topic: string, intent: string): string[] { const basePoints = [ `Summary of key points about ${topic}`, 'Final recommendations or next steps', 'Additional resources for further learning' ]; if (intent === 'commercial') { basePoints.push('Call to action for further research or comparison'); } else if (intent === 'transactional') { basePoints.push('Clear next steps for readers to take action'); } return basePoints; } private extractKeyPoints(keywords: string[], outlineStructure: OutlineSection[]): string[] { const keyPoints: string[] = []; // Extract key topics from outline structure for (const section of outlineStructure) { keyPoints.push(...section.key_points); } // Add keyword-specific insights const keywordInsights = this.generateKeywordInsights(keywords); keyPoints.push(...keywordInsights); // Remove duplicates and limit to most important points return [...new Set(keyPoints)].slice(0, 15); } private generateKeywordInsights(keywords: string[]): string[] { const insights: string[] = []; for (const keyword of keywords.slice(0, 5)) { if (keyword.includes('regulation')) { insights.push('Importance of regulatory compliance and investor protection'); } else if (keyword.includes('platform')) { insights.push('Trading platform features and user experience considerations'); } else if (keyword.includes('spread')) { insights.push('Impact of spreads on trading profitability and costs'); } else if (keyword.includes('leverage')) { insights.push('Lverage risks and responsible trading practices'); } else if (keyword.includes('demo')) { insights.push('Benefits of demo accounts for practice and strategy testing'); } } return insights; } private defineContentGoals(contentType: string, _targetAudience: string): string[] { const baseGoals = [ 'Provide comprehensive, accurate information', 'Address common questions and concerns', 'Help readers make informed decisions' ]; const typeSpecificGoals: { [key: string]: string[] } = { review: [ 'Present balanced assessment of pros and cons', 'Help readers evaluate broker suitability', 'Support due diligence process' ], comparison: [ 'Enable fair comparison between options', 'Highlight key differentiators', 'Simplify decision-making process' ], tutorial: [ 'Provide clear, step-by-step instructions', 'Build practical skills and knowledge', 'Increase reader confidence in the topic' ], guide: [ 'Cover topic comprehensively', 'Establish authority and expertise', 'Serve as reference material' ], news: [ 'Deliver timely, relevant information', 'Provide context and analysis', 'Help readers understand implications' ] }; return [...baseGoals, ...(typeSpecificGoals[contentType] || [])]; } private identifyInternalLinkingOpportunities(_brokerId: string, _topic: string): string[] { return [ `Link to related broker reviews`, `Connect to trading strategy guides`, `Reference educational resources`, `Link to regulatory information`, `Connect to platform comparison tools` ]; } private calculateTargetWordCount(contentType: string, outlineStructure: OutlineSection[]): number { const baseWordCounts: { [key: string]: number } = { review: 1500, comparison: 2000, tutorial: 1200, guide: 2500, news: 800 }; const sectionWordCount = outlineStructure.reduce((total, section) => total + section.target_word_count, 0); return Math.max(sectionWordCount, baseWordCounts[contentType] || 1500); } private generateTitle(topic: string, _contentType: string, intent: string): string { const intentModifiers: { [key: string]: string[] } = { informational: ['Complete Guide', 'Understanding', 'Learn About'], commercial: ['Review', 'Comparison', 'Analysis', 'Best'], transactional: ['Get Started', 'How to', 'Step-by-Step'], navigational: ['Official', 'Access', 'Contact'] }; const modifiers = intentModifiers[intent] || intentModifiers.informational; const modifier = modifiers[Math.floor(Math.random() * modifiers.length)]; return `${modifier}: ${topic}`; } private async saveContentOutline(outline: ContentOutline): Promise<ContentOutline> { try { // This would use the mcp__supabase__execute_sql MCP tool console.log(`Saving content outline for: ${outline.title}`); // Mock implementation - in real implementation, this would save to database const savedOutline = { id: `mock_outline_${Date.now()}`, ...outline }; return savedOutline; } catch (error) { console.error('Error saving content outline:', error); throw error; } } async generateTopicCluster(brokerId: string, keywords: string[]): Promise<TopicCluster> { try { console.log(`Generating topic cluster for broker ${brokerId}`); // Group keywords into topic clusters const topicGroups = this.groupKeywordsIntoTopics(keywords); // Identify content gaps const contentGaps = this.identifyContentGaps(topicGroups); // Create content strategy const contentStrategy = this.createContentStrategy(topicGroups, brokerId); const topicCluster: TopicCluster = { broker_id: brokerId, cluster_name: `${brokerId} Content Cluster`, content_pieces: Object.keys(topicGroups), topic_gaps: contentGaps, content_strategy: contentStrategy, created_at: new Date().toISOString() }; return topicCluster; } catch (error) { console.error('Error generating topic cluster:', error); throw error; } } private groupKeywordsIntoTopics(keywords: string[]): Record<string, string[]> { const groups: Record<string, string[]> = { 'Broker Reviews': [], 'Trading Platforms': [], 'Account Types': [], 'Trading Conditions': [], 'Regulation & Safety': [], 'Educational Content': [], 'Market Analysis': [], 'Customer Support': [] }; for (const keyword of keywords) { const lowerKeyword = keyword.toLowerCase(); if (lowerKeyword.includes('review') || lowerKeyword.includes('rating')) { groups['Broker Reviews'].push(keyword); } else if (lowerKeyword.includes('platform') || lowerKeyword.includes('mt4') || lowerKeyword.includes('mt5')) { groups['Trading Platforms'].push(keyword); } else if (lowerKeyword.includes('account') || lowerKeyword.includes('deposit')) { groups['Account Types'].push(keyword); } else if (lowerKeyword.includes('spread') || lowerKeyword.includes('leverage') || lowerKeyword.includes('fee')) { groups['Trading Conditions'].push(keyword); } else if (lowerKeyword.includes('regulation') || lowerKeyword.includes('license') || lowerKeyword.includes('safe')) { groups['Regulation & Safety'].push(keyword); } else if (lowerKeyword.includes('tutorial') || lowerKeyword.includes('guide') || lowerKeyword.includes('learn')) { groups['Educational Content'].push(keyword); } else if (lowerKeyword.includes('analysis') || lowerKeyword.includes('market') || lowerKeyword.includes('news')) { groups['Market Analysis'].push(keyword); } else if (lowerKeyword.includes('support') || lowerKeyword.includes('service') || lowerKeyword.includes('contact')) { groups['Customer Support'].push(keyword); } else { // Default to reviews if no clear category groups['Broker Reviews'].push(keyword); } } // Remove empty groups Object.keys(groups).forEach(key => { if (groups[key].length === 0) { delete groups[key]; } }); return groups; } private identifyContentGaps(topicGroups: Record<string, string[]>): string[] { const gaps: string[] = []; // Check for missing essential content types const essentialTopics = [ 'Broker Reviews', 'Trading Platforms', 'Account Types', 'Trading Conditions', 'Regulation & Safety' ]; for (const topic of essentialTopics) { if (!topicGroups[topic] || topicGroups[topic].length === 0) { gaps.push(`Missing ${topic.toLowerCase()} content`); } } // Check for content depth for (const [topic, keywords] of Object.entries(topicGroups)) { if (keywords.length < 3) { gaps.push(`Limited content depth in ${topic}`); } } return gaps; } private createContentStrategy(topicGroups: Record<string, string[]>, _brokerId: string): ContentStrategy { const primaryKeywords: string[] = []; const secondaryKeywords: string[] = []; const semanticKeywords: string[] = []; // Categorize keywords for (const [topic, keywords] of Object.entries(topicGroups)) { if (['Broker Reviews', 'Trading Conditions', 'Regulation & Safety'].includes(topic)) { primaryKeywords.push(...keywords.slice(0, 3)); } else { secondaryKeywords.push(...keywords.slice(0, 2)); } // Generate semantic keywords semanticKeywords.push(...this.generateSemanticKeywords(topic, keywords)); } // Create content priorities const contentPriorities = [ { topic: 'Comprehensive Broker Review', priority: 'high' as const, reason: 'Essential for user decision-making and SEO' }, { topic: 'Trading Platform Analysis', priority: 'high' as const, reason: 'Key differentiator for broker selection' }, { topic: 'Account Types and Conditions', priority: 'medium' as const, reason: 'Important for trader segmentation' } ]; // Create internal linking plan const internalLinkingPlan = [ { from: 'Broker Review', to: 'Trading Platform', anchor_text: 'trading platform features' }, { from: 'Broker Review', to: 'Account Types', anchor_text: 'available account types' } ]; // Create content calendar const contentCalendar = [ { week: 1, content_type: 'review', topic: 'Comprehensive Broker Review', target_keywords: primaryKeywords.slice(0, 3) }, { week: 2, content_type: 'guide', topic: 'Trading Platform Guide', target_keywords: secondaryKeywords.slice(0, 3) }, { week: 3, content_type: 'comparison', topic: 'Account Types Comparison', target_keywords: secondaryKeywords.slice(3, 6) } ]; return { primary_keywords: [...new Set(primaryKeywords)], secondary_keywords: [...new Set(secondaryKeywords)], semantic_keywords: [...new Set(semanticKeywords)], content_priorities: contentPriorities, internal_linking_plan: internalLinkingPlan, content_calendar: contentCalendar }; } private generateSemanticKeywords(topic: string, keywords: string[]): string[] { const semanticMaps: Record<string, string[]> = { 'Broker Reviews': ['reputation', 'trustworthiness', 'reliability', 'user experience', 'performance'], 'Trading Platforms': ['usability', 'features', 'tools', 'charts', 'indicators', 'automation'], 'Account Types': ['standard', 'premium', 'vip', 'islamic', 'demo', 'live'], 'Trading Conditions': ['spreads', 'commissions', 'leverage', 'margin', 'execution', 'slippage'], 'Regulation & Safety': ['fca', 'cysec', 'asic', 'fsc', 'investor protection', 'segregated funds'] }; const semanticKeywords = semanticMaps[topic] || []; // Add topic-specific semantic variations for (const keyword of keywords.slice(0, 3)) { const words = keyword.split(' '); if (words.length > 1) { semanticKeywords.push(`${words[0]} trading`, `${words[0]} platform`, `${words[0]} review`); } } return semanticKeywords; } }