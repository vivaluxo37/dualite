// Logger utility for consistent logging across the application export class Logger { private static isDevelopment = import.meta.env.DEV || import.meta.env.MODE === 'development'; static info(message: string, ...args: any[]): void { if (this.isDevelopment) { console.info(`[INFO] ${message}`, ...args); } } static warn(message: string, ...args: any[]): void { if (this.isDevelopment) { console.warn(`[WARN] ${message}`, ...args); } } static error(message: string, ...args: any[]): void { // Always log errors, even in production console.error(`[ERROR] ${message}`, ...args); // In production, you might want to send errors to a monitoring service if (!this.isDevelopment) { this.sendToErrorMonitoring(message, args); } } static debug(message: string, ...args: any[]): void { if (this.isDevelopment) { console.debug(`[DEBUG] ${message}`, ...args); } } private static sendToErrorMonitoring(message: string, args: any[]): void { // TODO: Implement error monitoring service integration // This could be Sentry, LogRocket, or similar service if (typeof window !== 'undefined' && 'fetch' in window) { fetch('/api/log-error', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ message, args, timestamp: new Date().toISOString(), url: window.location.href, }), }).catch(() => { // Silently fail if error logging fails }); } } }