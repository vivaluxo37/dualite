import { supabase } from '@/lib/supabase'; import { CompleteBrokerData, ScrapingSource, ScrapingResult } from '@/types/broker'; import { fetchWebContent } from '@/lib/web-fetch'; // Enhanced forex broker review sources with Firecrawl MCP integration export const SCRAPING_SOURCES: ScrapingSource[] = [ // Primary Review Sites (High Authority) { name: 'Forex Peace Army', baseUrl: 'https://www.forexpeacearmy.com', brokerListUrl: '/forex-brokers-reviews', selectors: { brokerList: '.broker-item, .broker-card, .review-item', brokerName: '.broker-name, .broker-title, h1, h2', brokerLink: 'a', brokerRating: '.rating, .stars, .score', brokerReviews: '.review-count, .reviews-count', brokerDetails: { description: '.description, .summary, .about', regulation: '.regulation, .license, .regulator', spreads: '.spreads, .spread-info, .trading-conditions', leverage: '.leverage, .margin, .trading-conditions', platforms: '.platforms, .trading-platform', minDeposit: '.min-deposit, .minimum-deposit', pros: '.pros, .advantages, .strengths', cons: '.cons, .disadvantages, .weaknesses' } }, enabled: true, priority: 1 }, { name: 'Investopedia', baseUrl: 'https://www.investopedia.com', brokerListUrl: '/best-forex-brokers', selectors: { brokerList: '.broker-card, .comparison-item, .review-item', brokerName: '.broker-title, .company-name, h2, h3', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .user-reviews', brokerDetails: { description: '.description, .summary, .overview', regulation: '.regulation, .licensing, .compliance', spreads: '.spreads, .fees, .trading-costs', leverage: '.leverage, .margin-requirements', platforms: '.platforms, .software, .trading-tools', minDeposit: '.min-deposit, .account-minimum', pros: '.pros, .advantages, .benefits', cons: '.cons, .drawbacks, .limitations' } }, enabled: true, priority: 1 }, { name: 'DailyForex', baseUrl: 'https://www.dailyforex.com', brokerListUrl: '/forex-brokers', selectors: { brokerList: '.broker-item, .broker-listing, .review-box', brokerName: '.broker-name, .broker-title, .company-name', brokerLink: 'a', brokerRating: '.rating, .stars, .score-badge', brokerReviews: '.review-count, .ratings-count', brokerDetails: { description: '.description, .summary, .about-broker', regulation: '.regulation, .license-info, .regulatory', spreads: '.spreads, .spread-info, .trading-conditions', leverage: '.leverage, .margin-info, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .positive-points', cons: '.cons, .disadvantages, .negative-points' } }, enabled: true, priority: 2 }, { name: 'ForexBrokers.com', baseUrl: 'https://www.forexbrokers.com', brokerListUrl: '/reviews', selectors: { brokerList: '.broker-review, .review-item, .broker-profile', brokerName: '.broker-name, .company-name, h1, h2', brokerLink: 'a', brokerRating: '.rating, .score, .rating-value', brokerReviews: '.review-count, .total-reviews', brokerDetails: { description: '.description, .summary, .profile-text', regulation: '.regulation, .license, .regulatory-body', spreads: '.spreads, .spread-info, .costs', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-investment', pros: '.pros, .advantages, .strengths', cons: '.cons, .disadvantages, .weaknesses' } }, enabled: true, priority: 2 }, { name: 'CompareForexBrokers', baseUrl: 'https://www.compareforexbrokers.com', brokerListUrl: '/brokers', selectors: { brokerList: '.broker-comparison, .broker-item, .compare-item', brokerName: '.broker-name, .company-name, .broker-title', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .user-ratings', brokerDetails: { description: '.description, .summary, .overview', regulation: '.regulation, .license, .regulatory-info', spreads: '.spreads, .fees, .trading-conditions', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .positive-aspects', cons: '.cons, .disadvantages, .negative-aspects' } }, enabled: true, priority: 2 }, { name: 'FX Empire', baseUrl: 'https://www.fxempire.com', brokerListUrl: '/forex-brokers', selectors: { brokerList: '.broker-item, .broker-card, .review-item', brokerName: '.broker-name, .company-name, h2, h3', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .ratings-count', brokerDetails: { description: '.description, .summary, .about', regulation: '.regulation, .license, .regulatory-body', spreads: '.spreads, .spread-info, .trading-conditions', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .strengths', cons: '.cons, .disadvantages, .weaknesses' } }, enabled: true, priority: 2 }, { name: 'BrokerChooser', baseUrl: 'https://www.brokerchooser.com', brokerListUrl: '/forex-brokers', selectors: { brokerList: '.broker-card, .broker-item, .review-box', brokerName: '.broker-name, .company-name, .broker-title', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .user-reviews', brokerDetails: { description: '.description, .summary, .overview', regulation: '.regulation, .license, .regulatory-info', spreads: '.spreads, .fees, .trading-conditions', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .positive-points', cons: '.cons, .disadvantages, .negative-points' } }, enabled: true, priority: 2 }, { name: 'TradingView', baseUrl: 'https://www.tradingview.com', brokerListUrl: '/brokers', selectors: { brokerList: '.broker-item, .broker-card, .broker-listing', brokerName: '.broker-name, .company-name, .broker-title', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .ratings-count', brokerDetails: { description: '.description, .summary, .about', regulation: '.regulation, .license, .regulatory-body', spreads: '.spreads, .fees, .trading-conditions', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .strengths', cons: '.cons, .disadvantages, .weaknesses' } }, enabled: true, priority: 3 }, { name: '100ForexBrokers', baseUrl: 'https://www.100forexbrokers.com', brokerListUrl: '/reviews', selectors: { brokerList: '.broker-item, .broker-review, .listing-item', brokerName: '.broker-name, .company-name, h2, h3', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .total-reviews', brokerDetails: { description: '.description, .summary, .overview', regulation: '.regulation, .license, .regulatory-info', spreads: '.spreads, .fees, .trading-conditions', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .positive-points', cons: '.cons, .disadvantages, .negative-points' } }, enabled: true, priority: 3 }, { name: 'FXStreet', baseUrl: 'https://www.fxstreet.com', brokerListUrl: '/brokers', selectors: { brokerList: '.broker-item, .broker-card, .review-item', brokerName: '.broker-name, .company-name, .broker-title', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .user-ratings', brokerDetails: { description: '.description, .summary, .overview', regulation: '.regulation, .license, .regulatory-body', spreads: '.spreads, .fees, .trading-conditions', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .strengths', cons: '.cons, .disadvantages, .weaknesses' } }, enabled: true, priority: 3 }, // Additional Review Sites for Comprehensive Coverage { name: 'ScrapeHero', baseUrl: 'https://www.scrapehero.com', brokerListUrl: '/forex-broker-reviews', selectors: { brokerList: '.broker-item, .review-item, .listing', brokerName: '.broker-name, .company-name, h2, h3', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .ratings-count', brokerDetails: { description: '.description, .summary, .overview', regulation: '.regulation, .license, .regulatory-info', spreads: '.spreads, .fees, .trading-conditions', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .positive-points', cons: '.cons, .disadvantages, .negative-points' } }, enabled: true, priority: 4 }, { name: 'MyForexChart', baseUrl: 'https://www.myforexchart.com', brokerListUrl: '/forex-brokers', selectors: { brokerList: '.broker-review, .review-item, .broker-profile', brokerName: '.broker-name, .company-name, h1, h2', brokerLink: 'a', brokerRating: '.rating, .stars, .score-badge', brokerReviews: '.review-count, .ratings-count', brokerDetails: { description: '.description, .summary, .profile-text', regulation: '.regulation, .license, .regulatory-body', spreads: '.spreads, .spread-info, .costs', leverage: '.leverage, .margin-info, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-investment', pros: '.pros, .advantages, .strengths', cons: '.cons, .disadvantages, .weaknesses' } }, enabled: true, priority: 4 }, { name: 'Forex.com Reviews', baseUrl: 'https://www.forexbrokerreviews.com', brokerListUrl: '/reviews', selectors: { brokerList: '.broker-item, .review-item, .broker-card', brokerName: '.broker-name, .company-name, h2, h3', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .total-reviews', brokerDetails: { description: '.description, .summary, .overview', regulation: '.regulation, .license, .regulatory-info', spreads: '.spreads, .fees, .trading-conditions', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .positive-points', cons: '.cons, .disadvantages, .negative-points' } }, enabled: true, priority: 4 }, { name: 'BrokersView', baseUrl: 'https://www.brokersview.com', brokerListUrl: '/forex-brokers', selectors: { brokerList: '.broker-item, .broker-card, .review-item', brokerName: '.broker-name, .company-name, .broker-title', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .user-reviews', brokerDetails: { description: '.description, .summary, .overview', regulation: '.regulation, .license, .regulatory-info', spreads: '.spreads, .fees, .trading-conditions', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .positive-points', cons: '.cons, .disadvantages, .negative-points' } }, enabled: true, priority: 4 }, { name: 'ForexBonus', baseUrl: 'https://www.forexbonus.com', brokerListUrl: '/brokers', selectors: { brokerList: '.broker-item, .broker-card, .listing-item', brokerName: '.broker-name, .company-name, h2, h3', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .ratings-count', brokerDetails: { description: '.description, .summary, .overview', regulation: '.regulation, .license, .regulatory-info', spreads: '.spreads, .fees, .trading-conditions', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .positive-points', cons: '.cons, .disadvantages, .negative-points' } }, enabled: true, priority: 5 }, { name: 'TopRatedForexBrokers', baseUrl: 'https://www.topratedforexbrokers.com', brokerListUrl: '/reviews', selectors: { brokerList: '.broker-item, .review-item, .broker-card', brokerName: '.broker-name, .company-name, h2, h3', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .total-reviews', brokerDetails: { description: '.description, .summary, .overview', regulation: '.regulation, .license, .regulatory-info', spreads: '.spreads, .fees, .trading-conditions', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .positive-points', cons: '.cons, .disadvantages, .negative-points' } }, enabled: true, priority: 5 }, { name: 'ForexRating', baseUrl: 'https://www.forexrating.com', brokerListUrl: '/brokers', selectors: { brokerList: '.broker-item, .broker-card, .review-item', brokerName: '.broker-name, .company-name, .broker-title', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .user-reviews', brokerDetails: { description: '.description, .summary, .overview', regulation: '.regulation, .license, .regulatory-info', spreads: '.spreads, .fees, .trading-conditions', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .positive-points', cons: '.cons, .disadvantages, .negative-points' } }, enabled: true, priority: 5 }, { name: 'BestForexBrokers', baseUrl: 'https://www.bestforexbrokers.com', brokerListUrl: '/reviews', selectors: { brokerList: '.broker-item, .review-item, .broker-card', brokerName: '.broker-name, .company-name, h2, h3', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .total-reviews', brokerDetails: { description: '.description, .summary, .overview', regulation: '.regulation, .license, .regulatory-info', spreads: '.spreads, .fees, .trading-conditions', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .positive-points', cons: '.cons, .disadvantages, .negative-points' } }, enabled: true, priority: 5 }, { name: 'ForexSignals', baseUrl: 'https://www.forexsignals.com', brokerListUrl: '/brokers', selectors: { brokerList: '.broker-item, .broker-card, .review-item', brokerName: '.broker-name, .company-name, .broker-title', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .user-reviews', brokerDetails: { description: '.description, .summary, .overview', regulation: '.regulation, .license, .regulatory-info', spreads: '.spreads, .fees, .trading-conditions', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .positive-points', cons: '.cons, .disadvantages, .negative-points' } }, enabled: true, priority: 5 }, { name: 'Currency.com', baseUrl: 'https://currency.com', brokerListUrl: '/forex-brokers', selectors: { brokerList: '.broker-item, .broker-card, .review-item', brokerName: '.broker-name, .company-name, h2, h3', brokerLink: 'a', brokerRating: '.rating, .score, .stars', brokerReviews: '.review-count, .user-reviews', brokerDetails: { description: '.description, .summary, .overview', regulation: '.regulation, .license, .regulatory-info', spreads: '.spreads, .fees, .trading-conditions', leverage: '.leverage, .margin, .trading-details', platforms: '.platforms, .trading-platform, .software', minDeposit: '.min-deposit, .minimum-amount', pros: '.pros, .advantages, .positive-points', cons: '.cons, .disadvantages, .negative-points' } }, enabled: true, priority: 5 } ]; // Top 50 forex brokers to target export const TARGET_BROKERS = [ // Tier 1 Brokers (Global Leaders) 'IG Group', 'Forex.com', 'OANDA', 'CMC Markets', 'Saxo Bank', 'Interactive Brokers', 'TD Ameritrade', 'Pepperstone', 'FxPro', 'Tickmill', // Tier 2 Brokers (Regional Leaders) 'Vantage Markets', 'Eightcap', 'Axi', 'IC Markets', 'FP Markets', 'Admiral Markets', 'HotForex', 'Exness', 'XM', 'FXTM', // Tier 3 Brokers (Specialized/Niche) 'City Index', 'ActivTrades', 'ThinkMarkets', 'HYCM', 'Moneta Markets', 'Darwinex', 'LCG', 'ETX Capital', 'Plus500', 'eToro', // Tier 4 Brokers (Emerging/Growing) 'OctaFX', 'FBS', 'InstaForex', 'Alpari', 'RoboForex', 'FreshForex', 'NordFX', 'JustForex', 'AMarkets', 'Grand Capital', // Tier 5 Brokers (Regional Specialists) 'Swissquote', 'Dukascopy', 'FXCM', 'easyMarkets', 'Markets.com', 'AvaTrade', 'EagleFX', 'BlackBull Markets', 'ACY Securities', 'Equiti' ]; export class BrokerScrapingService { private sources: ScrapingSource[]; constructor() { this.sources = SCRAPING_SOURCES.sort((a, b) => (a.priority || 99) - (b.priority || 99)); } async scrapeAllBrokers(): Promise<ScrapingResult[]> { const results: ScrapingResult[] = []; console.log(`🚀 Starting comprehensive scraping of ${TARGET_BROKERS.length} brokers from ${this.sources.length} sources`); for (const broker of TARGET_BROKERS) { console.log(`🔍 Scraping broker: ${broker}`); const brokerResult = await this.scrapeBroker(broker); results.push(brokerResult); // Add delay to avoid overwhelming servers await this.delay(2000 + Math.random() * 3000); } return results; } async scrapeBroker(brokerName: string): Promise<ScrapingResult> { const brokerData: CompleteBrokerData = { name: brokerName, slug: this.generateSlug(brokerName), country: 'Unknown', // Required field data_sources: [], created_at: new Date().toISOString(), updated_at: new Date().toISOString() }; // Sort sources by priority and scrape from highest to lowest const enabledSources = this.sources.filter(s => s.enabled); for (const source of enabledSources) { try { console.log(`🕷️ Scraping ${brokerName} from ${source.name} (Priority: ${source.priority})`); const sourceData = await this.scrapeFromSource(brokerName, source); if (sourceData) { // Merge data from different sources this.mergeBrokerData(brokerData, sourceData); // Add source info brokerData.data_sources?.push({ source_name: source.name, source_url: source.baseUrl, last_scraped: new Date().toISOString(), confidence_score: this.calculateConfidenceScore(sourceData), data_points: this.extractDataPoints(sourceData), priority: source.priority }); } } catch (error) { console.error(`❌ Error scraping ${brokerName} from ${source.name}:`, error); } // Add delay between requests to same source (longer for high priority sources) const delayTime = (source.priority || 3) <= 2 ? 1500 + Math.random() * 2000 : 1000 + Math.random() * 1500; await this.delay(delayTime); } // Calculate final scores and confidence this.calculateFinalScores(brokerData); // Add enhanced metadata brokerData.scraping_metadata = { total_sources: enabledSources.length, successful_sources: brokerData.data_sources?.length || 0, average_confidence: brokerData.data_confidence_score || 0, scraping_duration: this.calculateScrapingDuration(brokerData), data_completeness: this.calculateDataCompleteness(brokerData) }; return { success: true, broker: brokerData, source: 'enhanced_mcp', scrapedAt: new Date().toISOString() }; } private async scrapeFromSource(brokerName: string, source: ScrapingSource): Promise<Partial<CompleteBrokerData> | null> { try { // Use Firecrawl MCP for enhanced scraping if available if (this.canUseFirecrawl()) { return await this.scrapeWithFirecrawl(brokerName, source); } // Fallback to traditional web scraping return await this.scrapeWithWebFetch(brokerName, source); } catch (error) { console.error(`Error scraping from ${source.name}:`, error); return null; } } private canUseFirecrawl(): boolean { // Check if Firecrawl MCP is available return false; // Disabled for now - need proper MCP integration } private async scrapeWithFirecrawl(brokerName: string, source: ScrapingSource): Promise<Partial<CompleteBrokerData> | null> { try { // Construct search URL for the broker const searchUrl = `${source.baseUrl}${source.brokerListUrl || '/search'}?q=${encodeURIComponent(brokerName + ' forex broker')}`; console.log(`🔥 Using Firecrawl MCP for: ${searchUrl}`); // Use Firecrawl MCP for intelligent scraping (disabled for now) console.log('Firecrawl MCP integration disabled - using fallback'); return await this.scrapeWithWebFetch(brokerName, source); } catch (error) { console.error(`Firecrawl scraping failed for ${source.name}:`, error); // Fallback to traditional method return await this.scrapeWithWebFetch(brokerName, source); } } private async scrapeWithWebFetch(brokerName: string, source: ScrapingSource): Promise<Partial<CompleteBrokerData> | null> { try { // Search for broker on the source site const searchUrl = `${source.baseUrl}/search?q=${encodeURIComponent(brokerName + ' forex broker')}`; const result = await fetchWebContent(searchUrl); if (!result) return null; // Parse the result and extract structured data return this.parseScrapedData(result, source.name); } catch (error) { console.error(`WebFetch scraping failed for ${source.name}:`, error); return null; } } private parseScrapedData(content: string, sourceName: string): Partial<CompleteBrokerData> { // This is a simplified parser - in a real implementation, you'd use more sophisticated parsing try { // Try to extract JSON from the content const jsonMatch = content.match(/\{[\s\S]*\}/); if (jsonMatch) { return JSON.parse(jsonMatch[0]); } // Fallback: extract key information using regex patterns return { company_description: this.extractField(content, /description[:\s]+(.*?)(?=\n|$)/i), regulations: this.extractArray(content, /regulation[:\s]+(.*?)(?=\n|$)/i), trading_conditions: { spreads_avg: this.extractNumber(content, /spread[s]?\s*[:\s]+(\d+(?:\.\d+)?)/i), leverage_max: this.extractNumber(content, /leverage\s*[:\s]+(\d+:?\d*)/i), min_deposit: this.extractNumber(content, /min[.\s]?deposit\s*[:\s]+\$?(\d+(?:,\d+)*)/i) }, platforms: this.extractArray(content, /platform[s]?\s*[:\s]+(.*?)(?=\n|$)/i), pros: this.extractArray(content, /pros?\s*[:\s]+(.*?)(?=\n|$)/i), cons: this.extractArray(content, /cons?\s*[:\s]+(.*?)(?=\n|$)/i), source_metadata: { scraped_from: sourceName, scraped_at: new Date().toISOString(), confidence_score: this.calculateConfidenceScore({}), extraction_method: 'traditional_web_scraping' } }; } catch (error) { console.error(`Error parsing scraped data from ${sourceName}:`, error); return {}; } } private parseEnhancedScrapedData(markdown: string, sourceName: string, url: string): Partial<CompleteBrokerData> { // Enhanced parser for Firecrawl MCP markdown content try { const data: Partial<CompleteBrokerData> = {}; // Extract structured data from markdown content const lines = markdown.split('\n'); // Company description (look for paragraphs with broker-related content) const descriptionLines = lines.filter(line => line.length > 50 && (line.toLowerCase().includes('broker') || line.toLowerCase().includes('trading') || line.toLowerCase().includes('forex')) && !line.startsWith('#') && !line.startsWith('[') ); if (descriptionLines.length > 0) { data.company_description = descriptionLines[0].substring(0, 500); } // Extract regulations const regulationPatterns = [ /regulated\s+by\s+(.*?)(?=[,.]|$)/gi, /regulation[s]?\s*[:\-]?\s*(.*?)(?=\n|$)/gi, /licensed\s+by\s+(.*?)(?=[,.]|$)/gi ]; for (const pattern of regulationPatterns) { const matches = markdown.match(pattern); if (matches) { data.regulations = matches.map(match => match.replace(/regulated\s+by\s+|regulation[s]?\s*[:\-]?\s*|licensed\s+by\s+/gi, '').trim() ).slice(0, 5); break; } } // Extract trading conditions data.trading_conditions = {}; // Spreads const spreadMatch = markdown.match(/spread[s]?\s*[:\-]?\s*(\d+(?:\.\d+)?)\s*pips?/gi); if (spreadMatch) { data.trading_conditions.spreads_avg = parseFloat(spreadMatch[0].match(/(\d+(?:\.\d+)?)/)?.[1] || '0'); } // Leverage const leverageMatch = markdown.match(/leverage\s*[:\-]?\s*(\d+:?\d*|\d+)/gi); if (leverageMatch) { const leverageStr = leverageMatch[0].match(/(\d+:?\d*|\d+)/)?.[1] || '0'; data.trading_conditions.leverage_max = parseInt(leverageStr.replace(':', '')); } // Minimum deposit const depositMatch = markdown.match(/min[.\s]?\s*deposit\s*[:\-]?\s*\$?(\d+(?:,\d+)*)/gi); if (depositMatch) { data.trading_conditions.min_deposit = parseInt(depositMatch[0].match(/(\d+(?:,\d+)*)/)?.[1]?.replace(',', '') || '0'); } // Extract platforms const platformPatterns = [ /platform[s]?\s*[:\-]?\s*(.*?)(?=\n|$)/gi, /supported\s+platforms?\s*[:\-]?\s*(.*?)(?=\n|$)/gi, /trading\s+platform[s]?\s*[:\-]?\s*(.*?)(?=\n|$)/gi ]; for (const pattern of platformPatterns) { const matches = markdown.match(pattern); if (matches) { const platformsText = matches[0].replace(/platform[s]?\s*[:\-]?\s*|supported\s+platforms?\s*[:\-]?\s*|trading\s+platform[s]?\s*[:\-]?\s*/gi, ''); data.platforms = platformsText.split(/[,;\/]/).map(p => p.trim()).filter(p => p.length > 2).slice(0, 10); break; } } // Extract pros and cons const prosSection = markdown.match(/pros?\s*[:\-]?\s*([\s\S]*?)(?=cons?|\n\n#|$)/i); if (prosSection) { data.pros = prosSection[1] .split('\n') .filter(line => line.trim().startsWith('-') || line.trim().startsWith('•') || line.trim().startsWith('*')) .map(line => line.replace(/^[-•*]\s*/, '').trim()) .filter(line => line.length > 10) .slice(0, 10); } const consSection = markdown.match(/cons?\s*[:\-]?\s*([\s\S]*?)(?=pros?|\n\n#|$)/i); if (consSection) { data.cons = consSection[1] .split('\n') .filter(line => line.trim().startsWith('-') || line.trim().startsWith('•') || line.trim().startsWith('*')) .map(line => line.replace(/^[-•*]\s*/, '').trim()) .filter(line => line.length > 10) .slice(0, 10); } // Enhanced metadata data.source_metadata = { scraped_from: sourceName, scraped_at: new Date().toISOString(), scraped_url: url, content_length: markdown.length, confidence_score: this.calculateConfidenceScore(data), extraction_method: 'firecrawl_mcp_enhanced', data_points: this.extractDataPoints(data) }; return data; } catch (error) { console.error(`Error parsing enhanced scraped data from ${sourceName}:`, error); return { source_metadata: { scraped_from: sourceName, scraped_at: new Date().toISOString(), scraped_url: url, confidence_score: 0, extraction_method: 'firecrawl_mcp_enhanced', error: error instanceof Error ? error.message : 'Unknown error' } }; } } private extractField(content: string, pattern: RegExp): string | undefined { const match = content.match(pattern); return match ? match[1].trim() : undefined; } private extractNumber(content: string, pattern: RegExp): number | undefined { const match = content.match(pattern); return match ? parseFloat(match[1].replace(',', '')) : undefined; } private extractArray(content: string, pattern: RegExp): string[] | undefined { const match = content.match(pattern); return match ? match[1].split(',').map(item => item.trim()).filter(item => item) : undefined; } private mergeBrokerData(target: CompleteBrokerData, source: Partial<CompleteBrokerData>): void { // Merge arrays and prefer more complete data if (source.regulations && (!target.regulations || source.regulations.length > target.regulations.length)) { target.regulations = source.regulations; } if (source.platforms && (!target.platforms || source.platforms.length > target.platforms.length)) { target.platforms = source.platforms; } if (source.pros && (!target.pros || source.pros.length > target.pros.length)) { target.pros = source.pros; } if (source.cons && (!target.cons || source.cons.length > target.cons.length)) { target.cons = source.cons; } // Merge trading conditions if (source.trading_conditions) { target.trading_conditions = { ...target.trading_conditions, ...source.trading_conditions }; } // Merge other fields Object.assign(target, source); } private calculateConfidenceScore(data: Partial<CompleteBrokerData>): number { let score = 0; let totalFields = 0; // Check key fields const fields = [ 'company_description', 'regulations', 'trading_conditions', 'platforms', 'min_deposit', 'spreads_avg', 'leverage_max' ]; fields.forEach(field => { totalFields++; if (data[field as keyof CompleteBrokerData]) { score += 1; } }); return totalFields > 0 ? Math.round((score / totalFields) * 100) : 0; } private extractDataPoints(data: Partial<CompleteBrokerData>): string[] { const points: string[] = []; if (data.company_description) points.push('description'); if (data.regulations) points.push('regulation'); if (data.trading_conditions) points.push('trading_conditions'); if (data.platforms) points.push('platforms'); if (data.pros) points.push('pros'); if (data.cons) points.push('cons'); return points; } private calculateFinalScores(data: CompleteBrokerData): void { // Calculate scores based on available data const scores = { trading_conditions_score: this.calculateTradingConditionsScore(data), platforms_score: this.calculatePlatformsScore(data), customer_support_score: this.calculateCustomerSupportScore(data), education_score: this.calculateEducationScore(data), trust_and_safety_score: this.calculateTrustScore(data), value_for_money_score: this.calculateValueScore(data) }; Object.assign(data, scores); // Calculate overall confidence score const sourceScores = data.data_sources?.map((s: any) => s.confidence_score || 0) || []; data.data_confidence_score = sourceScores.length > 0 ? Math.round(sourceScores.reduce((a: number, b: number) => a + b, 0) / sourceScores.length) : 0; } private calculateTradingConditionsScore(data: CompleteBrokerData): number { let score = 0; if (data.trading_conditions?.min_deposit && data.trading_conditions.min_deposit <= 100) score += 20; if (data.trading_conditions?.spreads_avg && data.trading_conditions.spreads_avg <= 1.0) score += 20; if (data.trading_conditions?.leverage_max && parseInt(data.trading_conditions.leverage_max) >= 500) score += 15; if (data.trading_conditions?.hedging_allowed) score += 15; if (data.trading_conditions?.scalping_allowed) score += 15; if (data.trading_conditions?.expert_advisors_allowed) score += 15; return Math.min(score, 100); } private calculatePlatformsScore(data: CompleteBrokerData): number { let score = 0; if (data.trading_platforms && data.trading_platforms.length > 0) score += 25; if (data.mobile_trading_apps && data.mobile_trading_apps.length > 0) score += 25; if (data.web_trading_platforms && data.web_trading_platforms.length > 0) score += 25; if (data.api_trading?.available) score += 25; return Math.min(score, 100); } private calculateCustomerSupportScore(data: CompleteBrokerData): number { let score = 0; if (data.support_channels && data.support_channels.length > 0) score += 25; if (data.support_languages && data.support_languages.length > 1) score += 25; if (data.support_availability === '24/5' || data.support_availability === '24/7') score += 25; if (data.support_quality_rating && data.support_quality_rating >= 4) score += 25; return Math.min(score, 100); } private calculateEducationScore(data: CompleteBrokerData): number { let score = 0; if (data.educational_materials && data.educational_materials.length > 0) score += 25; if (data.market_analysis?.daily_analysis) score += 25; if (data.trading_tools?.calculators && data.trading_tools.calculators.length > 0) score += 25; if (data.webinar_count && data.webinar_count > 0) score += 25; return Math.min(score, 100); } private calculateTrustScore(data: CompleteBrokerData): number { let score = 0; if (data.regulation_tier === 'tier1') score += 40; else if (data.regulation_tier === 'tier2') score += 30; else if (data.regulation_tier === 'tier3') score += 20; if (data.regulations && data.regulations.length > 0) score += 20; if (data.established_year && data.established_year < 2010) score += 20; if (data.negative_balance_protection) score += 20; return Math.min(score, 100); } private calculateValueScore(data: CompleteBrokerData): number { let score = 0; if (data.trading_conditions?.min_deposit && data.trading_conditions.min_deposit <= 100) score += 25; if (data.trading_conditions?.spreads_avg && data.trading_conditions.spreads_avg <= 1.0) score += 25; if (data.inactivity_fees === undefined || data.inactivity_fees === null) score += 25; if (data.swap_free) score += 25; return Math.min(score, 100); } private generateSlug(name: string): string { return name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, ''); } private delay(ms: number): Promise<void> { return new Promise(resolve => setTimeout(resolve, ms)); } private calculateScrapingDuration(_data: CompleteBrokerData): string { // Placeholder implementation return '0s'; } private calculateDataCompleteness(_data: CompleteBrokerData): number { // Calculate percentage of data completeness let completeness = 0; let totalFields = 0; const fields = [ 'name', 'slug', 'country', 'company_description', 'regulations', 'trading_conditions', 'platforms', 'min_deposit', 'spreads_avg', 'leverage_max', 'pros', 'cons', 'data_sources' ]; fields.forEach(field => { totalFields++; if (_data[field as keyof CompleteBrokerData]) { completeness++; } }); return totalFields > 0 ? Math.round((completeness / totalFields) * 100) : 0; } async saveBrokerData(brokerData: CompleteBrokerData): Promise<boolean> { try { // Check if broker already exists const { data: existingBroker } = await supabase .from('brokers') .select('id') .eq('slug', brokerData.slug) .single(); if (existingBroker) { // Update existing broker const { error } = await supabase .from('brokers') .update({ ...brokerData, updated_at: new Date().toISOString() }) .eq('id', existingBroker.id); if (error) { console.error('Error updating broker:', error); return false; } } else { // Insert new broker const { error } = await supabase .from('brokers') .insert([brokerData]); if (error) { console.error('Error inserting broker:', error); return false; } } // Save external reviews if (brokerData.data_sources) { for (const source of brokerData.data_sources) { await this.saveExternalReview(brokerData.slug, source); } } return true; } catch (error) { console.error('Error saving broker data:', error); return false; } } private async saveExternalReview(brokerSlug: string, source: any): Promise<void> { try { // Get broker ID const { data: broker } = await supabase .from('brokers') .select('id') .eq('slug', brokerSlug) .single(); if (!broker) return; const reviewData = { broker_id: broker.id, source_name: source.source_name, source_url: source.source_url, rating: 0, // Will be calculated based on data quality review_count: 0, review_text: `Data scraped from ${source.source_name}`, review_date: new Date().toISOString(), data_confidence: source.confidence_score || 0 }; await supabase .from('broker_external_reviews') .upsert([reviewData], { onConflict: 'broker_id,source_name' }); } catch (error) { console.error('Error saving external review:', error); } } } // Singleton instance export const brokerScrapingService = new BrokerScrapingService();