// Simple web fetch utility for scraping export async function fetchWebContent(url: string, options?: RequestInit): Promise<string> { try { const response = await fetch(url, { headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'Accept-Language': 'en-US,en;q=0.5', 'Accept-Encoding': 'gzip, deflate', 'DNT': '1', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', }, ...options }); if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } return await response.text(); } catch (error) { console.error('Error fetching web content:', error); throw error; } } export async function webFetchWithPrompt(url: string, prompt: string): Promise<string> { try { const content = await fetchWebContent(url); // In a real implementation, you would use an AI service to process the content // For now, we'll return the raw content return content; } catch (error) { console.error('Error in webFetchWithPrompt:', error); throw error; } }