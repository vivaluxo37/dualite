import { z } from 'zod'; // Email validation schema export const emailSchema = z.string() .email('Please enter a valid email address') .min(5, 'Email must be at least 5 characters') .max(100, 'Email must be less than 100 characters'); // Password validation schema export const passwordSchema = z.string() .min(8, 'Password must be at least 8 characters') .max(100, 'Password must be less than 100 characters') .regex(/[A-Z]/, 'Password must contain at least one uppercase letter') .regex(/[a-z]/, 'Password must contain at least one lowercase letter') .regex(/[0-9]/, 'Password must contain at least one number') .regex(/[^A-Za-z0-9]/, 'Password must contain at least one special character'); // Display name validation export const displayNameSchema = z.string() .min(2, 'Display name must be at least 2 characters') .max(50, 'Display name must be less than 50 characters') .regex(/^[a-zA-Z0-9\s\-_]+$/, 'Display name can only contain letters, numbers, spaces, hyphens, and underscores'); // User registration schema export const registerSchema = z.object({ email: emailSchema, password: passwordSchema, displayName: displayNameSchema, }); // User login schema export const loginSchema = z.object({ email: emailSchema, password: z.string().min(1, 'Password is required'), }); // Broker validation schemas export const brokerSchema = z.object({ name: z.string().min(1, 'Broker name is required').max(100, 'Broker name too long'), country: z.string().min(1, 'Country is required').max(50, 'Country name too long'), websiteUrl: z.string().url('Please enter a valid URL').optional().nullable(), description: z.string().max(1000, 'Description too long').optional().nullable(), spreadsAvg: z.number().min(0, 'Average spread must be positive'), minDeposit: z.number().min(0, 'Minimum deposit must be positive'), maxLeverage: z.string().optional().nullable(), platforms: z.array(z.string()).optional(), regulations: z.array(z.string()).optional(), trustScore: z.number().min(0).max(100), avgRating: z.number().min(0).max(5), reviewCount: z.number().min(0), }); // Review validation schema export const reviewSchema = z.object({ brokerId: z.string().min(1, 'Broker ID is required'), rating: z.number().min(1).max(5, 'Rating must be between 1 and 5'), title: z.string().min(1, 'Review title is required').max(100, 'Title too long'), content: z.string().min(10, 'Review content must be at least 10 characters').max(2000, 'Content too long'), pros: z.array(z.string()).optional(), cons: z.array(z.string()).optional(), tradingExperience: z.enum(['beginner', 'intermediate', 'advanced']).optional(), accountType: z.enum(['demo', 'live', 'both']).optional(), }); // Contact form schema export const contactSchema = z.object({ name: z.string().min(2, 'Name is required').max(50, 'Name too long'), email: emailSchema, subject: z.string().min(1, 'Subject is required').max(100, 'Subject too long'), message: z.string().min(10, 'Message is required').max(1000, 'Message too long'), }); // Search query validation export const searchSchema = z.object({ query: z.string().min(1, 'Search query is required').max(100, 'Query too long'), filters: z.object({ country: z.string().optional(), minRating: z.number().min(0).max(5).optional(), maxLeverage: z.string().optional(), platforms: z.array(z.string()).optional(), }).optional(), page: z.number().min(1).optional(), limit: z.number().min(1).max(50).optional(), }); // Utility functions export const validateEmail = (email: string): { isValid: boolean; error?: string } => { try { emailSchema.parse(email); return { isValid: true }; } catch (error) { if (error instanceof z.ZodError) { return { isValid: false, error: error.errors[0].message }; } return { isValid: false, error: 'Invalid email format' }; } }; export const validatePassword = (password: string): { isValid: boolean; errors: string[] } => { try { passwordSchema.parse(password); return { isValid: true, errors: [] }; } catch (error) { if (error instanceof z.ZodError) { return { isValid: false, errors: error.errors.map(err => err.message) }; } return { isValid: false, errors: ['Invalid password format'] }; } }; export const sanitizeInput = (input: string): string => { // Remove potentially dangerous characters while preserving basic formatting return input .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '') .replace(/javascript:/gi, '') .replace(/on\w+\s*=/gi, '') .trim(); }; // Type exports export type RegisterData = z.infer<typeof registerSchema>; export type LoginData = z.infer<typeof loginSchema>; export type BrokerData = z.infer<typeof brokerSchema>; export type ReviewData = z.infer<typeof reviewSchema>; export type ContactData = z.infer<typeof contactSchema>; export type SearchData = z.infer<typeof searchSchema>;