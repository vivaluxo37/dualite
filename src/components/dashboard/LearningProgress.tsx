import React, { useState } from 'react'; import { useQuery } from '@tanstack/react-query'; import { supabase } from '../../lib/supabase'; import { useClerkAuthContext } from '../../contexts/ClerkAuthContext'; import { Card, CardContent } from '../ui/card'; import { Progress } from '../ui/progress'; import { Button } from '../ui/button'; import { Badge } from '../ui/badge'; import { BookOpen, Trophy, Clock, CheckCircle, PlayCircle, RotateCcw } from 'lucide-react'; import { Skeleton } from '../ui/skeleton'; import { Alert, AlertDescription } from '../ui/alert'; interface LearningModule { id: string; title: string; description: string; difficulty: 'beginner' | 'intermediate' | 'advanced'; estimated_duration: number; total_lessons: number; category: string; created_at: string; } interface UserProgress { id: string; user_id: string; module_id: string; completed_lessons: number; total_score: number; completed_at: string | null; last_accessed: string; learning_modules: LearningModule; } interface LearningStats { totalModules: number; completedModules: number; totalLessons: number; completedLessons: number; averageScore: number; totalHours: number; } const LearningProgress: React.FC = () => { const { userId } = useClerkAuthContext(); const [selectedCategory, setSelectedCategory] = useState<string>('all'); // Fetch user progress data const { data: progressData, isLoading: progressLoading, error: progressError } = useQuery({ queryKey: ['user-progress', userId], queryFn: async () => { if (!userId) throw new Error('User not authenticated'); const { data, error } = await supabase .from('user_progress') .select(` *, learning_modules ( id, title, description, difficulty, estimated_duration, total_lessons, category, created_at ) `) .eq('user_id', userId) .order('last_accessed', { ascending: false }); if (error) throw error; return data as UserProgress[]; }, enabled: !!userId, staleTime: 5 * 60 * 1000, // 5 minutes gcTime: 10 * 60 * 1000, // 10 minutes }); // Calculate learning statistics const learningStats: LearningStats = React.useMemo(() => { if (!progressData) { return { totalModules: 0, completedModules: 0, totalLessons: 0, completedLessons: 0, averageScore: 0, totalHours: 0, }; } const totalModules = progressData.length; const completedModules = progressData.filter(p => p.completed_at).length; const totalLessons = progressData.reduce((sum, p) => sum + p.learning_modules.total_lessons, 0); const completedLessons = progressData.reduce((sum, p) => sum + p.completed_lessons, 0); const averageScore = progressData.length > 0 ? progressData.reduce((sum, p) => sum + p.total_score, 0) / progressData.length : 0; const totalHours = progressData.reduce((sum, p) => { const progress = p.completed_lessons / p.learning_modules.total_lessons; return sum + (p.learning_modules.estimated_duration * progress); }, 0); return { totalModules, completedModules, totalLessons, completedLessons, averageScore, totalHours, }; }, [progressData]); // Filter progress data by category const filteredProgress = React.useMemo(() => { if (!progressData) return []; if (selectedCategory === 'all') return progressData; return progressData.filter(p => p.learning_modules.category === selectedCategory); }, [progressData, selectedCategory]); // Get unique categories const categories = React.useMemo(() => { if (!progressData) return []; const cats = [...new Set(progressData.map(p => p.learning_modules.category))]; return cats.sort(); }, [progressData]); const getDifficultyColor = (difficulty: string) => { switch (difficulty) { case 'beginner': return 'bg-green-100 text-green-800'; case 'intermediate': return 'bg-yellow-100 text-yellow-800'; case 'advanced': return 'bg-red-100 text-red-800'; default: return 'bg-gray-100 text-gray-800'; } }; const getProgressPercentage = (completed: number, total: number) => { return total > 0 ? Math.round((completed / total) * 100) : 0; }; const formatDuration = (hours: number) => { if (hours < 1) return `${Math.round(hours * 60)}m`; return `${Math.round(hours * 10) / 10}h`; }; if (progressLoading) { return ( <div className="space-y-6"> {/* Stats Skeleton */} <div className="grid grid-cols-1 md:grid-cols-4 gap-4"> {[...Array(4)].map((_, i) => ( <Card key={i}> <CardContent className="p-6"> <Skeleton className="h-4 w-20 mb-2" /> <Skeleton className="h-8 w-16 mb-1" /> <Skeleton className="h-3 w-24" /> </CardContent> </Card> ))} </div> {/* Progress Items Skeleton */} <div className="space-y-4"> {[...Array(3)].map((_, i) => ( <Card key={i}> <CardContent className="p-6"> <Skeleton className="h-6 w-48 mb-2" /> <Skeleton className="h-4 w-full mb-4" /> <Skeleton className="h-2 w-full mb-2" /> <Skeleton className="h-4 w-32" /> </CardContent> </Card> ))} </div> </div> ); } if (progressError) { return ( <Alert> <AlertDescription> Failed to load learning progress. Please try again later. </AlertDescription> </Alert> ); } return ( <div className="space-y-6"> {/* Learning Statistics */} <div className="grid grid-cols-1 md:grid-cols-4 gap-4"> <Card> <CardContent className="p-6"> <div className="flex items-center space-x-2"> <BookOpen className="h-5 w-5 text-blue-600" /> <span className="text-sm font-medium text-gray-600">Modules</span> </div> <div className="mt-2"> <div className="text-2xl font-bold">{learningStats.completedModules}/{learningStats.totalModules}</div> <p className="text-xs text-gray-500">Completed</p> </div> </CardContent> </Card> <Card> <CardContent className="p-6"> <div className="flex items-center space-x-2"> <CheckCircle className="h-5 w-5 text-green-600" /> <span className="text-sm font-medium text-gray-600">Lessons</span> </div> <div className="mt-2"> <div className="text-2xl font-bold">{learningStats.completedLessons}/{learningStats.totalLessons}</div> <p className="text-xs text-gray-500">Completed</p> </div> </CardContent> </Card> <Card> <CardContent className="p-6"> <div className="flex items-center space-x-2"> <Trophy className="h-5 w-5 text-yellow-600" /> <span className="text-sm font-medium text-gray-600">Avg Score</span> </div> <div className="mt-2"> <div className="text-2xl font-bold">{Math.round(learningStats.averageScore)}%</div> <p className="text-xs text-gray-500">Overall</p> </div> </CardContent> </Card> <Card> <CardContent className="p-6"> <div className="flex items-center space-x-2"> <Clock className="h-5 w-5 text-purple-600" /> <span className="text-sm font-medium text-gray-600">Time Spent</span> </div> <div className="mt-2"> <div className="text-2xl font-bold">{formatDuration(learningStats.totalHours)}</div> <p className="text-xs text-gray-500">Learning</p> </div> </CardContent> </Card> </div> {/* Category Filter */} {categories.length > 0 && ( <div className="flex flex-wrap gap-2"> <Button variant={selectedCategory === 'all' ? 'default' : 'outline'} size="sm" onClick={() => setSelectedCategory('all')} > All Categories </Button> {categories.map((category) => ( <Button key={category} variant={selectedCategory === category ? 'default' : 'outline'} size="sm" onClick={() => setSelectedCategory(category)} > {category} </Button> ))} </div> )} {/* Progress List */} <div className="space-y-4"> {filteredProgress.length === 0 ? ( <Card> <CardContent className="p-8 text-center"> <BookOpen className="h-12 w-12 text-gray-400 mx-auto mb-4" /> <h3 className="text-lg font-medium text-gray-900 mb-2">No Learning Progress</h3> <p className="text-gray-500 mb-4"> Start your learning journey by enrolling in courses from our Learning Hub. </p> <Button> Browse Courses </Button> </CardContent> </Card> ) : ( filteredProgress.map((progress) => { const progressPercentage = getProgressPercentage( progress.completed_lessons, progress.learning_modules.total_lessons ); const isCompleted = !!progress.completed_at; const estimatedTimeLeft = progress.learning_modules.estimated_duration * ((progress.learning_modules.total_lessons - progress.completed_lessons) / progress.learning_modules.total_lessons); return ( <Card key={progress.id} className="hover:shadow-md transition-shadow"> <CardContent className="p-6"> <div className="flex items-start justify-between mb-4"> <div className="flex-1"> <div className="flex items-center space-x-2 mb-2"> <h3 className="text-lg font-semibold">{progress.learning_modules.title}</h3> <Badge className={getDifficultyColor(progress.learning_modules.difficulty)}> {progress.learning_modules.difficulty} </Badge> {isCompleted && ( <Badge className="bg-green-100 text-green-800"> <CheckCircle className="h-3 w-3 mr-1" /> Completed </Badge> )} </div> <p className="text-gray-600 text-sm mb-3">{progress.learning_modules.description}</p> <div className="space-y-2"> <div className="flex items-center justify-between text-sm"> <span>Progress: {progress.completed_lessons}/{progress.learning_modules.total_lessons} lessons</span> <span className="font-medium">{progressPercentage}%</span> </div> <Progress value={progressPercentage} className="h-2" /> <div className="flex items-center justify-between text-xs text-gray-500"> <span>Score: {progress.total_score}%</span> {!isCompleted && estimatedTimeLeft > 0 && ( <span>{formatDuration(estimatedTimeLeft)} remaining</span> )} </div> </div> </div> </div> <div className="flex items-center justify-between"> <div className="text-xs text-gray-500"> Last accessed: {new Date(progress.last_accessed).toLocaleDateString()} </div> <div className="flex space-x-2"> {isCompleted ? ( <Button size="sm" variant="outline"> <RotateCcw className="h-4 w-4 mr-1" /> Review </Button> ) : ( <Button size="sm"> <PlayCircle className="h-4 w-4 mr-1" /> Continue </Button> )} </div> </div> </CardContent> </Card> ); }) )} </div> </div> ); }; export default LearningProgress;