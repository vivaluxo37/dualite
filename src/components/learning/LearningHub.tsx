import React, { useState } from 'react'; import { useQuery } from '@tanstack/react-query'; import { supabase } from '@/lib/supabase'; import { useClerkAuthContext } from '@/contexts/ClerkAuthContext'; import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import { Button } from '@/components/ui/button'; import { Badge } from '@/components/ui/badge'; import { Progress } from '@/components/ui/progress'; import { Input } from '@/components/ui/input'; import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'; import { BookOpen, Clock, Star, PlayCircle, CheckCircle, Search, Filter, Target, TrendingUp, Award, Users, Calendar } from 'lucide-react'; import { Link } from 'react-router-dom'; interface LearningModule { id: string; title: string; description: string; difficulty: 'beginner' | 'intermediate' | 'advanced'; estimated_duration: number; total_lessons: number; category: string; is_published: boolean; created_at: string; content: { lessons: Array<{ title: string; duration: number; }>; }; prerequisites: string[]; tags: string[]; } interface UserProgress { id: string; user_id: string; module_id: string; completed_lessons: number; total_score: number; completed_at: string | null; last_accessed: string; progress_data: Record<string, any>; } export const LearningHub: React.FC = () => { const { userId } = useClerkAuthContext(); const [searchTerm, setSearchTerm] = useState(''); const [selectedCategory, setSelectedCategory] = useState('all'); const [selectedDifficulty, setSelectedDifficulty] = useState('all'); const [learningTab, setLearningTab] = useState('all'); // Fetch learning modules const { data: modules, isLoading: modulesLoading } = useQuery({ queryKey: ['learning-modules'], queryFn: async () => { const { data, error } = await supabase .from('learning_modules') .select('*') .eq('is_published', true) .order('created_at', { ascending: false }); if (error) throw error; return data as LearningModule[]; }, }); // Fetch user progress const { data: userProgress } = useQuery({ queryKey: ['user-progress', userId], queryFn: async () => { if (!userId) return []; const { data, error } = await supabase .from('user_progress') .select('*') .eq('user_id', userId); if (error) throw error; return data as UserProgress[]; }, enabled: !!userId, }); const getDifficultyColor = (difficulty: string) => { switch (difficulty) { case 'beginner': return 'bg-green-100 text-green-800'; case 'intermediate': return 'bg-yellow-100 text-yellow-800'; case 'advanced': return 'bg-red-100 text-red-800'; default: return 'bg-gray-100 text-gray-800'; } }; const getProgressForModule = (moduleId: string) => { if (!userProgress) return null; return userProgress.find(p => p.module_id === moduleId); }; const getProgressPercentage = (completed: number, total: number) => { return total > 0 ? Math.round((completed / total) * 100) : 0; }; const formatDuration = (minutes: number) => { if (minutes < 60) return `${minutes}m`; return `${Math.round(minutes / 60 * 10) / 10}h`; }; // Filter modules const filteredModules = React.useMemo(() => { if (!modules) return []; return modules.filter(module => { const matchesSearch = module.title.toLowerCase().includes(searchTerm.toLowerCase()) || module.description.toLowerCase().includes(searchTerm.toLowerCase()); const matchesCategory = selectedCategory === 'all' || module.category === selectedCategory; const matchesDifficulty = selectedDifficulty === 'all' || module.difficulty === selectedDifficulty; return matchesSearch && matchesCategory && matchesDifficulty; }); }, [modules, searchTerm, selectedCategory, selectedDifficulty]); // Get unique categories const categories = React.useMemo(() => { if (!modules) return []; return [...new Set(modules.map(m => m.category))]; }, [modules]); // Group modules by category const modulesByCategory = React.useMemo(() => { return filteredModules.reduce((acc, module) => { if (!acc[module.category]) { acc[module.category] = []; } acc[module.category].push(module); return acc; }, {} as Record<string, LearningModule[]>); }, [filteredModules]); // Stats const totalModules = modules?.length || 0; const completedModules = userProgress?.filter(p => p.completed_at).length || 0; const totalLessons = modules?.reduce((sum, m) => sum + m.total_lessons, 0) || 0; const completedLessons = userProgress?.reduce((sum, p) => sum + p.completed_lessons, 0) || 0; if (modulesLoading) { return ( <div className="space-y-6"> <div className="grid grid-cols-1 md:grid-cols-4 gap-4"> {[...Array(4)].map((_, i) => ( <Card key={i}> <CardContent className="p-6"> <div className="h-4 bg-gray-200 rounded w-20 mb-2"></div> <div className="h-8 bg-gray-200 rounded w-16 mb-1"></div> <div className="h-3 bg-gray-200 rounded w-24"></div> </CardContent> </Card> ))} </div> </div> ); } return ( <div className="space-y-6"> {/* Header */} <div className="text-center"> <h1 className="text-4xl font-bold mb-4">Learning Hub</h1> <p className="text-xl text-muted-foreground mb-8"> Master forex trading with our comprehensive courses and tutorials </p> </div> {/* Stats Overview */} <div className="grid grid-cols-1 md:grid-cols-4 gap-4"> <Card> <CardContent className="p-6"> <div className="flex items-center space-x-2"> <BookOpen className="h-5 w-5 text-blue-600" /> <span className="text-sm font-medium text-gray-600">Total Courses</span> </div> <div className="mt-2"> <div className="text-2xl font-bold">{totalModules}</div> <p className="text-xs text-gray-500">Available</p> </div> </CardContent> </Card> <Card> <CardContent className="p-6"> <div className="flex items-center space-x-2"> <CheckCircle className="h-5 w-5 text-green-600" /> <span className="text-sm font-medium text-gray-600">Completed</span> </div> <div className="mt-2"> <div className="text-2xl font-bold">{completedModules}</div> <p className="text-xs text-gray-500">Courses</p> </div> </CardContent> </Card> <Card> <CardContent className="p-6"> <div className="flex items-center space-x-2"> <Target className="h-5 w-5 text-purple-600" /> <span className="text-sm font-medium text-gray-600">Lessons</span> </div> <div className="mt-2"> <div className="text-2xl font-bold">{completedLessons}/{totalLessons}</div> <p className="text-xs text-gray-500">Completed</p> </div> </CardContent> </Card> <Card> <CardContent className="p-6"> <div className="flex items-center space-x-2"> <Clock className="h-5 w-5 text-yellow-600" /> <span className="text-sm font-medium text-gray-600">Time Saved</span> </div> <div className="mt-2"> <div className="text-2xl font-bold"> {formatDuration(completedLessons * 15)} {/* Assuming 15 min per lesson */} </div> <p className="text-xs text-gray-500">Learning</p> </div> </CardContent> </Card> </div> {/* Search and Filters */} <Card> <CardContent className="p-6"> <div className="flex flex-col md:flex-row gap-4"> <div className="flex-1"> <div className="relative"> <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" /> <Input placeholder="Search courses..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="pl-10" /> </div> </div> <div className="flex gap-2"> <select className="px-3 py-2 border rounded-md" value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)} > <option value="all">All Categories</option> {categories.map(category => ( <option key={category} value={category}>{category}</option> ))} </select> <select className="px-3 py-2 border rounded-md" value={selectedDifficulty} onChange={(e) => setSelectedDifficulty(e.target.value)} > <option value="all">All Levels</option> <option value="beginner">Beginner</option> <option value="intermediate">Intermediate</option> <option value="advanced">Advanced</option> </select> </div> </div> </CardContent> </Card> {/* Learning Paths */} <Card> <CardHeader> <CardTitle>Recommended Learning Paths</CardTitle> <CardDescription>Follow our curated learning paths based on your experience level</CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Card className="border-green-200"> <CardContent className="p-4"> <div className="flex items-center space-x-2 mb-2"> <Star className="h-5 w-5 text-green-600" /> <h3 className="font-semibold">Beginner Path</h3> </div> <p className="text-sm text-gray-600 mb-3">Start your forex trading journey</p> <div className="space-y-1 text-xs text-gray-500"> <div>• Forex Trading Basics</div> <div>• Technical Analysis Fundamentals</div> <div>• Risk Management Strategies</div> </div> <Button className="w-full mt-3" size="sm"> Start Learning </Button> </CardContent> </Card> <Card className="border-yellow-200"> <CardContent className="p-4"> <div className="flex items-center space-x-2 mb-2"> <TrendingUp className="h-5 w-5 text-yellow-600" /> <h3 className="font-semibold">Intermediate Path</h3> </div> <p className="text-sm text-gray-600 mb-3">Advance your trading skills</p> <div className="space-y-1 text-xs text-gray-500"> <div>• Advanced Technical Analysis</div> <div>• Trading Psychology</div> <div>• Market Analysis</div> </div> <Button className="w-full mt-3" size="sm" variant="outline"> Continue Path </Button> </CardContent> </Card> <Card className="border-red-200"> <CardContent className="p-4"> <div className="flex items-center space-x-2 mb-2"> <Award className="h-5 w-5 text-red-600" /> <h3 className="font-semibold">Advanced Path</h3> </div> <p className="text-sm text-gray-600 mb-3">Master professional trading</p> <div className="space-y-1 text-xs text-gray-500"> <div>• Advanced Trading Strategies</div> <div>• Algorithmic Trading</div> <div>• Portfolio Management</div> </div> <Button className="w-full mt-3" size="sm" variant="outline"> Unlock Path </Button> </CardContent> </Card> </div> </CardContent> </Card> {/* Course Categories */} <Tabs value={learningTab} onValueChange={setLearningTab} className="w-full"> <TabsList className="grid w-full grid-cols-4"> <TabsTrigger value="all">All Courses</TabsTrigger> <TabsTrigger value="beginner">Beginner</TabsTrigger> <TabsTrigger value="intermediate">Intermediate</TabsTrigger> <TabsTrigger value="advanced">Advanced</TabsTrigger> </TabsList> <TabsContent value="all" className="space-y-6"> {Object.entries(modulesByCategory).map(([category, categoryModules]) => ( <div key={category}> <h2 className="text-2xl font-bold mb-4">{category}</h2> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {categoryModules.map((module) => { const progress = getProgressForModule(module.id); const progressPercentage = progress ? getProgressPercentage(progress.completed_lessons, module.total_lessons) : 0; const isCompleted = progress?.completed_at; return ( <Card key={module.id} className="hover:shadow-lg transition-shadow"> <CardHeader> <div className="flex items-center justify-between mb-2"> <Badge className={getDifficultyColor(module.difficulty)}> {module.difficulty} </Badge> {isCompleted && ( <Badge className="bg-green-100 text-green-800"> <CheckCircle className="h-3 w-3 mr-1" /> Completed </Badge> )} </div> <CardTitle className="text-lg">{module.title}</CardTitle> <CardDescription>{module.description}</CardDescription> </CardHeader> <CardContent> <div className="space-y-4"> <div className="flex items-center justify-between text-sm text-gray-500"> <div className="flex items-center space-x-1"> <Clock className="h-4 w-4" /> <span>{formatDuration(module.estimated_duration)}</span> </div> <div className="flex items-center space-x-1"> <BookOpen className="h-4 w-4" /> <span>{module.total_lessons} lessons</span> </div> </div> {progressPercentage > 0 && ( <div className="space-y-2"> <div className="flex items-center justify-between text-sm"> <span>Progress</span> <span className="font-medium">{progressPercentage}%</span> </div> <Progress value={progressPercentage} className="h-2" /> </div> )} <div className="flex flex-wrap gap-1"> {module.tags.slice(0, 3).map(tag => ( <Badge key={tag} variant="outline" className="text-xs"> {tag} </Badge> ))} </div> <Button className="w-full" size="sm"> {isCompleted ? ( <> <CheckCircle className="h-4 w-4 mr-2" /> Review Course </> ) : progressPercentage > 0 ? ( <> <PlayCircle className="h-4 w-4 mr-2" /> Continue ({progressPercentage}%) </> ) : ( <> <PlayCircle className="h-4 w-4 mr-2" /> Start Learning </> )} </Button> </div> </CardContent> </Card> ); })} </div> </div> ))} </TabsContent> <TabsContent value="beginner" className="space-y-6"> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {filteredModules .filter(m => m.difficulty === 'beginner') .map((module) => { const progress = getProgressForModule(module.id); const progressPercentage = progress ? getProgressPercentage(progress.completed_lessons, module.total_lessons) : 0; const isCompleted = progress?.completed_at; return ( <Card key={module.id} className="hover:shadow-lg transition-shadow"> <CardHeader> <div className="flex items-center justify-between mb-2"> <Badge className={getDifficultyColor(module.difficulty)}> {module.difficulty} </Badge> {isCompleted && ( <Badge className="bg-green-100 text-green-800"> <CheckCircle className="h-3 w-3 mr-1" /> Completed </Badge> )} </div> <CardTitle className="text-lg">{module.title}</CardTitle> <CardDescription>{module.description}</CardDescription> </CardHeader> <CardContent> <div className="space-y-4"> <div className="flex items-center justify-between text-sm text-gray-500"> <div className="flex items-center space-x-1"> <Clock className="h-4 w-4" /> <span>{formatDuration(module.estimated_duration)}</span> </div> <div className="flex items-center space-x-1"> <BookOpen className="h-4 w-4" /> <span>{module.total_lessons} lessons</span> </div> </div> {progressPercentage > 0 && ( <div className="space-y-2"> <div className="flex items-center justify-between text-sm"> <span>Progress</span> <span className="font-medium">{progressPercentage}%</span> </div> <Progress value={progressPercentage} className="h-2" /> </div> )} <Button className="w-full" size="sm"> {isCompleted ? ( <> <CheckCircle className="h-4 w-4 mr-2" /> Review Course </> ) : progressPercentage > 0 ? ( <> <PlayCircle className="h-4 w-4 mr-2" /> Continue ({progressPercentage}%) </> ) : ( <> <PlayCircle className="h-4 w-4 mr-2" /> Start Learning </> )} </Button> </div> </CardContent> </Card> ); })} </div> </TabsContent> <TabsContent value="intermediate" className="space-y-6"> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {filteredModules .filter(m => m.difficulty === 'intermediate') .map((module) => { const progress = getProgressForModule(module.id); const progressPercentage = progress ? getProgressPercentage(progress.completed_lessons, module.total_lessons) : 0; const isCompleted = progress?.completed_at; return ( <Card key={module.id} className="hover:shadow-lg transition-shadow"> <CardHeader> <div className="flex items-center justify-between mb-2"> <Badge className={getDifficultyColor(module.difficulty)}> {module.difficulty} </Badge> {isCompleted && ( <Badge className="bg-green-100 text-green-800"> <CheckCircle className="h-3 w-3 mr-1" /> Completed </Badge> )} </div> <CardTitle className="text-lg">{module.title}</CardTitle> <CardDescription>{module.description}</CardDescription> </CardHeader> <CardContent> <div className="space-y-4"> <div className="flex items-center justify-between text-sm text-gray-500"> <div className="flex items-center space-x-1"> <Clock className="h-4 w-4" /> <span>{formatDuration(module.estimated_duration)}</span> </div> <div className="flex items-center space-x-1"> <BookOpen className="h-4 w-4" /> <span>{module.total_lessons} lessons</span> </div> </div> {progressPercentage > 0 && ( <div className="space-y-2"> <div className="flex items-center justify-between text-sm"> <span>Progress</span> <span className="font-medium">{progressPercentage}%</span> </div> <Progress value={progressPercentage} className="h-2" /> </div> )} <Button className="w-full" size="sm"> {isCompleted ? ( <> <CheckCircle className="h-4 w-4 mr-2" /> Review Course </> ) : progressPercentage > 0 ? ( <> <PlayCircle className="h-4 w-4 mr-2" /> Continue ({progressPercentage}%) </> ) : ( <> <PlayCircle className="h-4 w-4 mr-2" /> Start Learning </> )} </Button> </div> </CardContent> </Card> ); })} </div> </TabsContent> <TabsContent value="advanced" className="space-y-6"> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {filteredModules .filter(m => m.difficulty === 'advanced') .map((module) => { const progress = getProgressForModule(module.id); const progressPercentage = progress ? getProgressPercentage(progress.completed_lessons, module.total_lessons) : 0; const isCompleted = progress?.completed_at; return ( <Card key={module.id} className="hover:shadow-lg transition-shadow"> <CardHeader> <div className="flex items-center justify-between mb-2"> <Badge className={getDifficultyColor(module.difficulty)}> {module.difficulty} </Badge> {isCompleted && ( <Badge className="bg-green-100 text-green-800"> <CheckCircle className="h-3 w-3 mr-1" /> Completed </Badge> )} </div> <CardTitle className="text-lg">{module.title}</CardTitle> <CardDescription>{module.description}</CardDescription> </CardHeader> <CardContent> <div className="space-y-4"> <div className="flex items-center justify-between text-sm text-gray-500"> <div className="flex items-center space-x-1"> <Clock className="h-4 w-4" /> <span>{formatDuration(module.estimated_duration)}</span> </div> <div className="flex items-center space-x-1"> <BookOpen className="h-4 w-4" /> <span>{module.total_lessons} lessons</span> </div> </div> {progressPercentage > 0 && ( <div className="space-y-2"> <div className="flex items-center justify-between text-sm"> <span>Progress</span> <span className="font-medium">{progressPercentage}%</span> </div> <Progress value={progressPercentage} className="h-2" /> </div> )} <Button className="w-full" size="sm"> {isCompleted ? ( <> <CheckCircle className="h-4 w-4 mr-2" /> Review Course </> ) : progressPercentage > 0 ? ( <> <PlayCircle className="h-4 w-4 mr-2" /> Continue ({progressPercentage}%) </> ) : ( <> <PlayCircle className="h-4 w-4 mr-2" /> Start Learning </> )} </Button> </div> </CardContent> </Card> ); })} </div> </TabsContent> </Tabs> </div> ); };