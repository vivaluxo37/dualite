import React, { useState } from 'react'; import { useClerkAuthContext } from '@/contexts/ClerkAuthContext'; import { Button } from '@/components/ui/button'; import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; import { Input } from '@/components/ui/input'; import { Label } from '@/components/ui/label'; import { Switch } from '@/components/ui/switch'; import { Badge } from '@/components/ui/badge'; import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'; import { Bell, Plus, Trash2, Edit, TrendingUp, TrendingDown, DollarSign, AlertTriangle, Clock, CheckCircle, X } from 'lucide-react'; import { toast } from 'sonner'; interface PriceAlert { id: string; symbol: string; target_price: number; condition: 'above' | 'below'; is_active: boolean; created_at: string; triggered_at: string | null; } interface BrokerAlert { id: string; broker_id: string; broker_name: string; alert_type: 'spread_change' | 'promotion' | 'regulation_change' | 'review_update'; is_active: boolean; created_at: string; } interface MarketAlert { id: string; title: string; description: string; severity: 'low' | 'medium' | 'high'; category: 'market' | 'economic' | 'broker' | 'system'; is_read: boolean; created_at: string; } interface AlertsModalProps { isOpen: boolean; onClose: () => void; } export const AlertsModal: React.FC<AlertsModalProps> = ({ isOpen, onClose }) => { const { userId } = useClerkAuthContext(); const [activeTab, setActiveTab] = useState('notifications'); const [isLoading, setIsLoading] = useState(false); // Mock data for demonstration const [priceAlerts, setPriceAlerts] = useState<PriceAlert[]>([ { id: '1', symbol: 'EUR/USD', target_price: 1.0850, condition: 'above', is_active: true, created_at: '2024-01-15T10:30:00Z', triggered_at: null }, { id: '2', symbol: 'GBP/USD', target_price: 1.2650, condition: 'below', is_active: true, created_at: '2024-01-14T15:45:00Z', triggered_at: null } ]); const [brokerAlerts, setBrokerAlerts] = useState<BrokerAlert[]>([ { id: '1', broker_id: 'ic-markets', broker_name: 'IC Markets', alert_type: 'promotion', is_active: true, created_at: '2024-01-15T09:00:00Z' } ]); const [marketAlerts, setMarketAlerts] = useState<MarketAlert[]>([ { id: '1', title: 'Fed Interest Rate Decision', description: 'Federal Reserve announces interest rate decision today at 2:00 PM EST', severity: 'high', category: 'economic', is_read: false, created_at: '2024-01-15T08:00:00Z' }, { id: '2', title: 'EUR/USD Technical Analysis', description: 'EUR/USD approaching key resistance level at 1.0850', severity: 'medium', category: 'market', is_read: true, created_at: '2024-01-14T16:30:00Z' } ]); // New price alert form const [newPriceAlert, setNewPriceAlert] = useState({ symbol: '', target_price: '', condition: 'above' as 'above' | 'below' }); const getSeverityColor = (severity: string) => { switch (severity) { case 'high': return 'bg-red-100 text-red-800'; case 'medium': return 'bg-yellow-100 text-yellow-800'; case 'low': return 'bg-green-100 text-green-800'; default: return 'bg-gray-100 text-gray-800'; } }; const getCategoryIcon = (category: string) => { switch (category) { case 'market': return <TrendingUp className="h-4 w-4" />; case 'economic': return <DollarSign className="h-4 w-4" />; case 'broker': return <AlertTriangle className="h-4 w-4" />; case 'system': return <Clock className="h-4 w-4" />; default: return <Bell className="h-4 w-4" />; } }; const addPriceAlert = async () => { if (!newPriceAlert.symbol || !newPriceAlert.target_price) { toast.error('Please fill in all fields'); return; } const alert: PriceAlert = { id: Date.now().toString(), symbol: newPriceAlert.symbol, target_price: parseFloat(newPriceAlert.target_price), condition: newPriceAlert.condition, is_active: true, created_at: new Date().toISOString(), triggered_at: null }; setPriceAlerts(prev => [...prev, alert]); setNewPriceAlert({ symbol: '', target_price: '', condition: 'above' }); toast.success('Price alert created successfully!'); }; const deletePriceAlert = (id: string) => { setPriceAlerts(prev => prev.filter(alert => alert.id !== id)); toast.success('Price alert deleted'); }; const togglePriceAlert = (id: string) => { setPriceAlerts(prev => prev.map(alert => alert.id === id ? { ...alert, is_active: !alert.is_active } : alert ) ); }; const markAsRead = (id: string) => { setMarketAlerts(prev => prev.map(alert => alert.id === id ? { ...alert, is_read: true } : alert ) ); }; const unreadCount = marketAlerts.filter(alert => !alert.is_read).length; if (!isOpen) return null; return ( <div className="fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center p-4"> <div className="bg-white rounded-lg w-full max-w-5xl max-h-[90vh] overflow-hidden"> {/* Header */} <div className="flex items-center justify-between p-6 border-b"> <div className="flex items-center space-x-2"> <Bell className="h-6 w-6" /> <h2 className="text-2xl font-bold">Alerts & Notifications</h2> {unreadCount > 0 && ( <Badge className="bg-red-100 text-red-800"> {unreadCount} unread </Badge> )} </div> <Button variant="ghost" size="sm" onClick={onClose}> <X className="h-4 w-4" /> </Button> </div> {/* Content */} <div className="flex h-[calc(90vh-120px)]"> {/* Sidebar */} <div className="w-64 bg-gray-50 p-4 border-r"> <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full"> <TabsList className="grid grid-cols-1 h-auto bg-transparent space-y-1"> <TabsTrigger value="notifications" className="w-full justify-start data-[state=active]:bg-white" > <Bell className="h-4 w-4 mr-2" /> Notifications {unreadCount > 0 && ( <Badge className="ml-auto bg-red-100 text-red-800 text-xs"> {unreadCount} </Badge> )} </TabsTrigger> <TabsTrigger value="price-alerts" className="w-full justify-start data-[state=active]:bg-white" > <TrendingUp className="h-4 w-4 mr-2" /> Price Alerts <Badge className="ml-auto bg-blue-100 text-blue-800 text-xs"> {priceAlerts.length} </Badge> </TabsTrigger> <TabsTrigger value="broker-alerts" className="w-full justify-start data-[state=active]:bg-white" > <AlertTriangle className="h-4 w-4 mr-2" /> Broker Alerts <Badge className="ml-auto bg-green-100 text-green-800 text-xs"> {brokerAlerts.length} </Badge> </TabsTrigger> </TabsList> </Tabs> </div> {/* Main Content */} <div className="flex-1 p-6 overflow-y-auto"> <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full"> <TabsContent value="notifications" className="space-y-4"> <div className="flex items-center justify-between mb-4"> <h3 className="text-lg font-semibold">Market Notifications</h3> <Button variant="outline" size="sm" onClick={() => setMarketAlerts(prev => prev.map(alert => ({ ...alert, is_read: true })))} > Mark all as read </Button> </div> {marketAlerts.length === 0 ? ( <Card> <CardContent className="p-8 text-center"> <Bell className="h-12 w-12 text-gray-400 mx-auto mb-4" /> <h3 className="text-lg font-medium text-gray-900 mb-2">No Notifications</h3> <p className="text-gray-500">You're all caught up! No new notifications.</p> </CardContent> </Card> ) : ( marketAlerts.map((alert) => ( <Card key={alert.id} className={`transition-colors ${!alert.is_read ? 'bg-blue-50 border-blue-200' : ''}`}> <CardContent className="p-4"> <div className="flex items-start space-x-3"> <div className={`p-2 rounded-full ${getSeverityColor(alert.severity)}`}> {getCategoryIcon(alert.category)} </div> <div className="flex-1"> <div className="flex items-center justify-between mb-2"> <h4 className="font-semibold">{alert.title}</h4> <div className="flex items-center space-x-2"> <span className="text-xs text-gray-500"> {new Date(alert.created_at).toLocaleDateString()} </span> {!alert.is_read && ( <Button variant="ghost" size="sm" onClick={() => markAsRead(alert.id)} > <CheckCircle className="h-4 w-4" /> </Button> )} </div> </div> <p className="text-gray-600 text-sm mb-2">{alert.description}</p> <div className="flex items-center space-x-2"> <Badge className={getSeverityColor(alert.severity)}> {alert.severity} </Badge> <Badge variant="outline"> {alert.category} </Badge> </div> </div> </div> </CardContent> </Card> )) )} </TabsContent> <TabsContent value="price-alerts" className="space-y-6"> <Card> <CardHeader> <CardTitle>Create New Price Alert</CardTitle> <CardDescription>Get notified when a currency pair reaches your target price</CardDescription> </CardHeader> <CardContent className="space-y-4"> <div className="grid grid-cols-3 gap-4"> <div> <Label htmlFor="symbol">Currency Pair</Label> <Input id="symbol" placeholder="EUR/USD" value={newPriceAlert.symbol} onChange={(e) => setNewPriceAlert(prev => ({ ...prev, symbol: e.target.value }))} /> </div> <div> <Label htmlFor="target_price">Target Price</Label> <Input id="target_price" type="number" step="0.0001" placeholder="1.0850" value={newPriceAlert.target_price} onChange={(e) => setNewPriceAlert(prev => ({ ...prev, target_price: e.target.value }))} /> </div> <div> <Label>Condition</Label> <select className="w-full p-2 border rounded-md" value={newPriceAlert.condition} onChange={(e) => setNewPriceAlert(prev => ({ ...prev, condition: e.target.value as 'above' | 'below' }))} > <option value="above">Above</option> <option value="below">Below</option> </select> </div> </div> <Button onClick={addPriceAlert} className="w-full"> <Plus className="h-4 w-4 mr-2" /> Create Alert </Button> </CardContent> </Card> <Card> <CardHeader> <CardTitle>Active Price Alerts</CardTitle> <CardDescription>Manage your price alerts</CardDescription> </CardHeader> <CardContent> {priceAlerts.length === 0 ? ( <div className="text-center py-8"> <TrendingUp className="h-12 w-12 text-gray-400 mx-auto mb-4" /> <h3 className="text-lg font-medium text-gray-900 mb-2">No Price Alerts</h3> <p className="text-gray-500">Create your first price alert above.</p> </div> ) : ( <div className="space-y-4"> {priceAlerts.map((alert) => ( <div key={alert.id} className="flex items-center justify-between p-4 border rounded-lg"> <div className="flex items-center space-x-3"> <div className={`p-2 rounded-full ${ alert.condition === 'above' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' }`}> {alert.condition === 'above' ? <TrendingUp className="h-4 w-4" /> : <TrendingDown className="h-4 w-4" />} </div> <div> <div className="font-medium">{alert.symbol}</div> <div className="text-sm text-gray-500"> Alert when price goes {alert.condition} {alert.target_price} </div> <div className="text-xs text-gray-400"> Created {new Date(alert.created_at).toLocaleDateString()} </div> </div> </div> <div className="flex items-center space-x-2"> <Switch checked={alert.is_active} onCheckedChange={() => togglePriceAlert(alert.id)} /> <Button variant="ghost" size="sm" onClick={() => deletePriceAlert(alert.id)} > <Trash2 className="h-4 w-4" /> </Button> </div> </div> ))} </div> )} </CardContent> </Card> </TabsContent> <TabsContent value="broker-alerts" className="space-y-6"> <Card> <CardHeader> <CardTitle>Broker Alerts</CardTitle> <CardDescription>Stay updated on your favorite brokers</CardDescription> </CardHeader> <CardContent> {brokerAlerts.length === 0 ? ( <div className="text-center py-8"> <AlertTriangle className="h-12 w-12 text-gray-400 mx-auto mb-4" /> <h3 className="text-lg font-medium text-gray-900 mb-2">No Broker Alerts</h3> <p className="text-gray-500">Save brokers to your list to receive alerts about them.</p> </div> ) : ( <div className="space-y-4"> {brokerAlerts.map((alert) => ( <div key={alert.id} className="flex items-center justify-between p-4 border rounded-lg"> <div className="flex items-center space-x-3"> <div className="p-2 rounded-full bg-blue-100 text-blue-800"> <AlertTriangle className="h-4 w-4" /> </div> <div> <div className="font-medium">{alert.broker_name}</div> <div className="text-sm text-gray-500 capitalize"> {alert.alert_type.replace('_', ' ')} </div> <div className="text-xs text-gray-400"> Created {new Date(alert.created_at).toLocaleDateString()} </div> </div> </div> <div className="flex items-center space-x-2"> <Switch checked={alert.is_active} onCheckedChange={() => { setBrokerAlerts(prev => prev.map(a => a.id === alert.id ? { ...a, is_active: !a.is_active } : a ) ); }} /> <Button variant="ghost" size="sm" onClick={() => setBrokerAlerts(prev => prev.filter(a => a.id !== alert.id))} > <Trash2 className="h-4 w-4" /> </Button> </div> </div> ))} </div> )} </CardContent> </Card> </TabsContent> </Tabs> </div> </div> </div> </div> ); };