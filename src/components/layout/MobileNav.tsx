import React, { useState } from 'react' import { Link } from 'react-router-dom' import { Button } from '@/components/ui/button' import { Sheet, SheetContent, SheetTrigger, SheetClose } from '@/components/ui/sheet' import { Accordion, AccordionContent, AccordionItem, AccordionTrigger, } from "@/components/ui/accordion" import { Menu, Bot, Scale, Calculator, TestTube2, BookOpen, Shield, Milestone, MessageSquare, Info, Globe, LogOut, LayoutDashboard, LogIn, Star, MapPin, TrendingUp, GraduationCap } from 'lucide-react' import { useAuth } from '@clerk/clerk-react' import { ClerkAuthDialog } from '../auth/ClerkAuthDialog' import { DualiteLogo } from './BrokerAnalysisLogo' const navItems = [ { title: "Top Brokers", items: [ { title: "IG Group", href: "/review/ig-group", icon: <Star className="text-yellow-500" /> }, { title: "OANDA", href: "/review/oanda", icon: <Star className="text-yellow-500" /> }, ] }, { title: "Find Brokers", items: [ { title: "USA Brokers", href: "/brokers/usa", icon: <Globe /> }, { title: "UK Brokers", href: "/brokers/uk", icon: <Globe /> }, { title: "Australia Brokers", href: "/brokers/australia", icon: <Globe /> }, { title: "Canada Brokers", href: "/brokers/canada", icon: <Globe /> }, { title: "North America", href: "/brokers/north-america", icon: <MapPin /> }, { title: "Europe", href: "/brokers/europe", icon: <MapPin /> }, { title: "Asia Pacific", href: "/brokers/asia-pacific", icon: <MapPin /> }, { title: "ECN Brokers", href: "/brokers/style/ecn", icon: <Milestone /> }, { title: "Scalping Brokers", href: "/brokers/style/scalping", icon: <Milestone /> }, { title: "Islamic Accounts", href: "/forex-brokers/trading-types/islamic-forex-brokers.html", icon: <Milestone /> }, ] }, { title: "Tools & Analysis", items: [ { title: "AI Broker Matcher", href: "/ai-match", icon: <Bot /> }, { title: "Broker Comparison", href: "/compare", icon: <Scale /> }, { title: "Trading Calculators", href: "/calculators", icon: <Calculator /> }, { title: "Cost Simulator", href: "/simulator", icon: <TestTube2 /> }, ] }, { title: "Learn", items: [ { title: "Trading Education", href: "/learn", icon: <GraduationCap /> }, { title: "Market Analysis", href: "/learn/market-analysis", icon: <TrendingUp /> }, { title: "Regulation Guide", href: "/regulation-guide", icon: <Shield /> }, { title: "Broker Reviews", href: "/reviews", icon: <Star /> }, ] }, { title: "Support", items: [ { title: "Contact Us", href: "/contact", icon: <MessageSquare /> }, { title: "FAQ", href: "/faq", icon: <Info /> }, { title: "Help Center", href: "/help", icon: <BookOpen /> }, ] } ]; export function MobileNav() { const [isOpen, setIsOpen] = useState(false) const { isSignedIn, isLoaded, signOut } = useAuth() const [authOpen, setAuthOpen] = useState(false) const handleSignOut = () => { signOut(); setIsOpen(false); } return ( <> <Sheet open={isOpen} onOpenChange={setIsOpen}> <SheetTrigger asChild> <Button variant="ghost" size="icon" className="lg:hidden"> <Menu className="h-6 w-6" /> <span className="sr-only">Toggle Menu</span> </Button> </SheetTrigger> <SheetContent side="left" className="w-full sm:w-[320px] p-0"> <div className="flex flex-col h-full"> <div className="p-4 border-b"> <Link to="/" className="flex items-center space-x-3" onClick={() => setIsOpen(false)}> <DualiteLogo className="h-8 w-8" /> <span className="font-bold text-xl text-foreground">BrokerAnalysis</span> </Link> </div> <div className="flex-1 overflow-y-auto p-4"> <Accordion type="multiple" className="w-full"> {navItems.map((navGroup) => ( <AccordionItem value={navGroup.title} key={navGroup.title}> <AccordionTrigger>{navGroup.title}</AccordionTrigger> <AccordionContent> <div className="flex flex-col space-y-1"> {navGroup.items.map((item) => ( <SheetClose asChild key={item.href}> <Link to={item.href} className="flex items-center gap-3 rounded-md p-2 text-sm hover:bg-accent" > {item.icon && React.cloneElement(item.icon, { className: 'h-4 w-4 text-muted-foreground' })} {item.title} </Link> </SheetClose> ))} </div> </AccordionContent> </AccordionItem> ))} </Accordion> </div> <div className="p-4 border-t mt-auto"> {isLoaded && isSignedIn ? ( <div className="space-y-2"> <SheetClose asChild> <Link to="/dashboard" className="flex items-center w-full p-2 text-sm rounded-md hover:bg-accent"> <LayoutDashboard className="mr-2 h-4 w-4" /> Dashboard </Link> </SheetClose> <Button variant="ghost" className="w-full justify-start p-2" onClick={handleSignOut}> <LogOut className="mr-2 h-4 w-4" /> Sign Out </Button> </div> ) : ( <div className="space-y-2"> <Button variant="outline" className="w-full" onClick={() => { setAuthOpen(true); setIsOpen(false); }}> <LogIn className="mr-2 h-4 w-4" /> Sign In </Button> </div> )} </div> </div> </SheetContent> </Sheet> <ClerkAuthDialog isOpen={authOpen} onClose={() => setAuthOpen(false)} /> </> ) }