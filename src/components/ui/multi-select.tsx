import * as React from "react" import { cn } from "@/lib/utils" import { Check, ChevronsUpDown, X } from "lucide-react" import { Button } from "@/components/ui/button" import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, } from "@/components/ui/command" import { Popover, PopoverContent, PopoverTrigger, } from "@/components/ui/popover" import { Badge } from "@/components/ui/badge" export type OptionType = { label: string value: string } interface MultiSelectProps { options: OptionType[] selected: string[] onChange: React.Dispatch<React.SetStateAction<string[]>> className?: string placeholder?: string } function MultiSelect({ options, selected, onChange, className, ...props }: MultiSelectProps) { const [open, setOpen] = React.useState(false) const handleUnselect = (item: string) => { onChange(selected.filter((i) => i !== item)) } return ( <Popover open={open} onOpenChange={setOpen}> <PopoverTrigger asChild> <Button variant="outline" role="combobox" aria-expanded={open} className={`w-full justify-between h-auto min-h-9 ${ selected.length > 0 ? "h-auto" : "" }`} onClick={() => setOpen(!open)} > <div className="flex gap-1 flex-wrap"> {selected.length > 0 ? ( options .filter((option) => selected.includes(option.value)) .map((option) => ( <Badge variant="secondary" key={option.value} className="mr-1 mb-1" onClick={(e: React.MouseEvent) => { e.stopPropagation() handleUnselect(option.value) }} > {option.label} <X className="ml-1 h-3 w-3" /> </Badge> )) ) : ( <span>{props.placeholder ?? "Select options"}</span> )} </div> <ChevronsUpDown className="h-4 w-4 shrink-0 opacity-50" /> </Button> </PopoverTrigger> <PopoverContent className="w-full p-0"> <Command className={className}> <CommandInput placeholder="Search ..." /> <CommandList> <CommandEmpty>No item found.</CommandEmpty> <CommandGroup> {options.map((option) => ( <CommandItem key={option.value} onSelect={() => { onChange( selected.includes(option.value) ? selected.filter((item) => item !== option.value) : [...selected, option.value] ) setOpen(true) }} > <Check className={cn( "mr-2 h-4 w-4", selected.includes(option.value) ? "opacity-100" : "opacity-0" )} /> {option.label} </CommandItem> ))} </CommandGroup> </CommandList> </Command> </PopoverContent> </Popover> ) } export { MultiSelect } 