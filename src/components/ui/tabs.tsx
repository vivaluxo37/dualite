import React, { createContext, useContext } from 'react'; import { cn } from '../../utils/cn'; interface TabsContextType { value: string; onValueChange: (value: string) => void; } const TabsContext = createContext<TabsContextType | undefined>(undefined); const useTabsContext = () => { const context = useContext(TabsContext); if (!context) { throw new Error('Tabs components must be used within a Tabs provider'); } return context; }; interface TabsProps { value: string; onValueChange: (value: string) => void; children: React.ReactNode; className?: string; } export const Tabs: React.FC<TabsProps> = ({ value, onValueChange, children, className }) => { return ( <TabsContext.Provider value={{ value, onValueChange }}> <div className={cn('w-full', className)}> {children} </div> </TabsContext.Provider> ); }; interface TabsListProps { children: React.ReactNode; className?: string; } export const TabsList: React.FC<TabsListProps> = ({ children, className }) => { return ( <div className={cn( 'inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground', className )} > {children} </div> ); }; interface TabsTriggerProps { value: string; children: React.ReactNode; className?: string; } export const TabsTrigger: React.FC<TabsTriggerProps> = ({ value, children, className }) => { const { value: selectedValue, onValueChange } = useTabsContext(); const isSelected = selectedValue === value; return ( <button className={cn( 'inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50', isSelected ? 'bg-background text-foreground shadow-sm' : 'hover:bg-muted/50', className )} onClick={() => onValueChange(value)} > {children} </button> ); }; interface TabsContentProps { value: string; children: React.ReactNode; className?: string; } export const TabsContent: React.FC<TabsContentProps> = ({ value, children, className }) => { const { value: selectedValue } = useTabsContext(); if (selectedValue !== value) { return null; } return ( <div className={cn( 'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2', className )} > {children} </div> ); };