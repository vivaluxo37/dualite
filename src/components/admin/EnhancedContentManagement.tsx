import React, { useState, useEffect } from 'react'; import { supabase } from '../../lib/supabase'; import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'; import { Button } from '../ui/button'; import { Input } from '../ui/input'; import { Textarea } from '../ui/textarea'; import { Badge } from '../ui/badge'; import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select'; import { Plus, Edit, Trash2, Search, FileText, Video, Image as ImageIcon, Save, Eye, Calendar, Tag, Users, Filter, Download, Upload, MoreHorizontal, ExternalLink } from 'lucide-react'; interface ContentItem { id: string; title: string; content_type: 'article' | 'video' | 'guide' | 'tutorial' | 'blog_post' | 'learning_module'; status: 'draft' | 'published' | 'archived'; content?: string; excerpt?: string; file_url?: string; featured_image_url?: string; meta_description?: string; tags?: string[]; author_id?: string; published_at?: string; created_at: string; updated_at: string; view_count?: number; reading_time?: number; slug?: string; seo_title?: string; seo_keywords?: string[]; } export const EnhancedContentManagement: React.FC = () => { const [contentItems, setContentItems] = useState<ContentItem[]>([]); const [loading, setLoading] = useState(true); const [searchTerm, setSearchTerm] = useState(''); const [filterStatus, setFilterStatus] = useState<string>('all'); const [filterType, setFilterType] = useState<string>('all'); const [showCreateForm, setShowCreateForm] = useState(false); const [editingItem, setEditingItem] = useState<ContentItem | null>(null); const [isSubmitting, setIsSubmitting] = useState(false); const [formData, setFormData] = useState({ title: '', content_type: 'article' as ContentItem['content_type'], status: 'draft' as ContentItem['status'], content: '', excerpt: '', file_url: '', featured_image_url: '', meta_description: '', tags: '', seo_title: '', seo_keywords: '', published_at: '', slug: '' }); useEffect(() => { fetchContentItems(); }, []); const fetchContentItems = async () => { try { // Fetch from multiple content tables const [blogPosts, learningModules, contentItems] = await Promise.all([ supabase.from('blog_posts').select('*'), supabase.from('learning_modules').select('*'), supabase.from('content_items').select('*') ]); const allContent: ContentItem[] = []; // Transform blog posts if (blogPosts.data) { blogPosts.data.forEach(post => { allContent.push({ id: post.id, title: post.title, content_type: 'blog_post', status: post.status as ContentItem['status'], content: post.content, excerpt: post.excerpt, featured_image_url: post.featured_image_url, meta_description: post.meta_description, tags: post.meta_keywords, author_id: post.author_id, published_at: post.published_at, created_at: post.created_at, updated_at: post.updated_at, view_count: post.view_count, reading_time: post.reading_time, slug: post.slug, seo_title: post.seo_title, seo_keywords: post.seo_keywords }); }); } // Transform learning modules if (learningModules.data) { learningModules.data.forEach(module => { allContent.push({ id: module.id, title: module.title, content_type: 'learning_module', status: module.is_published ? 'published' : 'draft', content: module.content, excerpt: module.description, created_at: module.created_at, updated_at: module.updated_at, slug: module.slug, tags: module.objectives }); }); } // Transform content items if (contentItems.data) { contentItems.data.forEach(item => { allContent.push({ id: item.id, title: item.title, content_type: item.content_type as ContentItem['content_type'], status: item.is_published ? 'published' : 'draft', content: item.content_data?.content || '', excerpt: item.content_data?.excerpt, file_url: item.file_url, featured_image_url: item.content_data?.featured_image_url, meta_description: item.content_data?.meta_description, tags: item.tags, author_id: item.created_by, published_at: item.published_at, created_at: item.created_at, updated_at: item.updated_at, slug: item.content_data?.slug }); }); } setContentItems(allContent); } catch (error) { console.error('Error fetching content items:', error); } finally { setLoading(false); } }; const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); setIsSubmitting(true); try { const slug = formData.slug || formData.title.toLowerCase().replace(/[^a-z0-9]+/g, '-'); if (editingItem?.content_type === 'blog_post') { // Update blog post const { error } = await supabase .from('blog_posts') .update({ title: formData.title, content: formData.content, excerpt: formData.excerpt, featured_image_url: formData.featured_image_url, meta_description: formData.meta_description, meta_keywords: formData.tags ? formData.tags.split(',').map(tag => tag.trim()) : [], seo_title: formData.seo_title, seo_keywords: formData.seo_keywords ? formData.seo_keywords.split(',').map(tag => tag.trim()) : [], slug: slug, status: formData.status, reading_time: Math.ceil(formData.content.split(' ').length / 200) // Approximate reading time }) .eq('id', editingItem.id); if (error) throw error; } else if (editingItem?.content_type === 'learning_module') { // Update learning module const { error } = await supabase .from('learning_modules') .update({ title: formData.title, content: formData.content, description: formData.excerpt, is_published: formData.status === 'published', slug: slug }) .eq('id', editingItem.id); if (error) throw error; } else { // Create new content item const { error } = await supabase .from('blog_posts') .insert([{ title: formData.title, content: formData.content, excerpt: formData.excerpt, featured_image_url: formData.featured_image_url, meta_description: formData.meta_description, meta_keywords: formData.tags ? formData.tags.split(',').map(tag => tag.trim()) : [], seo_title: formData.seo_title, seo_keywords: formData.seo_keywords ? formData.seo_keywords.split(',').map(tag => tag.trim()) : [], slug: slug, status: formData.status, reading_time: Math.ceil(formData.content.split(' ').length / 200), view_count: 0 }]); if (error) throw error; } // Reset form and refresh data setFormData({ title: '', content_type: 'article', status: 'draft', content: '', excerpt: '', file_url: '', featured_image_url: '', meta_description: '', tags: '', seo_title: '', seo_keywords: '', published_at: '', slug: '' }); setShowCreateForm(false); setEditingItem(null); fetchContentItems(); } catch (error) { console.error('Error saving content item:', error); } finally { setIsSubmitting(false); } }; const handleEdit = (item: ContentItem) => { setEditingItem(item); setFormData({ title: item.title, content_type: item.content_type, status: item.status, content: item.content || '', excerpt: item.excerpt || '', file_url: item.file_url || '', featured_image_url: item.featured_image_url || '', meta_description: item.meta_description || '', tags: item.tags?.join(', ') || '', seo_title: item.seo_title || '', seo_keywords: item.seo_keywords?.join(', ') || '', published_at: item.published_at || '', slug: item.slug || '' }); setShowCreateForm(true); }; const handleDelete = async (id: string, type: string) => { if (!confirm('Are you sure you want to delete this content item?')) return; try { if (type === 'blog_post') { const { error } = await supabase .from('blog_posts') .delete() .eq('id', id); if (error) throw error; } else if (type === 'learning_module') { const { error } = await supabase .from('learning_modules') .delete() .eq('id', id); if (error) throw error; } else { const { error } = await supabase .from('content_items') .delete() .eq('id', id); if (error) throw error; } fetchContentItems(); } catch (error) { console.error('Error deleting content item:', error); } }; const handlePublish = async (id: string, type: string) => { try { if (type === 'blog_post') { const { error } = await supabase .from('blog_posts') .update({ status: 'published', published_at: new Date().toISOString() }) .eq('id', id); if (error) throw error; } else if (type === 'learning_module') { const { error } = await supabase .from('learning_modules') .update({ is_published: true }) .eq('id', id); if (error) throw error; } fetchContentItems(); } catch (error) { console.error('Error publishing content:', error); } }; const getTypeIcon = (type: string) => { switch (type) { case 'video': return <Video className="h-4 w-4" />; case 'guide': return <FileText className="h-4 w-4" />; case 'tutorial': return <ImageIcon className="h-4 w-4" />; case 'blog_post': return <FileText className="h-4 w-4" />; case 'learning_module': return <Users className="h-4 w-4" />; default: return <FileText className="h-4 w-4" />; } }; const getStatusColor = (status: string) => { switch (status) { case 'published': return 'bg-green-100 text-green-800'; case 'draft': return 'bg-yellow-100 text-yellow-800'; case 'archived': return 'bg-gray-100 text-gray-800'; default: return 'bg-gray-100 text-gray-800'; } }; const getTypeBadge = (type: string) => { const colors = { 'article': 'bg-blue-100 text-blue-800', 'video': 'bg-purple-100 text-purple-800', 'guide': 'bg-indigo-100 text-indigo-800', 'tutorial': 'bg-pink-100 text-pink-800', 'blog_post': 'bg-cyan-100 text-cyan-800', 'learning_module': 'bg-orange-100 text-orange-800' }; return colors[type as keyof typeof colors] || 'bg-gray-100 text-gray-800'; }; const filteredItems = contentItems.filter(item => { const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) || item.excerpt?.toLowerCase().includes(searchTerm.toLowerCase()) || item.content?.toLowerCase().includes(searchTerm.toLowerCase()); const matchesStatus = filterStatus === 'all' || item.status === filterStatus; const matchesType = filterType === 'all' || item.content_type === filterType; return matchesSearch && matchesStatus && matchesType; }); const getContentStats = () => { return { total: contentItems.length, published: contentItems.filter(item => item.status === 'published').length, draft: contentItems.filter(item => item.status === 'draft').length, archived: contentItems.filter(item => item.status === 'archived').length }; }; const stats = getContentStats(); if (loading) { return ( <div className="flex items-center justify-center h-64"> <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div> </div> ); } return ( <div className="space-y-6"> {/* Header and Stats */} <div className="flex justify-between items-start"> <div> <h2 className="text-2xl font-bold text-gray-900">Content Management</h2> <p className="text-gray-600">Manage all content across the platform</p> </div> <Button onClick={() => { setShowCreateForm(true); setEditingItem(null); setFormData({ title: '', content_type: 'article', status: 'draft', content: '', excerpt: '', file_url: '', featured_image_url: '', meta_description: '', tags: '', seo_title: '', seo_keywords: '', published_at: '', slug: '' }); }} className="flex items-center gap-2" > <Plus className="h-4 w-4" /> Create Content </Button> </div> {/* Stats Cards */} <div className="grid grid-cols-1 md:grid-cols-4 gap-4"> <Card className=""> <CardContent className="p-4"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-gray-600">Total Content</p> <p className="text-2xl font-bold text-gray-900">{stats.total}</p> </div> <FileText className="h-8 w-8 text-blue-600" /> </div> </CardContent> </Card> <Card className=""> <CardContent className="p-4"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-gray-600">Published</p> <p className="text-2xl font-bold text-gray-900">{stats.published}</p> </div> <Eye className="h-8 w-8 text-green-600" /> </div> </CardContent> </Card> <Card className=""> <CardContent className="p-4"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-gray-600">Drafts</p> <p className="text-2xl font-bold text-gray-900">{stats.draft}</p> </div> <Edit className="h-8 w-8 text-yellow-600" /> </div> </CardContent> </Card> <Card className=""> <CardContent className="p-4"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-gray-600">Archived</p> <p className="text-2xl font-bold text-gray-900">{stats.archived}</p> </div> <Trash2 className="h-8 w-8 text-red-600" /> </div> </CardContent> </Card> </div> {/* Filters */} <Card className=""> <CardContent className="p-4"> <div className="flex flex-wrap gap-4"> <div className="flex-1 min-w-64"> <div className="relative"> <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" /> <Input placeholder="Search content..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="pl-10" /> </div> </div> <Select value={filterStatus} onValueChange={setFilterStatus}> <SelectTrigger className="w-40"> <SelectValue placeholder="Status" /> </SelectTrigger> <SelectContent> <SelectItem value="all">All Status</SelectItem> <SelectItem value="draft">Draft</SelectItem> <SelectItem value="published">Published</SelectItem> <SelectItem value="archived">Archived</SelectItem> </SelectContent> </Select> <Select value={filterType} onValueChange={setFilterType}> <SelectTrigger className="w-40"> <SelectValue placeholder="Type" /> </SelectTrigger> <SelectContent> <SelectItem value="all">All Types</SelectItem> <SelectItem value="article">Article</SelectItem> <SelectItem value="video">Video</SelectItem> <SelectItem value="guide">Guide</SelectItem> <SelectItem value="tutorial">Tutorial</SelectItem> <SelectItem value="blog_post">Blog Post</SelectItem> <SelectItem value="learning_module">Learning Module</SelectItem> </SelectContent> </Select> <Button variant="outline" size="sm"> <Filter className="h-4 w-4 mr-2" /> More Filters </Button> </div> </CardContent> </Card> {/* Create/Edit Form */} {showCreateForm && ( <Card className=""> <CardHeader> <CardTitle className=""> {editingItem ? 'Edit Content' : 'Create New Content'} </CardTitle> <CardDescription className=""> {editingItem ? 'Update the content item' : 'Add a new content item to the platform'} </CardDescription> </CardHeader> <CardContent> <form onSubmit={handleSubmit} className="space-y-4"> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Title</label> <Input value={formData.title} onChange={(e) => setFormData({ ...formData, title: e.target.value })} required className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Type</label> <Select value={formData.content_type} onValueChange={(value) => setFormData({ ...formData, content_type: value as ContentItem['content_type'] })}> <SelectTrigger className=""> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="article">Article</SelectItem> <SelectItem value="video">Video</SelectItem> <SelectItem value="guide">Guide</SelectItem> <SelectItem value="tutorial">Tutorial</SelectItem> <SelectItem value="blog_post">Blog Post</SelectItem> <SelectItem value="learning_module">Learning Module</SelectItem> </SelectContent> </Select> </div> </div> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Status</label> <Select value={formData.status} onValueChange={(value) => setFormData({ ...formData, status: value as ContentItem['status'] })}> <SelectTrigger className=""> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="draft">Draft</SelectItem> <SelectItem value="published">Published</SelectItem> <SelectItem value="archived">Archived</SelectItem> </SelectContent> </Select> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Slug</label> <Input value={formData.slug} onChange={(e) => setFormData({ ...formData, slug: e.target.value })} placeholder="url-friendly-title" className="" /> </div> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Excerpt</label> <Textarea value={formData.excerpt} onChange={(e) => setFormData({ ...formData, excerpt: e.target.value })} rows={3} placeholder="Brief description of the content" className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Content</label> <Textarea value={formData.content} onChange={(e) => setFormData({ ...formData, content: e.target.value })} rows={8} required className="" /> </div> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Featured Image URL</label> <Input value={formData.featured_image_url} onChange={(e) => setFormData({ ...formData, featured_image_url: e.target.value })} placeholder="https://example.com/image.jpg" className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Tags (comma-separated)</label> <Input value={formData.tags} onChange={(e) => setFormData({ ...formData, tags: e.target.value })} placeholder="forex, trading, beginner" className="" /> </div> </div> {/* SEO Settings */} <div className="border-t pt-4"> <h3 className="text-lg font-medium mb-4">SEO Settings</h3> <div className="grid grid-cols-1 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1">SEO Title</label> <Input value={formData.seo_title} onChange={(e) => setFormData({ ...formData, seo_title: e.target.value })} placeholder="Best Forex Broker - [Title]" className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">SEO Description</label> <Textarea value={formData.meta_description} onChange={(e) => setFormData({ ...formData, meta_description: e.target.value })} placeholder="Comprehensive guide to..." rows={2} className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">SEO Keywords (comma-separated)</label> <Input value={formData.seo_keywords} onChange={(e) => setFormData({ ...formData, seo_keywords: e.target.value })} placeholder="forex broker, trading, spreads, regulation" className="" /> </div> </div> </div> <div className="flex gap-2"> <Button type="submit" disabled={isSubmitting}> <Save className="h-4 w-4 mr-2" /> {isSubmitting ? 'Saving...' : (editingItem ? 'Update Content' : 'Create Content')} </Button> <Button type="button" variant="outline" onClick={() => { setShowCreateForm(false); setEditingItem(null); }} > Cancel </Button> </div> </form> </CardContent> </Card> )} {/* Content List */} <div className="grid gap-4"> {filteredItems.map((item) => ( <Card key={item.id} className=""> <CardContent className="p-6"> <div className="flex items-start justify-between"> <div className="flex-1"> <div className="flex items-center gap-2 mb-2"> {getTypeIcon(item.content_type)} <h3 className="text-lg font-semibold">{item.title}</h3> <Badge className={getStatusColor(item.status)}> {item.status} </Badge> <Badge className={getTypeBadge(item.content_type)}> {item.content_type.replace('_', ' ')} </Badge> </div> <p className="text-gray-600 mb-3 line-clamp-2"> {item.excerpt || item.content?.substring(0, 150) + '...'} </p> {item.tags && item.tags.length > 0 && ( <div className="flex flex-wrap gap-1 mb-3"> {item.tags.slice(0, 5).map((tag, index) => ( <Badge key={index} variant="secondary" className="text-xs"> {tag} </Badge> ))} {item.tags.length > 5 && ( <Badge variant="secondary" className="text-xs"> +{item.tags.length - 5} more </Badge> )} </div> )} <div className="flex items-center gap-4 text-sm text-gray-500"> <div className="flex items-center gap-1"> <Calendar className="h-4 w-4" /> <span>Created: {new Date(item.created_at).toLocaleDateString()}</span> </div> {item.updated_at !== item.created_at && ( <div> Updated: {new Date(item.updated_at).toLocaleDateString()} </div> )} {item.view_count && ( <div className="flex items-center gap-1"> <Eye className="h-4 w-4" /> <span>{item.view_count} views</span> </div> )} {item.reading_time && ( <div> {item.reading_time} min read </div> )} </div> </div> <div className="flex gap-2 ml-4"> {item.status !== 'published' && ( <Button size="sm" onClick={() => handlePublish(item.id, item.content_type)} className="bg-green-600 hover:bg-green-700" > <Eye className="h-4 w-4" /> </Button> )} <Button size="sm" variant="outline" onClick={() => handleEdit(item)} className="" > <Edit className="h-4 w-4" /> </Button> <Button size="sm" variant="outline" onClick={() => handleDelete(item.id, item.content_type)} className="text-red-600 hover:text-red-700" > <Trash2 className="h-4 w-4" /> </Button> {item.slug && ( <Button size="sm" variant="outline" onClick={() => window.open(`/blog/${item.slug}`, '_blank')} className="" > <ExternalLink className="h-4 w-4" /> </Button> )} </div> </div> </CardContent> </Card> ))} {filteredItems.length === 0 && ( <Card className=""> <CardContent className="p-12 text-center"> <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" /> <h3 className="text-lg font-medium text-gray-900 mb-2">No content found</h3> <p className="text-gray-600 mb-4"> {searchTerm || filterStatus !== 'all' || filterType !== 'all' ? 'No content matches your current filters.' : 'Get started by creating your first content item.'} </p> {!searchTerm && filterStatus === 'all' && filterType === 'all' && ( <Button onClick={() => setShowCreateForm(true)}> <Plus className="h-4 w-4 mr-2" /> Create Content </Button> )} </CardContent> </Card> )} </div> </div> ); };