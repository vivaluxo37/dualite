import React, { useState, useEffect } from 'react'; import { supabase } from '../../lib/supabase'; import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'; import { Button } from '../ui/button'; import { Input } from '../ui/input'; import { Textarea } from '../ui/textarea'; import { Badge } from '../ui/badge'; import { Plus, Edit, Trash2, Search, Star, Building2 } from 'lucide-react'; interface Broker { id: string; name: string; description: string; logo_url?: string; website_url: string; regulation: string; min_deposit: number; max_leverage: string; spread_eur_usd: number; rating: number; review_count: number; features: string[]; pros: string[]; cons: string[]; account_types: string[]; trading_platforms: string[]; payment_methods: string[]; customer_support: string[]; bonus_info?: string; year_founded?: number; headquarters?: string; is_featured: boolean; seo_title?: string; seo_description?: string; seo_keywords?: string[]; created_at: string; updated_at: string; } export const BrokerManagement: React.FC = () => { const [brokers, setBrokers] = useState<Broker[]>([]); const [loading, setLoading] = useState(true); const [searchTerm, setSearchTerm] = useState(''); const [showCreateForm, setShowCreateForm] = useState(false); const [editingBroker, setEditingBroker] = useState<Broker | null>(null); const [formData, setFormData] = useState({ name: '', description: '', logo_url: '', website_url: '', regulation: '', min_deposit: 0, max_leverage: '', spread_eur_usd: 0, rating: 0, features: '', pros: '', cons: '', account_types: '', trading_platforms: '', payment_methods: '', customer_support: '', bonus_info: '', year_founded: new Date().getFullYear(), headquarters: '', is_featured: false, seo_title: '', seo_description: '', seo_keywords: '' }); useEffect(() => { fetchBrokers(); }, []); const fetchBrokers = async () => { try { const { data, error } = await supabase .from('brokers') .select('*') .order('rating', { ascending: false }); if (error) throw error; setBrokers(data || []); } catch (error) { console.error('Error fetching brokers:', error); } finally { setLoading(false); } }; const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); try { const brokerData = { name: formData.name, description: formData.description, logo_url: formData.logo_url || null, website_url: formData.website_url, regulation: formData.regulation, min_deposit: formData.min_deposit, max_leverage: formData.max_leverage, spread_eur_usd: formData.spread_eur_usd, rating: formData.rating, features: formData.features ? formData.features.split(',').map(f => f.trim()) : [], pros: formData.pros ? formData.pros.split(',').map(p => p.trim()) : [], cons: formData.cons ? formData.cons.split(',').map(c => c.trim()) : [], account_types: formData.account_types ? formData.account_types.split(',').map(a => a.trim()) : [], trading_platforms: formData.trading_platforms ? formData.trading_platforms.split(',').map(t => t.trim()) : [], payment_methods: formData.payment_methods ? formData.payment_methods.split(',').map(p => p.trim()) : [], customer_support: formData.customer_support ? formData.customer_support.split(',').map(c => c.trim()) : [], bonus_info: formData.bonus_info || null, year_founded: formData.year_founded, headquarters: formData.headquarters || null, is_featured: formData.is_featured, seo_title: formData.seo_title || null, seo_description: formData.seo_description || null, seo_keywords: formData.seo_keywords ? formData.seo_keywords.split(',').map(k => k.trim()) : [] }; if (editingBroker) { const { error } = await supabase .from('brokers') .update(brokerData) .eq('id', editingBroker.id); if (error) throw error; } else { const { error } = await supabase .from('brokers') .insert([brokerData]); if (error) throw error; } // Reset form and refresh data resetForm(); fetchBrokers(); } catch (error) { console.error('Error saving broker:', error); } }; const resetForm = () => { setFormData({ name: '', description: '', logo_url: '', website_url: '', regulation: '', min_deposit: 0, max_leverage: '', spread_eur_usd: 0, rating: 0, features: '', pros: '', cons: '', account_types: '', trading_platforms: '', payment_methods: '', customer_support: '', bonus_info: '', year_founded: new Date().getFullYear(), headquarters: '', is_featured: false, seo_title: '', seo_description: '', seo_keywords: '' }); setShowCreateForm(false); setEditingBroker(null); }; const handleEdit = (broker: Broker) => { setEditingBroker(broker); setFormData({ name: broker.name, description: broker.description, logo_url: broker.logo_url || '', website_url: broker.website_url, regulation: broker.regulation, min_deposit: broker.min_deposit, max_leverage: broker.max_leverage, spread_eur_usd: broker.spread_eur_usd, rating: broker.rating, features: broker.features?.join(', ') || '', pros: broker.pros?.join(', ') || '', cons: broker.cons?.join(', ') || '', account_types: broker.account_types?.join(', ') || '', trading_platforms: broker.trading_platforms?.join(', ') || '', payment_methods: broker.payment_methods?.join(', ') || '', customer_support: broker.customer_support?.join(', ') || '', bonus_info: broker.bonus_info || '', year_founded: broker.year_founded || new Date().getFullYear(), headquarters: broker.headquarters || '', is_featured: broker.is_featured, seo_title: broker.seo_title || '', seo_description: broker.seo_description || '', seo_keywords: broker.seo_keywords?.join(', ') || '' }); setShowCreateForm(true); }; const handleDelete = async (id: string) => { if (!confirm('Are you sure you want to delete this broker?')) return; try { const { error } = await supabase .from('brokers') .delete() .eq('id', id); if (error) throw error; fetchBrokers(); } catch (error) { console.error('Error deleting broker:', error); } }; const toggleFeatured = async (broker: Broker) => { try { const { error } = await supabase .from('brokers') .update({ is_featured: !broker.is_featured }) .eq('id', broker.id); if (error) throw error; fetchBrokers(); } catch (error) { console.error('Error updating featured status:', error); } }; const filteredBrokers = brokers.filter(broker => broker.name.toLowerCase().includes(searchTerm.toLowerCase()) || broker.description.toLowerCase().includes(searchTerm.toLowerCase()) || broker.regulation.toLowerCase().includes(searchTerm.toLowerCase()) ); if (loading) { return ( <div className="flex items-center justify-center h-64"> <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div> </div> ); } return ( <div className="space-y-6"> {/* Header */} <div className="flex justify-between items-center"> <div> <h2 className="text-2xl font-bold text-gray-900">Broker Management</h2> <p className="text-gray-600">Manage forex brokers and their information</p> </div> <Button onClick={() => { setShowCreateForm(true); setEditingBroker(null); resetForm(); }} className="flex items-center gap-2" > <Plus className="h-4 w-4" /> Add Broker </Button> </div> {/* Search */} <Card className=""> <CardContent className="p-4"> <div className="relative"> <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" /> <Input placeholder="Search brokers..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="pl-10" /> </div> </CardContent> </Card> {/* Create/Edit Form */} {showCreateForm && ( <Card className=""> <CardHeader> <CardTitle className="">{editingBroker ? 'Edit Broker' : 'Add New Broker'}</CardTitle> <CardDescription className=""> {editingBroker ? 'Update broker information' : 'Add a new forex broker to the platform'} </CardDescription> </CardHeader> <CardContent> <form onSubmit={handleSubmit} className="space-y-6"> {/* Basic Information */} <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Broker Name</label> <Input value={formData.name} onChange={(e) => setFormData({ ...formData, name: e.target.value })} required className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Website URL</label> <Input type="url" value={formData.website_url} onChange={(e) => setFormData({ ...formData, website_url: e.target.value })} required className="" /> </div> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Description</label> <Textarea value={formData.description} onChange={(e) => setFormData({ ...formData, description: e.target.value })} rows={3} required className="" /> </div> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Logo URL</label> <Input type="url" value={formData.logo_url} onChange={(e) => setFormData({ ...formData, logo_url: e.target.value })} className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Regulation</label> <Input value={formData.regulation} onChange={(e) => setFormData({ ...formData, regulation: e.target.value })} placeholder="e.g., FCA, CySEC" required className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Headquarters</label> <Input value={formData.headquarters} onChange={(e) => setFormData({ ...formData, headquarters: e.target.value })} placeholder="e.g., London, UK" className="" /> </div> </div> {/* Trading Information */} <div className="grid grid-cols-1 md:grid-cols-4 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Min Deposit ($)</label> <Input type="number" value={formData.min_deposit} onChange={(e) => setFormData({ ...formData, min_deposit: Number(e.target.value) })} required className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Max Leverage</label> <Input value={formData.max_leverage} onChange={(e) => setFormData({ ...formData, max_leverage: e.target.value })} placeholder="e.g., 1:500" required className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">EUR/USD Spread</label> <Input type="number" step="0.1" value={formData.spread_eur_usd} onChange={(e) => setFormData({ ...formData, spread_eur_usd: Number(e.target.value) })} required className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Rating (1-5)</label> <Input type="number" min="1" max="5" step="0.1" value={formData.rating} onChange={(e) => setFormData({ ...formData, rating: Number(e.target.value) })} required className="" /> </div> </div> {/* Arrays (comma-separated) */} <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Features (comma-separated)</label> <Textarea value={formData.features} onChange={(e) => setFormData({ ...formData, features: e.target.value })} placeholder="ECN Trading, Copy Trading, Mobile App" rows={2} className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Trading Platforms (comma-separated)</label> <Textarea value={formData.trading_platforms} onChange={(e) => setFormData({ ...formData, trading_platforms: e.target.value })} placeholder="MetaTrader 4, MetaTrader 5, cTrader" rows={2} className="" /> </div> </div> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Pros (comma-separated)</label> <Textarea value={formData.pros} onChange={(e) => setFormData({ ...formData, pros: e.target.value })} placeholder="Low spreads, Fast execution, Good support" rows={2} className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Cons (comma-separated)</label> <Textarea value={formData.cons} onChange={(e) => setFormData({ ...formData, cons: e.target.value })} placeholder="High minimum deposit, Limited payment methods" rows={2} className="" /> </div> </div> {/* SEO */} <div className="border-t pt-4"> <h3 className="text-lg font-medium mb-4">SEO Settings</h3> <div className="grid grid-cols-1 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1">SEO Title</label> <Input value={formData.seo_title} onChange={(e) => setFormData({ ...formData, seo_title: e.target.value })} placeholder="Best Forex Broker - [Broker Name] Review" className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">SEO Description</label> <Textarea value={formData.seo_description} onChange={(e) => setFormData({ ...formData, seo_description: e.target.value })} placeholder="Comprehensive review of [Broker Name] - spreads, regulation, features..." rows={2} className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">SEO Keywords (comma-separated)</label> <Input value={formData.seo_keywords} onChange={(e) => setFormData({ ...formData, seo_keywords: e.target.value })} placeholder="forex broker, trading, spreads, regulation" className="" /> </div> </div> </div> {/* Settings */} <div className="flex items-center space-x-2"> <input type="checkbox" id="featured" checked={formData.is_featured} onChange={(e) => setFormData({ ...formData, is_featured: e.target.checked })} className="rounded border-gray-300" /> <label htmlFor="featured" className="text-sm font-medium text-gray-700"> Featured Broker </label> </div> <div className="flex gap-2"> <Button type="submit"> {editingBroker ? 'Update Broker' : 'Add Broker'} </Button> <Button type="button" variant="outline" onClick={resetForm}> Cancel </Button> </div> </form> </CardContent> </Card> )} {/* Brokers List */} <div className="grid gap-4"> {filteredBrokers.map((broker) => ( <Card key={broker.id} className=""> <CardContent className="p-6"> <div className="flex items-start justify-between"> <div className="flex items-start space-x-4 flex-1"> {broker.logo_url && ( <img src={broker.logo_url} alt={`${broker.name} logo`} className="w-16 h-16 object-contain rounded-lg border" /> )} <div className="flex-1"> <div className="flex items-center gap-2 mb-2"> <h3 className="text-xl font-semibold">{broker.name}</h3> {broker.is_featured && ( <Badge className="bg-yellow-100 text-yellow-800"> <Star className="h-3 w-3 mr-1" /> Featured </Badge> )} <div className="flex items-center"> <Star className="h-4 w-4 text-yellow-400 fill-current" /> <span className="ml-1 text-sm font-medium">{broker.rating}</span> <span className="ml-1 text-sm text-gray-500">({broker.review_count} reviews)</span> </div> </div> <p className="text-gray-600 mb-3 line-clamp-2">{broker.description}</p> <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm"> <div> <span className="font-medium text-gray-700">Regulation:</span> <p className="text-gray-600">{broker.regulation}</p> </div> <div> <span className="font-medium text-gray-700">Min Deposit:</span> <p className="text-gray-600">${broker.min_deposit}</p> </div> <div> <span className="font-medium text-gray-700">Max Leverage:</span> <p className="text-gray-600">{broker.max_leverage}</p> </div> <div> <span className="font-medium text-gray-700">EUR/USD Spread:</span> <p className="text-gray-600">{broker.spread_eur_usd} pips</p> </div> </div> {broker.features && broker.features.length > 0 && ( <div className="mt-3"> <div className="flex flex-wrap gap-1"> {broker.features.slice(0, 5).map((feature, index) => ( <Badge key={index} variant="secondary" className="text-xs"> {feature} </Badge> ))} {broker.features.length > 5 && ( <Badge variant="secondary" className="text-xs"> +{broker.features.length - 5} more </Badge> )} </div> </div> )} </div> </div> <div className="flex gap-2 ml-4"> <Button size="sm" variant="outline" onClick={() => toggleFeatured(broker)} className={`${broker.is_featured ? 'text-yellow-600 ' : ''} } > <Star className={`h-4 w-4 ${broker.is_featured ? 'fill-current' : ''}`} /> </Button> <Button size="sm" variant="outline" onClick={() => handleEdit(broker)} className="" > <Edit className="h-4 w-4" /> </Button> <Button size="sm" variant="outline" onClick={() => handleDelete(broker.id)} className="text-red-600 hover:text-red-700" > <Trash2 className="h-4 w-4" /> </Button> </div> </div> </CardContent> </Card> ))} {filteredBrokers.length === 0 && ( <Card className=""> <CardContent className="p-12 text-center"> <Building2 className="h-12 w-12 text-gray-400 mx-auto mb-4" /> <h3 className="text-lg font-medium text-gray-900 mb-2">No brokers found</h3> <p className="text-gray-600 mb-4"> {searchTerm ? 'No brokers match your search criteria.' : 'Get started by adding your first broker.'} </p> {!searchTerm && ( <Button onClick={() => setShowCreateForm(true)}> <Plus className="h-4 w-4 mr-2" /> Add Broker </Button> )} </CardContent> </Card> )} </div> </div> ); };