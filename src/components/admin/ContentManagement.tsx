import React, { useState, useEffect } from 'react'; import { supabase } from '../../lib/supabase'; import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'; import { Button } from '../ui/button'; import { Input } from '../ui/input'; import { Textarea } from '../ui/textarea'; import { Badge } from '../ui/badge'; import { Plus, Edit, Trash2, Search, FileText, Video, Image as ImageIcon } from 'lucide-react'; interface ContentItem { id: string; title: string; content_type: 'article' | 'video' | 'guide' | 'tutorial'; status: 'draft' | 'published' | 'archived'; content: string; meta_description?: string; tags?: string[]; created_at: string; updated_at: string; author_id: string; } export const ContentManagement: React.FC = () => { const [contentItems, setContentItems] = useState<ContentItem[]>([]); const [loading, setLoading] = useState(true); const [searchTerm, setSearchTerm] = useState(''); const [filterStatus, setFilterStatus] = useState<string>('all'); const [filterType, setFilterType] = useState<string>('all'); const [showCreateForm, setShowCreateForm] = useState(false); const [editingItem, setEditingItem] = useState<ContentItem | null>(null); const [formData, setFormData] = useState({ title: '', content_type: 'article' as ContentItem['content_type'], status: 'draft' as ContentItem['status'], content: '', meta_description: '', tags: '' }); useEffect(() => { fetchContentItems(); }, []); const fetchContentItems = async () => { try { const { data, error } = await supabase .from('content_items') .select('*') .order('created_at', { ascending: false }); if (error) throw error; setContentItems(data || []); } catch (error) { console.error('Error fetching content items:', error); } finally { setLoading(false); } }; const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); try { const contentData = { title: formData.title, content_type: formData.content_type, status: formData.status, content: formData.content, meta_description: formData.meta_description, tags: formData.tags ? formData.tags.split(',').map(tag => tag.trim()) : [] }; if (editingItem) { const { error } = await supabase .from('content_items') .update(contentData) .eq('id', editingItem.id); if (error) throw error; } else { const { error } = await supabase .from('content_items') .insert([contentData]); if (error) throw error; } // Reset form and refresh data setFormData({ title: '', content_type: 'article', status: 'draft', content: '', meta_description: '', tags: '' }); setShowCreateForm(false); setEditingItem(null); fetchContentItems(); } catch (error) { console.error('Error saving content item:', error); } }; const handleEdit = (item: ContentItem) => { setEditingItem(item); setFormData({ title: item.title, content_type: item.content_type, status: item.status, content: item.content, meta_description: item.meta_description || '', tags: item.tags?.join(', ') || '' }); setShowCreateForm(true); }; const handleDelete = async (id: string) => { if (!confirm('Are you sure you want to delete this content item?')) return; try { const { error } = await supabase .from('content_items') .delete() .eq('id', id); if (error) throw error; fetchContentItems(); } catch (error) { console.error('Error deleting content item:', error); } }; const getTypeIcon = (type: string) => { switch (type) { case 'video': return <Video className="h-4 w-4" />; case 'guide': return <FileText className="h-4 w-4" />; case 'tutorial': return <ImageIcon className="h-4 w-4" />; default: return <FileText className="h-4 w-4" />; } }; const getStatusColor = (status: string) => { switch (status) { case 'published': return 'bg-green-100 text-green-800'; case 'draft': return 'bg-yellow-100 text-yellow-800'; case 'archived': return 'bg-gray-100 text-gray-800'; default: return 'bg-gray-100 text-gray-800'; } }; const filteredItems = contentItems.filter(item => { const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) || item.content.toLowerCase().includes(searchTerm.toLowerCase()); const matchesStatus = filterStatus === 'all' || item.status === filterStatus; const matchesType = filterType === 'all' || item.content_type === filterType; return matchesSearch && matchesStatus && matchesType; }); if (loading) { return ( <div className="flex items-center justify-center h-64"> <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div> </div> ); } return ( <div className="space-y-6"> {/* Header */} <div className="flex justify-between items-center"> <div> <h2 className="text-2xl font-bold text-gray-900">Content Management</h2> <p className="text-gray-600">Create and manage educational content</p> </div> <Button onClick={() => { setShowCreateForm(true); setEditingItem(null); setFormData({ title: '', content_type: 'article', status: 'draft', content: '', meta_description: '', tags: '' }); }} className="flex items-center gap-2" > <Plus className="h-4 w-4" /> Create Content </Button> </div> {/* Filters */} <Card className=""> <CardContent className="p-4"> <div className="flex flex-wrap gap-4"> <div className="flex-1 min-w-64"> <div className="relative"> <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" /> <Input placeholder="Search content..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="pl-10" /> </div> </div> <select value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" > <option value="all">All Status</option> <option value="draft">Draft</option> <option value="published">Published</option> <option value="archived">Archived</option> </select> <select value={filterType} onChange={(e) => setFilterType(e.target.value)} className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" > <option value="all">All Types</option> <option value="article">Article</option> <option value="video">Video</option> <option value="guide">Guide</option> <option value="tutorial">Tutorial</option> </select> </div> </CardContent> </Card> {/* Create/Edit Form */} {showCreateForm && ( <Card className=""> <CardHeader> <CardTitle className="">{editingItem ? 'Edit Content' : 'Create New Content'}</CardTitle> <CardDescription className=""> {editingItem ? 'Update the content item' : 'Add a new content item to the platform'} </CardDescription> </CardHeader> <CardContent> <form onSubmit={handleSubmit} className="space-y-4"> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Title</label> <Input value={formData.title} onChange={(e) => setFormData({ ...formData, title: e.target.value })} required className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Type</label> <select value={formData.content_type} onChange={(e) => setFormData({ ...formData, content_type: e.target.value as ContentItem['content_type'] })} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" > <option value="article">Article</option> <option value="video">Video</option> <option value="guide">Guide</option> <option value="tutorial">Tutorial</option> </select> </div> </div> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Status</label> <select value={formData.status} onChange={(e) => setFormData({ ...formData, status: e.target.value as ContentItem['status'] })} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" > <option value="draft">Draft</option> <option value="published">Published</option> <option value="archived">Archived</option> </select> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Tags (comma-separated)</label> <Input value={formData.tags} onChange={(e) => setFormData({ ...formData, tags: e.target.value })} placeholder="forex, trading, beginner" className="" /> </div> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Meta Description</label> <Input value={formData.meta_description} onChange={(e) => setFormData({ ...formData, meta_description: e.target.value })} placeholder="Brief description for SEO" className="" /> </div> <div> <label className="block text-sm font-medium text-gray-700 mb-1">Content</label> <Textarea value={formData.content} onChange={(e) => setFormData({ ...formData, content: e.target.value })} rows={8} required className="" /> </div> <div className="flex gap-2"> <Button type="submit"> {editingItem ? 'Update Content' : 'Create Content'} </Button> <Button type="button" variant="outline" onClick={() => { setShowCreateForm(false); setEditingItem(null); }} > Cancel </Button> </div> </form> </CardContent> </Card> )} {/* Content List */} <div className="grid gap-4"> {filteredItems.map((item) => ( <Card key={item.id} className=""> <CardContent className="p-6"> <div className="flex items-start justify-between"> <div className="flex-1"> <div className="flex items-center gap-2 mb-2"> {getTypeIcon(item.content_type)} <h3 className="text-lg font-semibold">{item.title}</h3> <Badge className={getStatusColor(item.status)}> {item.status} </Badge> </div> <p className="text-gray-600 mb-3 line-clamp-2"> {item.meta_description || item.content.substring(0, 150) + '...'} </p> {item.tags && item.tags.length > 0 && ( <div className="flex flex-wrap gap-1 mb-3"> {item.tags.map((tag, index) => ( <Badge key={index} variant="secondary" className="text-xs"> {tag} </Badge> ))} </div> )} <div className="text-sm text-gray-500"> Created: {new Date(item.created_at).toLocaleDateString()} {item.updated_at !== item.created_at && ( <span className="ml-4"> Updated: {new Date(item.updated_at).toLocaleDateString()} </span> )} </div> </div> <div className="flex gap-2 ml-4"> <Button size="sm" variant="outline" onClick={() => handleEdit(item)} className="" > <Edit className="h-4 w-4" /> </Button> <Button size="sm" variant="outline" onClick={() => handleDelete(item.id)} className="text-red-600 hover:text-red-700" > <Trash2 className="h-4 w-4" /> </Button> </div> </div> </CardContent> </Card> ))} {filteredItems.length === 0 && ( <Card className=""> <CardContent className="p-12 text-center"> <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" /> <h3 className="text-lg font-medium text-gray-900 mb-2">No content found</h3> <p className="text-gray-600 mb-4"> {searchTerm || filterStatus !== 'all' || filterType !== 'all' ? 'No content matches your current filters.' : 'Get started by creating your first content item.'} </p> {!searchTerm && filterStatus === 'all' && filterType === 'all' && ( <Button onClick={() => setShowCreateForm(true)}> <Plus className="h-4 w-4 mr-2" /> Create Content </Button> )} </CardContent> </Card> )} </div> </div> ); };