import React, { useState, useEffect } from 'react'; import { supabase } from '../../lib/supabase'; import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'; import { Button } from '../ui/button'; import { Input } from '../ui/input'; import { Badge } from '../ui/badge'; import { Alert, AlertDescription } from '../ui/alert'; import { Settings, Database, Shield, RefreshCw, Download, Upload, Users, Server, Activity, CheckCircle, AlertTriangle, XCircle, BarChart3, HardDrive, Network, Zap, Clock, FileText, Monitor, Key, Globe, Mail, Bell, Palette, Plug, Lock, Eye, Edit, Trash2, Plus } from 'lucide-react'; interface SystemStats { totalUsers: number; activeUsers: number; totalBrokers: number; publishedContent: number; systemUptime: string; lastBackup: string; databaseSize: string; storageUsed: string; memoryUsage: string; apiResponseTime: number; errorRate: number; activeSessions: number; } interface SystemSetting { id: string; key: string; value: string | number | boolean; description: string; type: 'string' | 'number' | 'boolean' | 'json'; category: string; updated_at: string; } interface BackupJob { id: string; status: 'pending' | 'running' | 'completed' | 'failed'; type: 'database' | 'files' | 'full'; size?: string; created_at: string; completed_at?: string; file_url?: string; } interface SystemLog { id: string; level: 'info' | 'warning' | 'error' | 'debug'; message: string; source: string; user_id?: string; ip_address?: string; created_at: string; metadata?: Record<string, any>; } export const SystemManagement: React.FC = () => { const [stats, setStats] = useState<SystemStats>({ totalUsers: 0, activeUsers: 0, totalBrokers: 0, publishedContent: 0, systemUptime: '0 days', lastBackup: 'Never', databaseSize: '0 MB', storageUsed: '0 GB', memoryUsage: '0%', apiResponseTime: 0, errorRate: 0, activeSessions: 0 }); const [settings, setSettings] = useState<SystemSetting[]>([]); const [backups, setBackups] = useState<BackupJob[]>([]); const [logs, setLogs] = useState<SystemLog[]>([]); const [loading, setLoading] = useState(true); const [backupInProgress, setBackupInProgress] = useState(false); const [selectedSettingsCategory, setSelectedSettingsCategory] = useState<string>('general'); useEffect(() => { fetchSystemData(); }, []); const fetchSystemData = async () => { try { // Fetch user stats const { data: usersData } = await supabase.from('users').select('*'); const activeUsers = usersData?.filter(u => u.role === 'user').length || 0; // Fetch broker stats const { data: brokersData } = await supabase.from('brokers').select('*'); const activeBrokers = brokersData?.filter(b => b.is_active).length || 0; // Fetch content stats const { data: blogPosts } = await supabase.from('blog_posts').select('*').eq('status', 'published'); const { data: learningModules } = await supabase.from('learning_modules').select('*').eq('is_published', true); // Fetch recent activity const { data: recentLogs } = await supabase .from('admin_activity_log') .select('*') .order('created_at', { ascending: false }) .limit(10); setStats({ totalUsers: usersData?.length || 0, activeUsers: activeUsers, totalBrokers: brokersData?.length || 0, publishedContent: (blogPosts?.length || 0) + (learningModules?.length || 0), systemUptime: '15 days', lastBackup: '2 hours ago', databaseSize: '125 MB', storageUsed: '2.3 GB', memoryUsage: '65%', apiResponseTime: 120, errorRate: 0.02, activeSessions: 42 }); // Set logs from admin activity if (recentLogs) { setLogs(recentLogs.map(log => ({ id: log.id, level: log.action_type.includes('delete') ? 'error' : 'info', message: `${log.action_type} on ${log.target_table}`, source: 'Admin Panel', user_id: log.admin_user_id, ip_address: log.ip_address, created_at: log.created_at, metadata: { target_id: log.target_id, old_values: log.old_values, new_values: log.new_values } }))); } } catch (error) { console.error('Error fetching system data:', error); } finally { setLoading(false); } }; const handleBackup = async (type: BackupJob['type']) => { setBackupInProgress(true); try { // Simulate backup process await new Promise(resolve => setTimeout(resolve, 3000)); const newBackup: BackupJob = { id: Date.now().toString(), status: 'completed', type, size: type === 'database' ? '45 MB' : '1.2 GB', created_at: new Date().toISOString(), completed_at: new Date().toISOString(), file_url: `/backups/backup_${Date.now()}.zip` }; setBackups(prev => [newBackup, ...prev]); setStats(prev => ({ ...prev, lastBackup: 'Just now' })); // Log the backup await supabase.from('admin_activity_log').insert({ action_type: 'backup_created', target_table: 'system', new_values: { type, size: newBackup.size } }); } catch (error) { console.error('Error creating backup:', error); } finally { setBackupInProgress(false); } }; const handleExportData = async () => { try { // Export users const { data: users } = await supabase.from('users').select('*'); const { data: brokers } = await supabase.from('brokers').select('*'); const { data: blogPosts } = await supabase.from('blog_posts').select('*'); const exportData = { users, brokers, blogPosts, exported_at: new Date().toISOString() }; const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' }); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `system_export_${new Date().toISOString().split('T')[0]}.json`; a.click(); URL.revokeObjectURL(url); await supabase.from('admin_activity_log').insert({ action_type: 'data_export', target_table: 'system', new_values: { type: 'full_export' } }); } catch (error) { console.error('Error exporting data:', error); } }; const getLogLevelIcon = (level: string) => { switch (level) { case 'error': return <XCircle className="h-4 w-4 text-red-500" />; case 'warning': return <AlertTriangle className="h-4 w-4 text-yellow-500" />; case 'info': return <CheckCircle className="h-4 w-4 text-blue-500" />; default: return <Activity className="h-4 w-4 text-gray-500" />; } }; const getLogLevelColor = (level: string) => { switch (level) { case 'error': return 'bg-red-100 text-red-800'; case 'warning': return 'bg-yellow-100 text-yellow-800'; case 'info': return 'bg-blue-100 text-blue-800'; default: return 'bg-gray-100 text-gray-800'; } }; const formatBytes = (bytes: number, decimals = 2) => { if (bytes === 0) return '0 Bytes'; const k = 1024; const dm = decimals < 0 ? 0 : decimals; const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']; const i = Math.floor(Math.log(bytes) / Math.log(k)); return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i]; }; if (loading) { return ( <div className="flex items-center justify-center h-64"> <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div> </div> ); } return ( <div className="space-y-6"> {/* Header */} <div className="flex justify-between items-center"> <div> <h2 className="text-2xl font-bold text-gray-900">System Administration</h2> <p className="text-gray-600">Monitor and manage system settings, backups, and performance</p> </div> <div className="flex gap-2"> <Button variant="outline" onClick={handleExportData}> <Download className="h-4 w-4 mr-2" /> Export Data </Button> <Button onClick={() => fetchSystemData()}> <RefreshCw className="h-4 w-4 mr-2" /> Refresh </Button> </div> </div> {/* System Overview Stats */} <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4"> <Card className=""> <CardContent className="p-4"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-gray-600">Total Users</p> <p className="text-2xl font-bold text-gray-900">{stats.totalUsers}</p> <p className="text-xs text-green-600">{stats.activeUsers} active</p> </div> <Users className="h-8 w-8 text-blue-600" /> </div> </CardContent> </Card> <Card className=""> <CardContent className="p-4"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-gray-600">Database Size</p> <p className="text-2xl font-bold text-gray-900">{stats.databaseSize}</p> <p className="text-xs text-gray-500">Storage: {stats.storageUsed}</p> </div> <Database className="h-8 w-8 text-green-600" /> </div> </CardContent> </Card> <Card className=""> <CardContent className="p-4"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-gray-600">API Response</p> <p className="text-2xl font-bold text-gray-900">{stats.apiResponseTime}ms</p> <p className="text-xs text-gray-500">Error rate: {(stats.errorRate * 100).toFixed(2)}%</p> </div> <Zap className="h-8 w-8 text-purple-600" /> </div> </CardContent> </Card> <Card className=""> <CardContent className="p-4"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-gray-600">System Uptime</p> <p className="text-2xl font-bold text-gray-900">{stats.systemUptime}</p> <p className="text-xs text-green-600">Last backup: {stats.lastBackup}</p> </div> <Server className="h-8 w-8 text-orange-600" /> </div> </CardContent> </Card> </div> {/* Quick Actions */} <Card className=""> <CardHeader> <CardTitle className="">Quick Actions</CardTitle> <CardDescription className="">Common system administration tasks</CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-2 md:grid-cols-4 gap-4"> <Button variant="outline" className="h-16 flex-col" onClick={() => handleBackup('database')} disabled={backupInProgress} > <Database className="h-5 w-5 mb-1" /> <span className="text-sm"> {backupInProgress ? 'Backing up...' : 'Backup DB'} </span> </Button> <Button variant="outline" className="h-16 flex-col" onClick={() => handleBackup('files')} disabled={backupInProgress} > <HardDrive className="h-5 w-5 mb-1" /> <span className="text-sm"> {backupInProgress ? 'Backing up...' : 'Backup Files'} </span> </Button> <Button variant="outline" className="h-16 flex-col" onClick={handleExportData}> <Download className="h-5 w-5 mb-1" /> <span className="text-sm">Export All</span> </Button> <Button variant="outline" className="h-16 flex-col" onClick={() => fetchSystemData()}> <RefreshCw className="h-5 w-5 mb-1" /> <span className="text-sm">Refresh Stats</span> </Button> </div> </CardContent> </Card> {/* System Health */} <div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> {/* Performance Metrics */} <Card className=""> <CardHeader> <CardTitle className="">Performance Metrics</CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="flex justify-between items-center"> <span className="text-sm font-medium">CPU Usage</span> <div className="flex items-center gap-2"> <div className="w-24 bg-gray-200 rounded-full h-2"> <div className="bg-blue-600 h-2 rounded-full" style={{ width: '45%' }}></div> </div> <span className="text-sm">45%</span> </div> </div> <div className="flex justify-between items-center"> <span className="text-sm font-medium">Memory Usage</span> <div className="flex items-center gap-2"> <div className="w-24 bg-gray-200 rounded-full h-2"> <div className="bg-yellow-600 h-2 rounded-full" style={{ width: '65%' }}></div> </div> <span className="text-sm">{stats.memoryUsage}</span> </div> </div> <div className="flex justify-between items-center"> <span className="text-sm font-medium">Disk Usage</span> <div className="flex items-center gap-2"> <div className="w-24 bg-gray-200 rounded-full h-2"> <div className="bg-green-600 h-2 rounded-full" style={{ width: '78%' }}></div> </div> <span className="text-sm">78%</span> </div> </div> <div className="flex justify-between items-center"> <span className="text-sm font-medium">Active Connections</span> <div className="flex items-center gap-2"> <div className="w-24 bg-gray-200 rounded-full h-2"> <div className="bg-purple-600 h-2 rounded-full" style={{ width: '30%' }}></div> </div> <span className="text-sm">{stats.activeSessions}</span> </div> </div> </CardContent> </Card> {/* Recent Activity */} <Card className=""> <CardHeader> <CardTitle className="">Recent System Activity</CardTitle> </CardHeader> <CardContent> <div className="space-y-3 max-h-64 overflow-y-auto"> {logs.slice(0, 8).map((log) => ( <div key={log.id} className="flex items-start gap-3"> {getLogLevelIcon(log.level)} <div className="flex-1 min-w-0"> <div className="flex items-center gap-2 mb-1"> <Badge className={getLogLevelColor(log.level)}> {log.level} </Badge> <span className="text-xs text-gray-500"> {new Date(log.created_at).toLocaleTimeString()} </span> </div> <p className="text-sm truncate">{log.message}</p> <p className="text-xs text-gray-500">{log.source}</p> </div> </div> ))} {logs.length === 0 && ( <div className="text-center py-8"> <Activity className="h-8 w-8 text-gray-400 mx-auto mb-2" /> <p className="text-sm text-gray-500">No recent activity</p> </div> )} </div> </CardContent> </Card> </div> {/* System Information */} <Card className=""> <CardHeader> <CardTitle className="">System Information</CardTitle> <CardDescription className="">Current system configuration and status</CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-1 md:grid-cols-3 gap-6"> <div className="space-y-3"> <h3 className="font-semibold text-gray-900">Platform Information</h3> <div className="space-y-2 text-sm"> <div className="flex justify-between"> <span className="text-gray-600">Version:</span> <span className="font-medium">v2.1.0</span> </div> <div className="flex justify-between"> <span className="text-gray-600">Environment:</span> <span className="font-medium">Production</span> </div> <div className="flex justify-between"> <span className="text-gray-600">Framework:</span> <span className="font-medium">React + Vite</span> </div> <div className="flex justify-between"> <span className="text-gray-600">Database:</span> <span className="font-medium">Supabase</span> </div> </div> </div> <div className="space-y-3"> <h3 className="font-semibold text-gray-900">Services Status</h3> <div className="space-y-2 text-sm"> <div className="flex justify-between items-center"> <span className="text-gray-600">Database:</span> <div className="flex items-center gap-1"> <CheckCircle className="h-4 w-4 text-green-500" /> <span className="text-green-600">Healthy</span> </div> </div> <div className="flex justify-between items-center"> <span className="text-gray-600">Storage:</span> <div className="flex items-center gap-1"> <CheckCircle className="h-4 w-4 text-green-500" /> <span className="text-green-600">Operational</span> </div> </div> <div className="flex justify-between items-center"> <span className="text-gray-600">Authentication:</span> <div className="flex items-center gap-1"> <CheckCircle className="h-4 w-4 text-green-500" /> <span className="text-green-600">Active</span> </div> </div> <div className="flex justify-between items-center"> <span className="text-gray-600">API Gateway:</span> <div className="flex items-center gap-1"> <CheckCircle className="h-4 w-4 text-green-500" /> <span className="text-green-600">Running</span> </div> </div> </div> </div> <div className="space-y-3"> <h3 className="font-semibold text-gray-900">Security Status</h3> <div className="space-y-2 text-sm"> <div className="flex justify-between items-center"> <span className="text-gray-600">SSL Certificate:</span> <div className="flex items-center gap-1"> <CheckCircle className="h-4 w-4 text-green-500" /> <span className="text-green-600">Valid</span> </div> </div> <div className="flex justify-between items-center"> <span className="text-gray-600">Firewall:</span> <div className="flex items-center gap-1"> <Shield className="h-4 w-4 text-green-500" /> <span className="text-green-600">Enabled</span> </div> </div> <div className="flex justify-between items-center"> <span className="text-gray-600">Last Security Scan:</span> <span className="font-medium">2 days ago</span> </div> <div className="flex justify-between items-center"> <span className="text-gray-600">Threat Level:</span> <span className="text-green-600">Low</span> </div> </div> </div> </div> </CardContent> </Card> {/* Alerts */} <Alert> <AlertTriangle className="h-4 w-4" /> <AlertDescription> <strong>System Notice:</strong> Database backup is scheduled for daily at 2:00 AM UTC. System maintenance window is every Sunday from 1:00 AM to 3:00 AM UTC. </AlertDescription> </Alert> </div> ); };