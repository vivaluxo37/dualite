import React, { useState, useEffect } from 'react'; import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'; import { Button } from '../ui/button'; import { Input } from '../ui/input'; import { Badge } from '../ui/badge'; import { Users, Search, UserPlus, Edit, Shield, Calendar, Activity, MoreHorizontal, Download } from 'lucide-react'; import { useClerkAdmin } from '../../contexts/ClerkAdminContext'; interface UserManagementData { id: string; email: string; firstName?: string; lastName?: string; role: 'user' | 'admin' | 'super_admin'; lastLogin?: Date; createdAt: Date; isActive: boolean; brokerReviews?: number; aiMatches?: number; } export const UserManagement: React.FC = () => { const { hasPermission } = useClerkAdmin(); const [users, setUsers] = useState<UserManagementData[]>([]); const [loading, setLoading] = useState(true); const [searchTerm, setSearchTerm] = useState(''); const [roleFilter, setRoleFilter] = useState<string>('all'); const [statusFilter, setStatusFilter] = useState<string>('all'); const [selectedUsers, setSelectedUsers] = useState<string[]>([]); useEffect(() => { if (hasPermission('manage_users')) { fetchUsers(); } }, [hasPermission]); const fetchUsers = async () => { setLoading(true); try { // Simulated user data - in real app, fetch from Supabase const mockUsers: UserManagementData[] = [ { id: '1', email: 'contact@brokeranalysis.com', firstName: 'Admin', lastName: 'User', role: 'super_admin', lastLogin: new Date(), createdAt: new Date('2024-01-01'), isActive: true, brokerReviews: 0, aiMatches: 0 }, { id: '2', email: 'john@example.com', firstName: 'John', lastName: 'Doe', role: 'user', lastLogin: new Date(Date.now() - 86400000), // 1 day ago createdAt: new Date('2024-03-15'), isActive: true, brokerReviews: 5, aiMatches: 12 }, { id: '3', email: 'jane@example.com', firstName: 'Jane', lastName: 'Smith', role: 'user', lastLogin: new Date(Date.now() - 172800000), // 2 days ago createdAt: new Date('2024-02-20'), isActive: true, brokerReviews: 8, aiMatches: 25 }, { id: '4', email: 'inactive@example.com', firstName: 'Inactive', lastName: 'User', role: 'user', lastLogin: new Date(Date.now() - 604800000), // 7 days ago createdAt: new Date('2024-01-10'), isActive: false, brokerReviews: 2, aiMatches: 3 } ]; setUsers(mockUsers); } catch (error) { console.error('Error fetching users:', error); } finally { setLoading(false); } }; const filteredUsers = users.filter(user => { const matchesSearch = user.email.toLowerCase().includes(searchTerm.toLowerCase()) || `${user.firstName} ${user.lastName}`.toLowerCase().includes(searchTerm.toLowerCase()); const matchesRole = roleFilter === 'all' || user.role === roleFilter; const matchesStatus = statusFilter === 'all' || (statusFilter === 'active' && user.isActive) || (statusFilter === 'inactive' && !user.isActive); return matchesSearch && matchesRole && matchesStatus; }); const getRoleBadge = (role: string) => { switch (role) { case 'super_admin': return <Badge className="bg-purple-100 text-purple-800">Super Admin</Badge>; case 'admin': return <Badge className="bg-blue-100 text-blue-800">Admin</Badge>; default: return <Badge className="bg-gray-100 text-gray-800">User</Badge>; } }; const getStatusBadge = (isActive: boolean) => { return isActive ? <Badge className="bg-green-100 text-green-800">Active</Badge> : <Badge className="bg-red-100 text-red-800">Inactive</Badge>; }; const formatDate = (date: Date) => { return new Date(date).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }); }; const handleBulkAction = async (action: string) => { if (selectedUsers.length === 0) return; console.log(`Performing ${action} on users:`, selectedUsers); // In real app, perform bulk action via API setSelectedUsers([]); }; const exportUsers = () => { const csvData = [ ['Email', 'Name', 'Role', 'Status', 'Last Login', 'Created', 'Reviews', 'AI Matches'], ...filteredUsers.map(user => [ user.email, `${user.firstName} ${user.lastName}`, user.role, user.isActive ? 'Active' : 'Inactive', user.lastLogin ? formatDate(user.lastLogin) : 'Never', formatDate(user.createdAt), user.brokerReviews?.toString() || '0', user.aiMatches?.toString() || '0' ]) ]; const csvContent = csvData.map(row => row.join(',')).join('\n'); const blob = new Blob([csvContent], { type: 'text/csv' }); const url = window.URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = 'users_export.csv'; a.click(); window.URL.revokeObjectURL(url); }; if (!hasPermission('manage_users')) { return ( <Card className=""> <CardContent className="p-12 text-center"> <Shield className="h-12 w-12 text-gray-400 mx-auto mb-4" /> <h3 className="text-lg font-medium text-gray-900 mb-2">Access Denied</h3> <p className="text-gray-600"> You don't have permission to manage users. </p> </CardContent> </Card> ); } if (loading) { return ( <div className="flex items-center justify-center h-64"> <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div> </div> ); } return ( <div className="space-y-6"> {/* Header */} <div className="flex justify-between items-center"> <div> <h2 className="text-2xl font-bold text-gray-900">User Management</h2> <p className="text-gray-600">Manage registered users and their permissions</p> </div> <div className="flex gap-2"> <Button variant="outline" onClick={exportUsers}> <Download className="h-4 w-4 mr-2" /> Export CSV </Button> <Button> <UserPlus className="h-4 w-4 mr-2" /> Invite User </Button> </div> </div> {/* Stats Cards */} <div className="grid grid-cols-1 md:grid-cols-4 gap-4"> <Card className=""> <CardContent className="p-4"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-gray-600">Total Users</p> <p className="text-2xl font-bold text-gray-900">{users.length}</p> </div> <Users className="h-8 w-8 text-blue-600" /> </div> </CardContent> </Card> <Card className=""> <CardContent className="p-4"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-gray-600">Active Users</p> <p className="text-2xl font-bold text-gray-900">{users.filter(u => u.isActive).length}</p> </div> <Activity className="h-8 w-8 text-green-600" /> </div> </CardContent> </Card> <Card className=""> <CardContent className="p-4"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-gray-600">Admin Users</p> <p className="text-2xl font-bold text-gray-900">{users.filter(u => u.role !== 'user').length}</p> </div> <Shield className="h-8 w-8 text-purple-600" /> </div> </CardContent> </Card> <Card className=""> <CardContent className="p-4"> <div className="flex items-center justify-between"> <div> <p className="text-sm text-gray-600">New This Month</p> <p className="text-2xl font-bold text-gray-900"> {users.filter(u => new Date(u.createdAt) > new Date(Date.now() - 2592000000)).length} </p> </div> <Calendar className="h-8 w-8 text-orange-600" /> </div> </CardContent> </Card> </div> {/* Filters and Search */} <Card className=""> <CardContent className="p-4"> <div className="flex flex-col lg:flex-row gap-4"> <div className="relative flex-1"> <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" /> <Input placeholder="Search users by email or name..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="pl-10" /> </div> <div className="flex gap-2"> <select value={roleFilter} onChange={(e) => setRoleFilter(e.target.value)} className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" > <option value="all">All Roles</option> <option value="user">Users</option> <option value="admin">Admins</option> <option value="super_admin">Super Admins</option> </select> <select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)} className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" > <option value="all">All Status</option> <option value="active">Active</option> <option value="inactive">Inactive</option> </select> </div> </div> {/* Bulk Actions */} {selectedUsers.length > 0 && ( <div className="flex items-center justify-between mt-4 pt-4 border-t"> <span className="text-sm text-gray-600"> {selectedUsers.length} user(s) selected </span> <div className="flex gap-2"> <Button variant="outline" size="sm" onClick={() => handleBulkAction('activate')} > Activate </Button> <Button variant="outline" size="sm" onClick={() => handleBulkAction('deactivate')} > Deactivate </Button> <Button variant="outline" size="sm" onClick={() => handleBulkAction('delete')} className="text-red-600" > Delete </Button> </div> </div> )} </CardContent> </Card> {/* Users Table */} <Card className=""> <CardHeader> <CardTitle className="">Registered Users</CardTitle> <CardDescription className=""> {filteredUsers.length} user(s) found </CardDescription> </CardHeader> <CardContent> <div className="overflow-x-auto"> <table className="w-full"> <thead> <tr className="border-b"> <th className="text-left p-3"> <input type="checkbox" checked={selectedUsers.length === filteredUsers.length} onChange={(e) => { if (e.target.checked) { setSelectedUsers(filteredUsers.map(u => u.id)); } else { setSelectedUsers([]); } }} /> </th> <th className="text-left p-3">User</th> <th className="text-left p-3">Role</th> <th className="text-left p-3">Status</th> <th className="text-left p-3">Activity</th> <th className="text-left p-3">Reviews</th> <th className="text-left p-3">AI Matches</th> <th className="text-left p-3">Actions</th> </tr> </thead> <tbody> {filteredUsers.map((user) => ( <tr key={user.id} className="border-b hover:bg-gray-50"> <td className="p-3"> <input type="checkbox" checked={selectedUsers.includes(user.id)} onChange={(e) => { if (e.target.checked) { setSelectedUsers([...selectedUsers, user.id]); } else { setSelectedUsers(selectedUsers.filter(id => id !== user.id)); } }} /> </td> <td className="p-3"> <div className="flex items-center gap-3"> <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center"> <span className="text-sm font-medium text-blue-600"> {user.firstName?.[0] || user.email[0]} </span> </div> <div> <div className="font-medium"> {user.firstName} {user.lastName} </div> <div className="text-sm text-gray-600">{user.email}</div> </div> </div> </td> <td className="p-3"> {getRoleBadge(user.role)} </td> <td className="p-3"> {getStatusBadge(user.isActive)} </td> <td className="p-3"> <div className="text-sm"> <div className="">Created: {formatDate(user.createdAt)}</div> {user.lastLogin && ( <div className="text-gray-600"> Last login: {formatDate(user.lastLogin)} </div> )} </div> </td> <td className="p-3"> <div className="text-center">{user.brokerReviews || 0}</div> </td> <td className="p-3"> <div className="text-center">{user.aiMatches || 0}</div> </td> <td className="p-3"> <div className="flex gap-2"> <Button size="sm" variant="outline" className=""> <Edit className="h-4 w-4" /> </Button> <Button size="sm" variant="outline" className=""> <MoreHorizontal className="h-4 w-4" /> </Button> </div> </td> </tr> ))} </tbody> </table> </div> {filteredUsers.length === 0 && ( <div className="text-center py-12"> <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" /> <h3 className="text-lg font-medium text-gray-900 mb-2">No users found</h3> <p className="text-gray-600"> {searchTerm || roleFilter !== 'all' || statusFilter !== 'all' ? 'No users match your current filters.' : 'No users have registered yet.'} </p> </div> )} </CardContent> </Card> </div> ); };