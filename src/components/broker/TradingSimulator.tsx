import { useState, useEffect } from 'react' import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card' import { Button } from '@/components/ui/button' import { Badge } from '@/components/ui/badge' import { Progress } from '@/components/ui/progress' import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs' import { TrendingUp, TrendingDown, DollarSign, BarChart3, Clock, Target, AlertTriangle, CheckCircle, RefreshCw, Play, Pause, SkipForward, SkipBack } from 'lucide-react' interface Trade { id: string symbol: string type: 'buy' | 'sell' entryPrice: number currentPrice: number lotSize: number pipValue: number profit: number profitPercent: number status: 'open' | 'closed' openTime: string closeTime?: string duration: string } interface TradingSimulatorProps { broker: { name: string spreads_avg?: number commission_structure?: { type: string amount?: number } leverage_max?: number platforms?: string[] } } const symbols = [ { symbol: 'EUR/USD', name: 'Euro/US Dollar', pipValue: 10 }, { symbol: 'GBP/USD', name: 'British Pound/US Dollar', pipValue: 10 }, { symbol: 'USD/JPY', name: 'US Dollar/Japanese Yen', pipValue: 9.13 }, { symbol: 'AUD/USD', name: 'Australian Dollar/US Dollar', pipValue: 10 }, { symbol: 'USD/CAD', name: 'US Dollar/Canadian Dollar', pipValue: 7.89 }, { symbol: 'NZD/USD', name: 'New Zealand Dollar/US Dollar', pipValue: 10 } ] export function TradingSimulator({ broker }: TradingSimulatorProps) { const [balance, setBalance] = useState<number>(10000) const [equity, setEquity] = useState<number>(10000) const [margin, setMargin] = useState<number>(0) const [freeMargin, setFreeMargin] = useState<number>(10000) const [marginLevel, setMarginLevel] = useState<number>(100) const [selectedSymbol, setSelectedSymbol] = useState<string>('EUR/USD') const [lotSize, setLotSize] = useState<number>(0.01) const [leverage, setLeverage] = useState<number>(broker.leverage_max || 100) const [isSimulating, setIsSimulating] = useState<boolean>(false) const [simulationSpeed, setSimulationSpeed] = useState<number>(1000) const [trades, setTrades] = useState<Trade[]>([]) const [marketData, setMarketData] = useState<{[key: string]: number}>({ 'EUR/USD': 1.0850, 'GBP/USD': 1.2750, 'USD/JPY': 149.50, 'AUD/USD': 0.6550, 'USD/CAD': 1.3650, 'NZD/USD': 0.6150 }) const currentSymbol = symbols.find(s => s.symbol === selectedSymbol) const currentPrice = marketData[selectedSymbol] || 1.0850 const spread = broker.spreads_avg || 0.8 const commission = broker.commission_structure?.amount || 0 useEffect(() => { let interval: NodeJS.Timeout if (isSimulating) { interval = setInterval(() => { setMarketData(prev => { const newData = { ...prev } Object.keys(newData).forEach(symbol => { const change = (Math.random() - 0.5) * 0.002 newData[symbol] = Math.max(0.0001, newData[symbol] * (1 + change)) }) return newData }) }, simulationSpeed) } return () => clearInterval(interval) }, [isSimulating, simulationSpeed]) useEffect(() => { // Update equity and margin levels const openTrades = trades.filter(t => t.status === 'open') const totalProfit = openTrades.reduce((sum, trade) => sum + trade.profit, 0) const newEquity = balance + totalProfit setEquity(newEquity) setFreeMargin(newEquity - margin) setMarginLevel(margin > 0 ? (newEquity / margin) * 100 : 100) }, [balance, trades, margin]) const openTrade = (type: 'buy' | 'sell') => { if (lotSize <= 0 || lotSize > 10) return const requiredMargin = (lotSize * 100000 * currentPrice) / leverage if (requiredMargin > freeMargin) return const entryPrice = type === 'buy' ? currentPrice + (spread / 10000) : currentPrice - (spread / 10000) const trade: Trade = { id: Date.now().toString(), symbol: selectedSymbol, type, entryPrice, currentPrice: entryPrice, lotSize, pipValue: currentSymbol?.pipValue || 10, profit: 0, profitPercent: 0, status: 'open', openTime: new Date().toISOString(), duration: '0:00' } setTrades(prev => [...prev, trade]) setMargin(prev => prev + requiredMargin) } const closeTrade = (tradeId: string) => { const trade = trades.find(t => t.id === tradeId) if (!trade || trade.status === 'closed') return const finalProfit = trade.profit const newBalance = balance + finalProfit setBalance(newBalance) setTrades(prev => prev.map(t => t.id === tradeId ? { ...t, status: 'closed' as const, closeTime: new Date().toISOString(), profit: finalProfit } : t )) setMargin(prev => prev - ((trade.lotSize * 100000 * trade.entryPrice) / leverage)) } const updateTradeProfits = () => { setTrades(prev => prev.map(trade => { if (trade.status === 'closed') return trade const currentMarketPrice = marketData[trade.symbol] let profit: number if (trade.type === 'buy') { profit = (currentMarketPrice - trade.entryPrice) * trade.lotSize * trade.pipValue * 10000 } else { profit = (trade.entryPrice - currentMarketPrice) * trade.lotSize * trade.pipValue * 10000 } profit -= (commission || 0) * trade.lotSize return { ...trade, currentPrice: currentMarketPrice, profit, profitPercent: (profit / (trade.lotSize * 100000)) * 100, duration: Math.floor((Date.now() - new Date(trade.openTime).getTime()) / 1000) + 's' } })) } useEffect(() => { updateTradeProfits() }, [marketData]) const resetSimulator = () => { setBalance(10000) setEquity(10000) setMargin(0) setFreeMargin(10000) setMarginLevel(100) setTrades([]) setIsSimulating(false) } const openTrades = trades.filter(t => t.status === 'open') const closedTrades = trades.filter(t => t.status === 'closed') const totalProfit = closedTrades.reduce((sum, trade) => sum + trade.profit, 0) return ( <div className="space-y-6"> <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4"> <Card> <CardContent className="p-4"> <div className="flex items-center gap-2"> <DollarSign className="h-4 w-4 text-green-600" /> <span className="text-sm font-medium">Balance</span> </div> <div className="text-2xl font-bold mt-1">${balance.toFixed(2)}</div> </CardContent> </Card> <Card> <CardContent className="p-4"> <div className="flex items-center gap-2"> <BarChart3 className="h-4 w-4 text-blue-600" /> <span className="text-sm font-medium">Equity</span> </div> <div className="text-2xl font-bold mt-1">${equity.toFixed(2)}</div> </CardContent> </Card> <Card> <CardContent className="p-4"> <div className="flex items-center gap-2"> <Target className="h-4 w-4 text-purple-600" /> <span className="text-sm font-medium">Margin</span> </div> <div className="text-2xl font-bold mt-1">${margin.toFixed(2)}</div> </CardContent> </Card> <Card> <CardContent className="p-4"> <div className="flex items-center gap-2"> <AlertTriangle className={`h-4 w-4 ${marginLevel < 100 ? 'text-red-600' : 'text-green-600'}`} /> <span className="text-sm font-medium">Margin Level</span> </div> <div className={`text-2xl font-bold mt-1 ${marginLevel < 100 ? 'text-red-600' : 'text-green-600'}`}> {marginLevel.toFixed(1)}% </div> </CardContent> </Card> </div> <Tabs value="trading" onValueChange={() => {}} className="space-y-4"> <TabsList className="grid w-full grid-cols-3"> <TabsTrigger value="trading">Trading Panel</TabsTrigger> <TabsTrigger value="trades">Open Trades ({openTrades.length})</TabsTrigger> <TabsTrigger value="history">Trade History ({closedTrades.length})</TabsTrigger> </TabsList> <TabsContent value="trading"> <div className="grid md:grid-cols-2 gap-6"> <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <BarChart3 className="h-5 w-5" /> Market Data </CardTitle> <div className="flex items-center gap-2"> <Button variant={isSimulating ? "default" : "outline"} size="sm" onClick={() => setIsSimulating(!isSimulating)} > {isSimulating ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />} {isSimulating ? 'Pause' : 'Start'} Simulation </Button> <Button variant="outline" size="sm" onClick={resetSimulator}> <RefreshCw className="h-4 w-4" /> Reset </Button> </div> </CardHeader> <CardContent> <div className="space-y-4"> <div> <label className="block text-sm font-medium mb-2">Symbol</label> <select value={selectedSymbol} onChange={(e) => setSelectedSymbol(e.target.value)} className="w-full p-2 border rounded-lg" > {symbols.map(symbol => ( <option key={symbol.symbol} value={symbol.symbol}> {symbol.symbol} - {symbol.name} </option> ))} </select> </div> <div className="grid grid-cols-2 gap-4"> <div> <label className="block text-sm font-medium mb-1">Current Price</label> <div className="text-2xl font-bold">{currentPrice.toFixed(4)}</div> </div> <div> <label className="block text-sm font-medium mb-1">Spread</label> <div className="text-lg font-medium">{spread} pips</div> </div> </div> <div> <label className="block text-sm font-medium mb-2">Lot Size: {lotSize}</label> <input type="range" min="0.01" max="10" step="0.01" value={lotSize} onChange={(e) => setLotSize(Number(e.target.value))} className="w-full" /> <div className="flex justify-between text-xs text-muted-foreground mt-1"> <span>0.01 lots</span> <span>10 lots</span> </div> </div> <div> <label className="block text-sm font-medium mb-2">Leverage: 1:{leverage}</label> <input type="range" min="1" max={broker.leverage_max || 500} step="1" value={leverage} onChange={(e) => setLeverage(Number(e.target.value))} className="w-full" /> </div> <div className="grid grid-cols-2 gap-4"> <Button variant="default" onClick={() => openTrade('buy')} disabled={lotSize <= 0 || lotSize > 10} > <TrendingUp className="h-4 w-4 mr-2" /> Buy </Button> <Button variant="destructive" onClick={() => openTrade('sell')} disabled={lotSize <= 0 || lotSize > 10} > <TrendingDown className="h-4 w-4 mr-2" /> Sell </Button> </div> </div> </CardContent> </Card> <Card> <CardHeader> <CardTitle>Account Summary</CardTitle> </CardHeader> <CardContent> <div className="space-y-4"> <div> <div className="flex justify-between items-center mb-2"> <span className="text-sm font-medium">Free Margin</span> <span className="font-bold">${freeMargin.toFixed(2)}</span> </div> <Progress value={(freeMargin / equity) * 100} className="h-2" /> </div> <div className="space-y-2"> <div className="flex justify-between items-center"> <span className="text-sm">Open Trades</span> <Badge variant="outline">{openTrades.length}</Badge> </div> <div className="flex justify-between items-center"> <span className="text-sm">Total Trades</span> <Badge variant="outline">{trades.length}</Badge> </div> <div className="flex justify-between items-center"> <span className="text-sm">Total Profit/Loss</span> <Badge variant={totalProfit >= 0 ? "default" : "destructive"}> ${totalProfit.toFixed(2)} </Badge> </div> </div> <div className="p-4 bg-muted rounded-lg"> <h4 className="font-medium mb-2">Trading Conditions</h4> <div className="space-y-1 text-sm"> <div className="flex justify-between"> <span>Avg Spread:</span> <span>{spread} pips</span> </div> <div className="flex justify-between"> <span>Commission:</span> <span>${commission}/lot</span> </div> <div className="flex justify-between"> <span>Max Leverage:</span> <span>1:{broker.leverage_max || 100}</span> </div> </div> </div> </div> </CardContent> </Card> </div> </TabsContent> <TabsContent value="trades"> <Card> <CardHeader> <CardTitle>Open Positions</CardTitle> </CardHeader> <CardContent> {openTrades.length === 0 ? ( <div className="text-center py-8"> <AlertTriangle className="h-12 w-12 text-muted-foreground mx-auto mb-4" /> <h3 className="text-lg font-semibold mb-2">No open trades</h3> <p className="text-muted-foreground">Start trading to see your open positions here.</p> </div> ) : ( <div className="space-y-4"> {openTrades.map(trade => ( <Card key={trade.id} className="p-4"> <div className="flex items-center justify-between"> <div className="space-y-2"> <div className="flex items-center gap-2"> <Badge variant={trade.type === 'buy' ? 'default' : 'destructive'}> {trade.type.toUpperCase()} </Badge> <span className="font-medium">{trade.symbol}</span> <Badge variant="outline">{trade.lotSize} lots</Badge> </div> <div className="grid grid-cols-3 gap-4 text-sm"> <div> <span className="text-muted-foreground">Entry: </span> <span className="font-medium">{trade.entryPrice.toFixed(4)}</span> </div> <div> <span className="text-muted-foreground">Current: </span> <span className="font-medium">{trade.currentPrice.toFixed(4)}</span> </div> <div> <span className="text-muted-foreground">Duration: </span> <span className="font-medium">{trade.duration}</span> </div> </div> </div> <div className="text-right space-y-2"> <div className={`text-lg font-bold ${trade.profit >= 0 ? 'text-green-600' : 'text-red-600'}`}> ${trade.profit.toFixed(2)} </div> <div className={`text-sm ${trade.profitPercent >= 0 ? 'text-green-600' : 'text-red-600'}`}> {trade.profitPercent.toFixed(2)}% </div> <Button variant="outline" size="sm" onClick={() => closeTrade(trade.id)} > Close Trade </Button> </div> </div> </Card> ))} </div> )} </CardContent> </Card> </TabsContent> <TabsContent value="history"> <Card> <CardHeader> <CardTitle>Trade History</CardTitle> </CardHeader> <CardContent> {closedTrades.length === 0 ? ( <div className="text-center py-8"> <Clock className="h-12 w-12 text-muted-foreground mx-auto mb-4" /> <h3 className="text-lg font-semibold mb-2">No trade history</h3> <p className="text-muted-foreground">Your completed trades will appear here.</p> </div> ) : ( <div className="space-y-4"> {closedTrades.map(trade => ( <Card key={trade.id} className="p-4"> <div className="flex items-center justify-between"> <div className="space-y-2"> <div className="flex items-center gap-2"> <Badge variant={trade.type === 'buy' ? 'default' : 'destructive'}> {trade.type.toUpperCase()} </Badge> <span className="font-medium">{trade.symbol}</span> <Badge variant="outline">{trade.lotSize} lots</Badge> <CheckCircle className="h-4 w-4 text-green-600" /> </div> <div className="grid grid-cols-4 gap-4 text-sm"> <div> <span className="text-muted-foreground">Entry: </span> <span className="font-medium">{trade.entryPrice.toFixed(4)}</span> </div> <div> <span className="text-muted-foreground">Close: </span> <span className="font-medium">{trade.currentPrice.toFixed(4)}</span> </div> <div> <span className="text-muted-foreground">Duration: </span> <span className="font-medium">{trade.duration}</span> </div> <div> <span className="text-muted-foreground">Status: </span> <Badge variant="outline">Closed</Badge> </div> </div> </div> <div className="text-right"> <div className={`text-lg font-bold ${trade.profit >= 0 ? 'text-green-600' : 'text-red-600'}`}> ${trade.profit.toFixed(2)} </div> <div className={`text-sm ${trade.profitPercent >= 0 ? 'text-green-600' : 'text-red-600'}`}> {trade.profitPercent.toFixed(2)}% </div> </div> </div> </Card> ))} </div> )} </CardContent> </Card> </TabsContent> </Tabs> </div> ) }