import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card' import { Button } from '@/components/ui/button' import { Badge } from '@/components/ui/badge' import { Star, ExternalLink, Check } from 'lucide-react' import { cn } from '@/utils/cn' import { Link } from 'react-router-dom' export interface Broker { id: string name: string logo?: string rating: number maxRating: number regulation: string[] minDeposit: string spread: string leverage: string platforms: string[] features: string[] websiteUrl: string description?: string } interface BrokerCardProps { broker: Broker className?: string } export function BrokerCard({ broker, className }: BrokerCardProps) { const renderStars = () => { const stars = [] const fullStars = Math.floor(broker.rating) const hasHalfStar = broker.rating % 1 !== 0 for (let i = 0; i < fullStars; i++) { stars.push(<Star key={i} className="w-4 h-4 fill-yellow-400 text-yellow-400" />) } if (hasHalfStar) { stars.push(<Star key="half" className="w-4 h-4 fill-yellow-400/50 text-yellow-400" />) } const emptyStars = broker.maxRating - Math.ceil(broker.rating) for (let i = 0; i < emptyStars; i++) { stars.push(<Star key={`empty-${i}`} className="w-4 h-4 text-gray-300" />) } return stars } return ( <Card className={cn("h-full hover:shadow-lg transition-shadow", className)}> <CardHeader> <div className="flex items-start justify-between"> <div className="flex-1"> <CardTitle className="text-xl mb-2">{broker.name}</CardTitle> <div className="flex items-center gap-2 mb-2"> <div className="flex items-center gap-1"> {renderStars()} </div> <span className="text-sm text-muted-foreground"> {broker.rating}/{broker.maxRating} </span> </div> <div className="flex flex-wrap gap-1"> {broker.regulation.map((reg) => ( <Badge key={reg} variant="secondary" className="text-xs"> {reg} </Badge> ))} </div> </div> {broker.logo && ( <div className="w-12 h-12 bg-muted rounded-lg flex items-center justify-center"> <span className="text-lg font-bold">{broker.logo}</span> </div> )} </div> </CardHeader> <CardContent> <div className="space-y-3"> {broker.description && ( <p className="text-sm text-muted-foreground">{broker.description}</p> )} <div className="grid grid-cols-2 gap-3 text-sm"> <div> <span className="text-muted-foreground">Min Deposit:</span> <span className="font-medium ml-1">{broker.minDeposit}</span> </div> <div> <span className="text-muted-foreground">Spread:</span> <span className="font-medium ml-1">{broker.spread}</span> </div> <div> <span className="text-muted-foreground">Leverage:</span> <span className="font-medium ml-1">{broker.leverage}</span> </div> <div> <span className="text-muted-foreground">Platforms:</span> <span className="font-medium ml-1">{broker.platforms[0]}</span> </div> </div> <div className="space-y-2"> <h4 className="font-medium text-sm">Key Features:</h4> <ul className="space-y-1"> {broker.features.slice(0, 3).map((feature, index) => ( <li key={index} className="flex items-center gap-2 text-sm text-muted-foreground"> <Check className="w-3 h-3 text-green-500 flex-shrink-0" /> {feature} </li> ))} {broker.features.length > 3 && ( <li className="text-sm text-muted-foreground"> +{broker.features.length - 3} more features </li> )} </ul> </div> <div className="flex gap-2 mt-4"> <Button className="flex-1" asChild> <a href={broker.websiteUrl} target="_blank" rel="noopener noreferrer"> Visit {broker.name} <ExternalLink className="w-4 h-4 ml-2" /> </a> </Button> <Button variant="outline" className="flex-1" asChild> <Link to={`/forex-brokers/${broker.name.toLowerCase().replace(/\s+/g, '-')}`}> View Review </Link> </Button> </div> </div> </CardContent> </Card> ) }