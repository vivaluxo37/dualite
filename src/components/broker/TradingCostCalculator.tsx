import { useState } from 'react' import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card' import { Button } from '@/components/ui/button' import { Badge } from '@/components/ui/badge' import { Progress } from '@/components/ui/progress' import { Calculator, TrendingUp, DollarSign, Percent } from 'lucide-react' interface TradingCostCalculatorProps { broker: { name: string spreads_avg?: number commission_structure?: { type: string amount?: number } account_fees?: { withdrawal?: number inactivity?: number } } } export function TradingCostCalculator({ broker }: TradingCostCalculatorProps) { const [accountType, setAccountType] = useState<'standard' | 'ecn'>('standard') const [monthlyVolume, setMonthlyVolume] = useState<number>(50) const [avgTradeSize, setAvgTradeSize] = useState<number>(1.0) const [currencyPair, setCurrencyPair] = useState<string>('EUR/USD') const calculateCosts = () => { const avgSpread = broker.spreads_avg || 0.8 const commissionPerLot = accountType === 'ecn' ? (broker.commission_structure?.amount || 3.5) : 0 const spreadCostPerLot = avgSpread * 10 // Assuming standard lot size const commissionPerTrade = commissionPerLot * avgTradeSize const spreadCostPerTrade = spreadCostPerLot * avgTradeSize const monthlyTrades = monthlyVolume / avgTradeSize const totalSpreadCost = spreadCostPerTrade * monthlyTrades const totalCommissionCost = commissionPerTrade * monthlyTrades const otherFees = (broker.account_fees?.withdrawal || 0) * 2 + (broker.account_fees?.inactivity || 0) const totalCost = totalSpreadCost + totalCommissionCost + otherFees const effectiveSpread = totalCost / (monthlyVolume * 100000) * 10000 // Convert to pips return { spreadCost: totalSpreadCost, commissionCost: totalCommissionCost, otherFees, totalCost, effectiveSpread: effectiveSpread.toFixed(2), costPerTrade: (totalCost / monthlyTrades).toFixed(2) } } const costs = calculateCosts() return ( <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Calculator className="h-5 w-5" /> Trading Cost Calculator </CardTitle> </CardHeader> <CardContent> <div className="grid md:grid-cols-2 gap-6"> {/* Inputs */} <div className="space-y-4"> <div> <label className="block text-sm font-medium mb-2">Account Type</label> <div className="flex gap-2"> <Button variant={accountType === 'standard' ? 'default' : 'outline'} size="sm" onClick={() => setAccountType('standard')} className="flex-1" > Standard </Button> <Button variant={accountType === 'ecn' ? 'default' : 'outline'} size="sm" onClick={() => setAccountType('ecn')} className="flex-1" > ECN/STP </Button> </div> </div> <div> <label className="block text-sm font-medium mb-2"> Monthly Volume (lots): {monthlyVolume} </label> <input type="range" min="1" max="1000" value={monthlyVolume} onChange={(e) => setMonthlyVolume(Number(e.target.value))} className="w-full" /> <div className="flex justify-between text-xs text-muted-foreground mt-1"> <span>1 lot</span> <span>1000 lots</span> </div> </div> <div> <label className="block text-sm font-medium mb-2"> Average Trade Size (lots): {avgTradeSize} </label> <input type="range" min="0.01" max="10" step="0.01" value={avgTradeSize} onChange={(e) => setAvgTradeSize(Number(e.target.value))} className="w-full" /> <div className="flex justify-between text-xs text-muted-foreground mt-1"> <span>0.01 lots</span> <span>10 lots</span> </div> </div> <div> <label className="block text-sm font-medium mb-2">Currency Pair</label> <select value={currencyPair} onChange={(e) => setCurrencyPair(e.target.value)} className="w-full p-2 border rounded-lg" > <option value="EUR/USD">EUR/USD</option> <option value="GBP/USD">GBP/USD</option> <option value="USD/JPY">USD/JPY</option> <option value="AUD/USD">AUD/USD</option> </select> </div> </div> {/* Results */} <div className="space-y-4"> <div className="p-4 bg-blue-50 rounded-lg"> <h4 className="font-semibold mb-2">Estimated Monthly Cost</h4> <div className="text-3xl font-bold text-blue-600 mb-2"> ${costs.totalCost.toFixed(2)} </div> <div className="text-sm text-muted-foreground"> Based on your trading volume and average spreads </div> </div> <div className="space-y-3"> <div className="flex justify-between items-center"> <span className="flex items-center gap-2"> <TrendingUp className="h-4 w-4" /> Spread Costs: </span> <span className="font-bold">${costs.spreadCost.toFixed(2)}</span> </div> <div className="flex justify-between items-center"> <span className="flex items-center gap-2"> <Percent className="h-4 w-4" /> Commission: </span> <span className="font-bold">${costs.commissionCost.toFixed(2)}</span> </div> <div className="flex justify-between items-center"> <span className="flex items-center gap-2"> <DollarSign className="h-4 w-4" /> Other Fees: </span> <span className="font-bold">${costs.otherFees.toFixed(2)}</span> </div> <div className="border-t pt-3 flex justify-between items-center"> <span className="font-medium">Cost per Trade:</span> <span className="font-bold text-lg">${costs.costPerTrade}</span> </div> <div className="flex justify-between items-center"> <span className="font-medium">Effective Spread:</span> <span className="font-bold text-lg">{costs.effectiveSpread} pips</span> </div> </div> <div className="p-3 bg-muted rounded-lg"> <div className="flex items-center justify-between"> <span className="text-sm font-medium">Account Type:</span> <Badge variant={accountType === 'standard' ? 'secondary' : 'default'}> {accountType === 'standard' ? 'Standard' : 'ECN/STP'} </Badge> </div> <div className="flex items-center justify-between mt-1"> <span className="text-sm font-medium">Monthly Trades:</span> <span className="text-sm font-bold">{(monthlyVolume / avgTradeSize).toFixed(0)}</span> </div> </div> </div> </div> </CardContent> </Card> ) }