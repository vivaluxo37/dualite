import { useState } from 'react' import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card' import { Button } from '@/components/ui/button' import { Badge } from '@/components/ui/badge' import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs' import { Play, Pause, Volume2, VolumeX, Maximize, Download, Image as ImageIcon, Video, FileText, ExternalLink, ChevronLeft, ChevronRight, X } from 'lucide-react' interface MediaItem { id: string type: 'image' | 'video' | 'pdf' | 'webinar' title: string description: string url: string thumbnail?: string duration?: string size?: string category: string tags: string[] featured?: boolean } interface BrokerMediaGalleryProps { broker: { name: string platforms?: string[] educational_resources?: string[] } } export function BrokerMediaGallery({ broker }: BrokerMediaGalleryProps) { const [selectedCategory, setSelectedCategory] = useState<string>('all') const [selectedMedia, setSelectedMedia] = useState<MediaItem | null>(null) const [isPlaying, setIsPlaying] = useState<boolean>(false) const [isMuted, setIsMuted] = useState<boolean>(false) const [currentIndex, setCurrentIndex] = useState<number>(0) const defaultMedia: MediaItem[] = [ { id: '1', type: 'video', title: `${broker.name} Platform Overview`, description: 'Complete walkthrough of the trading platform features and interface', url: '/videos/platform-overview.mp4', thumbnail: '/images/platform-thumb.jpg', duration: '12:45', category: 'platform', tags: ['tutorial', 'platform', 'beginner'], featured: true }, { id: '2', type: 'video', title: 'Advanced Trading Strategies', description: 'Learn advanced trading techniques and risk management', url: '/videos/advanced-strategies.mp4', thumbnail: '/images/strategies-thumb.jpg', duration: '25:30', category: 'education', tags: ['advanced', 'strategies', 'risk-management'] }, { id: '3', type: 'webinar', title: 'Market Analysis Session', description: 'Weekly market analysis and trading opportunities', url: '/webinars/market-analysis.mp4', thumbnail: '/images/webinar-thumb.jpg', duration: '45:00', category: 'webinar', tags: ['analysis', 'market', 'live'] }, { id: '4', type: 'pdf', title: 'Trading Guide PDF', description: 'Comprehensive trading guide for beginners', url: '/guides/trading-guide.pdf', size: '2.4 MB', category: 'guide', tags: ['beginner', 'guide', 'pdf'] }, { id: '5', type: 'image', title: 'Platform Interface', description: 'Clean and intuitive trading platform interface', url: '/images/platform-interface.jpg', category: 'platform', tags: ['interface', 'screenshot', 'platform'] }, { id: '6', type: 'video', title: 'Mobile App Demo', description: 'Trading on the go with mobile app', url: '/videos/mobile-app.mp4', thumbnail: '/images/mobile-thumb.jpg', duration: '8:15', category: 'mobile', tags: ['mobile', 'app', 'demo'] } ] const mediaItems = defaultMedia const categories = Array.from(new Set(mediaItems.map(item => item.category))) const filteredMedia = selectedCategory === 'all' ? mediaItems : mediaItems.filter(item => item.category === selectedCategory) const featuredMedia = mediaItems.filter(item => item.featured) const getCategoryIcon = (category: string) => { switch (category) { case 'platform': return '🖥️' case 'education': return '📚' case 'webinar': return '🎥' case 'guide': return '📄' case 'mobile': return '📱' default: return '📁' } } const getTypeIcon = (type: string) => { switch (type) { case 'video': return <Video className="h-4 w-4" /> case 'image': return <ImageIcon className="h-4 w-4" /> case 'pdf': return <FileText className="h-4 w-4" /> case 'webinar': return <Play className="h-4 w-4" /> default: return <FileText className="h-4 w-4" /> } } const handleMediaClick = (media: MediaItem, index: number) => { setSelectedMedia(media) setCurrentIndex(index) if (media.type === 'video') { setIsPlaying(true) } } const navigateMedia = (direction: 'prev' | 'next') => { const currentMediaList = filteredMedia const newIndex = direction === 'prev' ? (currentIndex - 1 + currentMediaList.length) % currentMediaList.length : (currentIndex + 1) % currentMediaList.length setCurrentIndex(newIndex) setSelectedMedia(currentMediaList[newIndex]) } const MediaModal = () => { if (!selectedMedia) return null return ( <div className="fixed inset-0 bg-black/90 z-50 flex items-center justify-center p-4"> <div className="relative max-w-6xl w-full max-h-[90vh] bg-white rounded-lg overflow-hidden"> <div className="flex items-center justify-between p-4 border-b"> <h3 className="text-lg font-semibold">{selectedMedia.title}</h3> <div className="flex items-center gap-2"> {selectedMedia.type === 'video' && ( <> <Button variant="ghost" size="sm" onClick={() => setIsPlaying(!isPlaying)} > {isPlaying ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />} </Button> <Button variant="ghost" size="sm" onClick={() => setIsMuted(!isMuted)} > {isMuted ? <VolumeX className="h-4 w-4" /> : <Volume2 className="h-4 w-4" />} </Button> </> )} <Button variant="ghost" size="sm" onClick={() => setSelectedMedia(null)} > <X className="h-4 w-4" /> </Button> </div> </div> <div className="relative"> {selectedMedia.type === 'video' && ( <div className="aspect-video bg-black flex items-center justify-center"> <div className="text-center text-white"> <Video className="h-16 w-16 mx-auto mb-4 opacity-50" /> <p className="text-lg font-medium">{selectedMedia.title}</p> <p className="text-sm opacity-75 mt-2">Duration: {selectedMedia.duration}</p> {isPlaying && ( <div className="mt-4"> <div className="w-16 h-16 border-4 border-white border-t-transparent rounded-full animate-spin mx-auto"></div> <p className="mt-2">Playing...</p> </div> )} </div> </div> )} {selectedMedia.type === 'image' && ( <div className="aspect-video bg-gray-100 flex items-center justify-center"> <div className="text-center"> <ImageIcon className="h-16 w-16 mx-auto mb-4 text-gray-400" /> <p className="text-lg font-medium">{selectedMedia.title}</p> <p className="text-sm text-gray-600 mt-2">{selectedMedia.description}</p> </div> </div> )} {selectedMedia.type === 'pdf' && ( <div className="aspect-video bg-gray-100 flex items-center justify-center"> <div className="text-center"> <FileText className="h-16 w-16 mx-auto mb-4 text-gray-400" /> <p className="text-lg font-medium">{selectedMedia.title}</p> <p className="text-sm text-gray-600 mt-2">Size: {selectedMedia.size}</p> <Button className="mt-4"> <Download className="h-4 w-4 mr-2" /> Download PDF </Button> </div> </div> )} </div> <div className="p-4 border-t"> <p className="text-sm text-muted-foreground mb-4">{selectedMedia.description}</p> <div className="flex items-center justify-between"> <div className="flex gap-2"> {selectedMedia.tags.map(tag => ( <Badge key={tag} variant="secondary" className="text-xs"> {tag} </Badge> ))} </div> <div className="flex gap-2"> <Button variant="outline" size="sm" onClick={() => navigateMedia('prev')}> <ChevronLeft className="h-4 w-4" /> </Button> <Button variant="outline" size="sm" onClick={() => navigateMedia('next')}> <ChevronRight className="h-4 w-4" /> </Button> </div> </div> </div> </div> </div> ) } return ( <div className="space-y-6"> <MediaModal /> <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Video className="h-5 w-5" /> Media Gallery </CardTitle> </CardHeader> <CardContent> <Tabs value="featured" onValueChange={() => {}} className="space-y-4"> <TabsList className="grid w-full grid-cols-2"> <TabsTrigger value="featured">Featured Content</TabsTrigger> <TabsTrigger value="all">All Media</TabsTrigger> </TabsList> <TabsContent value="featured"> <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6"> {featuredMedia.map((media) => ( <Card key={media.id} className="hover:shadow-lg transition-shadow cursor-pointer"> <div className="aspect-video bg-gradient-to-br from-blue-500 to-purple-600 relative overflow-hidden"> <div className="absolute inset-0 flex items-center justify-center"> <div className="text-white text-center"> {getTypeIcon(media.type)} <p className="text-sm mt-2">{media.duration || media.size}</p> </div> </div> <Badge className="absolute top-2 left-2 bg-yellow-500"> Featured </Badge> </div> <CardContent className="p-4"> <h3 className="font-semibold mb-2">{media.title}</h3> <p className="text-sm text-muted-foreground mb-3">{media.description}</p> <div className="flex items-center justify-between"> <Badge variant="outline" className="text-xs"> {getCategoryIcon(media.category)} {media.category} </Badge> <Button size="sm" onClick={() => handleMediaClick(media, 0)}> <Play className="h-4 w-4 mr-2" /> View </Button> </div> </CardContent> </Card> ))} </div> </TabsContent> <TabsContent value="all"> <div className="flex gap-2 mb-6"> <Button variant={selectedCategory === 'all' ? 'default' : 'outline'} size="sm" onClick={() => setSelectedCategory('all')} > All ({mediaItems.length}) </Button> {categories.map(category => ( <Button key={category} variant={selectedCategory === category ? 'default' : 'outline'} size="sm" onClick={() => setSelectedCategory(category)} > {getCategoryIcon(category)} {category} ({mediaItems.filter(m => m.category === category).length}) </Button> ))} </div> <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6"> {filteredMedia.map((media, index) => ( <Card key={media.id} className="hover:shadow-lg transition-shadow cursor-pointer"> <div className="aspect-video bg-muted relative overflow-hidden"> <div className="absolute inset-0 flex items-center justify-center"> <div className="text-center"> {getTypeIcon(media.type)} <p className="text-sm mt-2 text-muted-foreground">{media.duration || media.size}</p> </div> </div> <Badge className="absolute top-2 left-2"> {getCategoryIcon(media.category)} {media.category} </Badge> </div> <CardContent className="p-4"> <h3 className="font-semibold mb-2">{media.title}</h3> <p className="text-sm text-muted-foreground mb-3">{media.description}</p> <div className="flex items-center justify-between"> <div className="flex gap-1"> {media.tags.slice(0, 2).map(tag => ( <Badge key={tag} variant="secondary" className="text-xs"> {tag} </Badge> ))} {media.tags.length > 2 && ( <Badge variant="secondary" className="text-xs"> +{media.tags.length - 2} </Badge> )} </div> <Button size="sm" onClick={() => handleMediaClick(media, index)}> <ExternalLink className="h-4 w-4" /> </Button> </div> </CardContent> </Card> ))} </div> </TabsContent> </Tabs> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <ImageIcon className="h-5 w-5" /> Platform Screenshots </CardTitle> </CardHeader> <CardContent> <div className="grid grid-cols-2 md:grid-cols-4 gap-4"> {[1, 2, 3, 4].map((index) => ( <div key={index} className="aspect-video bg-gradient-to-br from-gray-100 to-gray-200 rounded-lg flex items-center justify-center cursor-pointer hover:shadow-md transition-shadow"> <div className="text-center"> <ImageIcon className="h-8 w-8 mx-auto mb-2 text-gray-400" /> <p className="text-sm text-gray-600">Platform View {index}</p> </div> </div> ))} </div> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <FileText className="h-5 w-5" /> Resources & Downloads </CardTitle> </CardHeader> <CardContent> <div className="space-y-4"> <div className="flex items-center justify-between p-4 border rounded-lg"> <div className="flex items-center gap-3"> <FileText className="h-8 w-8 text-blue-600" /> <div> <h4 className="font-medium">{broker.name} Trading Guide</h4> <p className="text-sm text-muted-foreground">Complete trading guide for beginners</p> </div> </div> <Button variant="outline"> <Download className="h-4 w-4 mr-2" /> Download </Button> </div> <div className="flex items-center justify-between p-4 border rounded-lg"> <div className="flex items-center gap-3"> <FileText className="h-8 w-8 text-green-600" /> <div> <h4 className="font-medium">Platform Manual</h4> <p className="text-sm text-muted-foreground">Detailed platform user manual</p> </div> </div> <Button variant="outline"> <Download className="h-4 w-4 mr-2" /> Download </Button> </div> <div className="flex items-center justify-between p-4 border rounded-lg"> <div className="flex items-center gap-3"> <FileText className="h-8 w-8 text-purple-600" /> <div> <h4 className="font-medium">Risk Disclosure</h4> <p className="text-sm text-muted-foreground">Important risk information</p> </div> </div> <Button variant="outline"> <Download className="h-4 w-4 mr-2" /> Download </Button> </div> </div> </CardContent> </Card> </div> ) }