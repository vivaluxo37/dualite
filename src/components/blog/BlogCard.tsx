import { Link } from 'react-router-dom' import { motion } from 'framer-motion' import { Card, CardContent, CardHeader } from '@/components/ui/card' import { Badge } from '@/components/ui/badge' import { Button } from '@/components/ui/button' import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar' import { Calendar, Clock, Eye, MessageCircle, User, ArrowRight, BookOpen } from 'lucide-react' import { BlogPost } from '@/types' interface BlogCardProps { post: BlogPost featured?: boolean className?: string } export function BlogCard({ post, featured = false, className = '' }: BlogCardProps) { const formatDate = (date: string) => { try { return new Date(date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) } catch { return 'Invalid date' } } const getReadingTime = (minutes: number) => { if (minutes < 1) return '1 min read' if (minutes === 1) return '1 min read' return `${minutes} min read` } if (featured) { return ( <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }} className={`group ${className}`} > <Card className="overflow-hidden hover:shadow-xl transition-all duration-300 border-2 border-primary/20"> <div className="grid md:grid-cols-2 gap-0"> {/* Image Section */} <div className="relative h-64 md:h-full"> {post.featured_image_url ? ( <img src={post.featured_image_url} alt={post.title} className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500" /> ) : ( <div className="w-full h-full bg-gradient-to-br from-primary/10 to-primary/5 flex items-center justify-center"> <BookOpen className="h-20 w-20 text-primary/30" /> </div> )} <div className="absolute top-4 left-4"> <Badge variant="secondary" className="bg-primary text-primary-foreground"> <BookOpen className="h-3 w-3 mr-1" /> Featured </Badge> </div> {post.author && ( <div className="absolute bottom-4 left-4 flex items-center gap-2 bg-background/90 backdrop-blur-sm rounded-full px-3 py-1"> <Avatar className="h-6 w-6"> <AvatarImage src={post.author.avatar_url || undefined} /> <AvatarFallback> <User className="h-3 w-3" /> </AvatarFallback> </Avatar> <span className="text-sm font-medium">{post.author.display_name || 'Anonymous'}</span> </div> )} </div> {/* Content Section */} <div className="p-8 space-y-4"> <div className="flex items-center gap-4 text-sm text-muted-foreground"> <div className="flex items-center gap-1"> <Calendar className="h-4 w-4" /> <span>{post.published_at ? formatDate(post.published_at) : 'Draft'}</span> </div> <div className="flex items-center gap-1"> <Clock className="h-4 w-4" /> <span>{getReadingTime(post.reading_time)}</span> </div> </div> <div className="flex flex-wrap gap-1"> {post.categories?.slice(0, 2).map((category) => ( <Badge key={category.id} variant="outline" style={{ backgroundColor: `${category.color}20`, borderColor: category.color }} className="text-xs" > {category.name} </Badge> ))} </div> <h3 className="text-2xl font-bold leading-tight group-hover:text-primary transition-colors"> {post.title} </h3> <p className="text-muted-foreground line-clamp-3"> {post.excerpt || post.content?.substring(0, 150) + '...'} </p> <div className="flex items-center justify-between pt-4"> <div className="flex items-center gap-4 text-sm text-muted-foreground"> <div className="flex items-center gap-1"> <Eye className="h-4 w-4" /> <span>{post.view_count || 0}</span> </div> <div className="flex items-center gap-1"> <MessageCircle className="h-4 w-4" /> <span>{post._count?.comments || 0}</span> </div> </div> <Button asChild className="group/btn"> <Link to={`/blog/${post.slug}`}> Read More <ArrowRight className="h-4 w-4 ml-2 group-hover/btn:translate-x-1 transition-transform" /> </Link> </Button> </div> </div> </div> </Card> </motion.div> ) } // Compact version for grid layout return ( <Card className={`h-full flex flex-col hover:shadow-lg transition-all duration-300 ${className}`}> {/* Image */} <div className="h-48 overflow-hidden"> {post.featured_image_url ? ( <img src={post.featured_image_url} alt={post.title} className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300" /> ) : ( <div className="w-full h-full bg-gradient-to-br from-primary/10 to-primary/5 flex items-center justify-center"> <BookOpen className="h-16 w-16 text-primary/30" /> </div> )} </div> {/* Content */} <CardContent className="flex-grow p-6 space-y-4"> {/* Meta Info */} <div className="flex items-center gap-3 text-sm text-muted-foreground"> <div className="flex items-center gap-1"> <Calendar className="h-3 w-3" /> <span>{post.published_at ? new Date(post.published_at).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) : 'Draft'}</span> </div> <div className="flex items-center gap-1"> <Clock className="h-3 w-3" /> <span>{post.reading_time} min read</span> </div> </div> {/* Categories */} <div className="flex flex-wrap gap-1"> {post.categories?.slice(0, 2).map((category) => ( <span key={category.id} className="text-xs px-2 py-1 rounded-full" style={{ backgroundColor: `${category.color}20`, color: category.color }} > {category.name} </span> ))} </div> {/* Title */} <h3 className="font-semibold leading-tight line-clamp-2 group-hover:text-primary transition-colors"> {post.title} </h3> {/* Excerpt */} <p className="text-sm text-muted-foreground line-clamp-3"> {post.excerpt || post.content?.substring(0, 120) + '...'} </p> {/* Footer */} <div className="flex items-center justify-between pt-4 border-t"> <div className="flex items-center gap-3 text-xs text-muted-foreground"> <div className="flex items-center gap-1"> <Eye className="h-3 w-3" /> <span>{post.view_count || 0}</span> </div> <div className="flex items-center gap-1"> <MessageCircle className="h-3 w-3" /> <span>{post._count?.comments || 0}</span> </div> </div> <Button variant="ghost" size="sm" asChild className="group/btn"> <Link to={`/blog/${post.slug}`}> Read <ArrowRight className="h-3 w-3 ml-1 group-hover/btn:translate-x-1 transition-transform" /> </Link> </Button> </div> </CardContent> </Card> ) } interface BlogListProps { posts: BlogPost[] loading?: boolean featuredPost?: BlogPost | null className?: string } export function BlogList({ posts, loading = false, featuredPost = null, className = '' }: BlogListProps) { if (loading) { return ( <div className={`space-y-6 ${className}`}> {[...Array(3)].map((_, i) => ( <div key={i} className="animate-pulse"> <div className="bg-muted rounded-lg h-48"></div> </div> ))} </div> ) } if (posts.length === 0) { return ( <div className={`text-center py-12 ${className}`}> <BookOpen className="h-16 w-16 text-muted-foreground mx-auto mb-4" /> <h3 className="text-lg font-semibold mb-2">No blog posts found</h3> <p className="text-muted-foreground">Check back later for new content.</p> </div> ) } const regularPosts = featuredPost ? posts.filter(post => post.id !== featuredPost.id) : posts return ( <div className={`space-y-8 ${className}`}> {featuredPost && ( <BlogCard post={featuredPost} featured /> )} <div className="grid gap-6"> {regularPosts.map((post, index) => ( <BlogCard key={post.id} post={post} className={index === 0 && !featuredPost ? 'border-2 border-primary/20' : ''} /> ))} </div> </div> ) }