import { useEffect, useState } from 'react' import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar' import { Badge } from '@/components/ui/badge' import { Button } from '@/components/ui/button' import { Separator } from '@/components/ui/separator' import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card' import { Calendar, Clock, Eye, MessageCircle, User, Share2, Heart, BookOpen, ArrowLeft } from 'lucide-react' import { BlogPost } from '@/types' import { formatDistanceToNow } from 'date-fns' import { Link } from 'react-router-dom' interface BlogContentProps { post: BlogPost className?: string } export function BlogContent({ post, className = '' }: BlogContentProps) { const [shareCount, setShareCount] = useState(0) const [isLiked, setIsLiked] = useState(false) const [likeCount, setLikeCount] = useState(0) useEffect(() => { // Simulate like count from storage or API const savedLikes = localStorage.getItem(`blog_likes_${post.id}`) if (savedLikes) { setLikeCount(parseInt(savedLikes)) } }, [post.id]) const formatDate = (date: string) => { try { return new Date(date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) } catch { return 'Invalid date' } } const getReadingTime = (minutes: number) => { if (minutes < 1) return '1 min read' if (minutes === 1) return '1 min read' return `${minutes} min read` } const handleShare = async () => { if (navigator.share) { try { await navigator.share({ title: post.title, text: post.excerpt || post.content.substring(0, 100), url: window.location.href }) setShareCount(prev => prev + 1) } catch (err) { // User canceled share } } else { // Fallback - copy to clipboard navigator.clipboard.writeText(window.location.href) setShareCount(prev => prev + 1) } } const handleLike = () => { const newLiked = !isLiked setIsLiked(newLiked) setLikeCount(prev => newLiked ? prev + 1 : prev - 1) localStorage.setItem(`blog_likes_${post.id}`, likeCount.toString()) localStorage.setItem(`blog_liked_${post.id}`, newLiked.toString()) } // Process content to add HTML formatting const processContent = (content: string) => { // Simple markdown-like processing return content .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') .replace(/\*(.*?)\*/g, '<em>$1</em>') .replace(/`(.*?)`/g, '<code>$1</code>') .replace(/\n\n/g, '</p><p>') .replace(/^/, '<p>') .replace(/$/, '</p>') } return ( <div className={`max-w-4xl mx-auto ${className}`}> {/* Back to Blog */} <div className="mb-6"> <Button variant="ghost" asChild> <Link to="/blog" className="flex items-center gap-2"> <ArrowLeft className="h-4 w-4" /> Back to Blog </Link> </Button> </div> {/* Header */} <Card className="mb-8"> <CardHeader className="text-center"> <div className="flex flex-wrap justify-center gap-2 mb-4"> {post.categories?.map((category) => ( <Badge key={category.id} variant="outline" style={{ backgroundColor: `${category.color}20`, borderColor: category.color }} > {category.name} </Badge> ))} {post.is_featured && ( <Badge variant="secondary"> <BookOpen className="h-3 w-3 mr-1" /> Featured </Badge> )} </div> <h1 className="text-3xl md:text-4xl font-bold leading-tight mb-4"> {post.title} </h1> <div className="flex flex-wrap items-center justify-center gap-4 text-sm text-muted-foreground"> <div className="flex items-center gap-2"> <Calendar className="h-4 w-4" /> <span>{post.published_at ? formatDate(post.published_at) : 'Draft'}</span> </div> <div className="flex items-center gap-2"> <Clock className="h-4 w-4" /> <span>{getReadingTime(post.reading_time)}</span> </div> <div className="flex items-center gap-2"> <Eye className="h-4 w-4" /> <span>{post.view_count} views</span> </div> <div className="flex items-center gap-2"> <MessageCircle className="h-4 w-4" /> <span>{post._count?.comments || 0} comments</span> </div> </div> {post.author && ( <div className="flex items-center justify-center gap-3 mt-4"> <Avatar className="h-10 w-10"> <AvatarImage src={post.author.avatar_url || undefined} /> <AvatarFallback> <User className="h-5 w-5" /> </AvatarFallback> </Avatar> <div className="text-sm"> <div className="font-medium">{post.author.display_name || 'Anonymous'}</div> <div className="text-muted-foreground">Author</div> </div> </div> )} </CardHeader> {post.featured_image_url && ( <div className="px-6 pb-6"> <img src={post.featured_image_url} alt={post.title} className="w-full h-64 md:h-96 object-cover rounded-lg" /> </div> )} </Card> {/* Content */} <Card className="mb-8"> <CardContent className="p-8"> <div className="prose prose-lg max-w-none" dangerouslySetInnerHTML={{ __html: processContent(post.content) }} /> </CardContent> </Card> {/* Tags */} {post.tags && post.tags.length > 0 && ( <Card className="mb-8"> <CardContent className="p-6"> <h3 className="font-semibold mb-4">Tags</h3> <div className="flex flex-wrap gap-2"> {post.tags.map((tag) => ( <Link key={tag.id} to={`/blog/tag/${tag.slug}`}> <Badge variant="outline" className="hover:bg-primary/10 cursor-pointer" > #{tag.name} </Badge> </Link> ))} </div> </CardContent> </Card> )} {/* Engagement */} <Card className="mb-8"> <CardContent className="p-6"> <div className="flex items-center justify-between"> <div className="flex items-center gap-4"> <Button variant="outline" size="sm" onClick={handleLike} className={`flex items-center gap-2 ${isLiked ? 'bg-primary/10 border-primary' : ''}`} > <Heart className={`h-4 w-4 ${isLiked ? 'fill-current text-red-500' : ''}`} /> <span>{likeCount}</span> </Button> <Button variant="outline" size="sm" onClick={handleShare} className="flex items-center gap-2" > <Share2 className="h-4 w-4" /> <span>Share ({shareCount})</span> </Button> </div> <div className="text-sm text-muted-foreground"> Published {post.published_at ? formatDistanceToNow(new Date(post.published_at), { addSuffix: true }) : 'recently'} </div> </div> </CardContent> </Card> {/* Meta Information */} <Card className="mb-8"> <CardContent className="p-6"> <h3 className="font-semibold mb-4">Article Information</h3> <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm"> <div> <div className="font-medium">Status</div> <div className="text-muted-foreground capitalize">{post.status}</div> </div> <div> <div className="font-medium">Created</div> <div className="text-muted-foreground">{formatDate(post.created_at)}</div> </div> <div> <div className="font-medium">Last Updated</div> <div className="text-muted-foreground">{formatDate(post.updated_at)}</div> </div> <div> <div className="font-medium">Comments Enabled</div> <div className="text-muted-foreground">{post.is_comment_enabled ? 'Yes' : 'No'}</div> </div> </div> </CardContent> </Card> </div> ) }