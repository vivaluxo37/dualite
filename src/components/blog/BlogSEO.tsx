import { useEffect } from 'react' import { SEO } from '@/components/SEO' import { BlogPost, BlogCategory, BlogTag } from '@/types' interface BlogSEOProps { title: string description: string keywords?: string canonicalUrl?: string ogImage?: string type?: 'blog' | 'post' | 'category' | 'tag' post?: BlogPost category?: BlogCategory tag?: BlogTag posts?: BlogPost[] authorName?: string publishedDate?: string modifiedDate?: string } export function BlogSEO({ title, description, keywords, canonicalUrl, ogImage, type = 'blog', post, category, tag, posts = [], authorName, modifiedDate }: BlogSEOProps) { const siteUrl = window.location.origin const currentUrl = canonicalUrl || window.location.href // Generate structured data based on type const generateStructuredData = () => { const baseStructuredData = { "@context": "https://schema.org", "@type": "Blog", "name": "BrokerAnalysis Blog", "description": "Forex trading insights, broker reviews, and market analysis", "url": siteUrl, "publisher": { "@type": "Organization", "name": "BrokerAnalysis", "logo": { "@type": "ImageObject", "url": `${siteUrl}/logo.png` } } } switch (type) { case 'post': if (!post) return [baseStructuredData] const articleStructuredData = { "@context": "https://schema.org", "@type": "BlogPosting", "headline": post.title, "description": post.excerpt || post.content.substring(0, 160), "image": post.featured_image_url || `${siteUrl}/og-image.jpg`, "author": authorName ? { "@type": "Person", "name": authorName } : { "@type": "Organization", "name": "BrokerAnalysis" }, "publisher": { "@type": "Organization", "name": "BrokerAnalysis", "logo": { "@type": "ImageObject", "url": `${siteUrl}/logo.png` } }, "datePublished": post.published_at || post.created_at, "dateModified": modifiedDate || post.updated_at, "mainEntityOfPage": { "@type": "WebPage", "@id": currentUrl }, "keywords": post.seo_keywords?.join(', ') || post.meta_keywords?.join(', ') || keywords, "articleSection": post.categories?.[0]?.name || 'Forex Trading', "wordCount": post.content.length, "timeRequired": `PT${post.reading_time}M`, "inLanguage": "en-US", "isAccessibleForFree": true, "commentCount": post._count?.comments || 0 } // Add breadcrumb structured data const breadcrumbStructuredData = { "@context": "https://schema.org", "@type": "BreadcrumbList", "itemListElement": [ { "@type": "ListItem", "position": 1, "name": "Home", "item": siteUrl }, { "@type": "ListItem", "position": 2, "name": "Blog", "item": `${siteUrl}/blog` }, { "@type": "ListItem", "position": 3, "name": post.title, "item": currentUrl } ] } return [baseStructuredData, articleStructuredData, breadcrumbStructuredData] case 'category': if (!category) return [baseStructuredData] const collectionStructuredData = { "@context": "https://schema.org", "@type": "CollectionPage", "name": `${category.name} Articles`, "description": category.description || `All articles about ${category.name}`, "url": currentUrl, "mainEntity": { "@type": "ItemList", "itemListElement": posts.slice(0, 10).map((post, index) => ({ "@type": "ListItem", "position": index + 1, "url": `${siteUrl}/blog/${post.slug}`, "name": post.title })) } } return [baseStructuredData, collectionStructuredData] case 'tag': if (!tag) return [baseStructuredData] const tagStructuredData = { "@context": "https://schema.org", "@type": "CollectionPage", "name": `Articles tagged with "${tag.name}"`, "description": tag.description || `All articles tagged with ${tag.name}`, "url": currentUrl, "mainEntity": { "@type": "ItemList", "itemListElement": posts.slice(0, 10).map((post, index) => ({ "@type": "ListItem", "position": index + 1, "url": `${siteUrl}/blog/${post.slug}`, "name": post.title })) } } return [baseStructuredData, tagStructuredData] default: // Blog listing page const blogStructuredData = { "@context": "https://schema.org", "@type": "Blog", "name": "BrokerAnalysis Blog", "description": "Forex trading insights, broker reviews, and market analysis", "url": currentUrl, "author": { "@type": "Organization", "name": "BrokerAnalysis" }, "publisher": { "@type": "Organization", "name": "BrokerAnalysis", "logo": { "@type": "ImageObject", "url": `${siteUrl}/logo.png` } }, "mainEntity": { "@type": "ItemList", "itemListElement": posts.slice(0, 10).map((post, index) => ({ "@type": "ListItem", "position": index + 1, "url": `${siteUrl}/blog/${post.slug}`, "name": post.title })) } } return [blogStructuredData] } } // Generate meta tags const generateMetaTags = () => { const baseTags = [ { name: "author", content: authorName || "BrokerAnalysis" }, { name: "robots", content: "index, follow" }, { name: "googlebot", content: "index, follow" }, { name: "language", content: "English" }, { name: "geo.region", content: "US" }, { name: "geo.placename", content: "United States" } ] if (type === 'post' && post) { baseTags.push( { name: "article:published_time", content: post.published_at || post.created_at }, { name: "article:modified_time", content: modifiedDate || post.updated_at }, { name: "article:section", content: post.categories?.[0]?.name || 'Forex Trading' }, { name: "article:tag", content: post.tags?.map(t => t.name).join(', ') || '' } ) } return baseTags } // Generate Open Graph tags const generateOGTags = () => { const baseTags = { type: type === 'post' ? 'article' : 'website', title: title, description: description, image: ogImage || `${siteUrl}/og-image.jpg`, url: currentUrl, site_name: "BrokerAnalysis", locale: "en_US" } if (type === 'post' && post) { return { ...baseTags, type: 'article' as const, "article:published_time": post.published_at || post.created_at, "article:modified_time": modifiedDate || post.updated_at, "article:section": post.categories?.[0]?.name || 'Forex Trading', "article:tag": post.tags?.map(t => t.name).join(', ') || '', "article:author": authorName || "BrokerAnalysis" } } return baseTags } const ogTags = generateOGTags() return ( <SEO title={title} description={description} keywords={keywords} canonicalUrl={currentUrl} ogType={ogTags.type} ogTitle={ogTags.title} ogDescription={ogTags.description} ogImage={ogTags.image} twitterCard="summary_large_image" structuredData={generateStructuredData()} additionalMetaTags={generateMetaTags()} /> ) }