import { useState } from 'react' import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card' import { Badge } from '@/components/ui/badge' import { Button } from '@/components/ui/button' import { Input } from '@/components/ui/input' import { Label } from '@/components/ui/label' import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select' import { Search, Filter, Calendar, SortAsc, SortDesc, X, Hash, Folder } from 'lucide-react' import { BlogCategory, BlogTag } from '@/types' interface BlogFilterProps { categories?: BlogCategory[] tags?: BlogTag[] onFilterChange: (filters: BlogFilters) => void className?: string } export interface BlogFilters { search: string categoryId: string | null tagId: string | null sortBy: 'published_at' | 'created_at' | 'updated_at' | 'title' | 'view_count' sortOrder: 'asc' | 'desc' dateFilter: 'all' | 'today' | 'week' | 'month' | 'year' isFeatured: boolean | null } export function BlogFilter({ categories = [], tags = [], onFilterChange, className = '' }: BlogFilterProps) { const [filters, setFilters] = useState<BlogFilters>({ search: '', categoryId: null, tagId: null, sortBy: 'published_at', sortOrder: 'desc', dateFilter: 'all', isFeatured: null }) const [isExpanded, setIsExpanded] = useState(false) const updateFilter = (key: keyof BlogFilters, value: any) => { const newFilters = { ...filters, [key]: value } setFilters(newFilters) onFilterChange(newFilters) } const clearFilters = () => { const resetFilters: BlogFilters = { search: '', categoryId: null, tagId: null, sortBy: 'published_at', sortOrder: 'desc', dateFilter: 'all', isFeatured: null } setFilters(resetFilters) onFilterChange(resetFilters) } const hasActiveFilters = () => { return filters.search || filters.categoryId || filters.tagId || filters.dateFilter !== 'all' || filters.isFeatured } const getActiveFiltersCount = () => { let count = 0 if (filters.search) count++ if (filters.categoryId) count++ if (filters.tagId) count++ if (filters.dateFilter !== 'all') count++ if (filters.isFeatured) count++ return count } return ( <Card className={className}> <CardHeader className="pb-3"> <div className="flex items-center justify-between"> <CardTitle className="text-lg flex items-center gap-2"> <Filter className="h-5 w-5" /> Filters {hasActiveFilters() && ( <Badge variant="secondary" className="text-xs"> {getActiveFiltersCount()} active </Badge> )} </CardTitle> <div className="flex items-center gap-2"> {hasActiveFilters() && ( <Button variant="ghost" size="sm" onClick={clearFilters}> <X className="h-4 w-4 mr-1" /> Clear </Button> )} <Button variant="ghost" size="sm" onClick={() => setIsExpanded(!isExpanded)} > {isExpanded ? 'Hide' : 'Show'} Filters </Button> </div> </div> </CardHeader> <CardContent className="space-y-4"> {/* Search */} <div className="space-y-2"> <Label htmlFor="search">Search</Label> <div className="relative"> <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" /> <Input id="search" placeholder="Search blog posts..." value={filters.search} onChange={(e) => updateFilter('search', e.target.value)} className="pl-9" /> </div> </div> {isExpanded && ( <> {/* Category Filter */} <div className="space-y-2"> <Label>Category</Label> <Select value={filters.categoryId || 'all'} onValueChange={(value) => updateFilter('categoryId', value === 'all' ? null : value)} > <SelectTrigger> <SelectValue placeholder="All categories" /> </SelectTrigger> <SelectContent> <SelectItem value="all">All categories</SelectItem> {categories.map((category) => ( <SelectItem key={category.id} value={category.id}> <div className="flex items-center gap-2"> <div className="w-3 h-3 rounded-full" style={{ backgroundColor: category.color }} /> {category.name} <span className="text-muted-foreground text-xs"> ({category.post_count}) </span> </div> </SelectItem> ))} </SelectContent> </Select> </div> {/* Tag Filter */} <div className="space-y-2"> <Label>Tag</Label> <Select value={filters.tagId || 'all'} onValueChange={(value) => updateFilter('tagId', value === 'all' ? null : value)} > <SelectTrigger> <SelectValue placeholder="All tags" /> </SelectTrigger> <SelectContent> <SelectItem value="all">All tags</SelectItem> {tags.slice(0, 20).map((tag) => ( <SelectItem key={tag.id} value={tag.id}> <div className="flex items-center gap-2"> <Hash className="h-3 w-3" /> {tag.name} <span className="text-muted-foreground text-xs"> ({tag.post_count}) </span> </div> </SelectItem> ))} </SelectContent> </Select> </div> {/* Sort Options */} <div className="grid grid-cols-2 gap-4"> <div className="space-y-2"> <Label>Sort By</Label> <Select value={filters.sortBy} onValueChange={(value) => updateFilter('sortBy', value)} > <SelectTrigger> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="published_at">Published Date</SelectItem> <SelectItem value="created_at">Created Date</SelectItem> <SelectItem value="updated_at">Updated Date</SelectItem> <SelectItem value="title">Title</SelectItem> <SelectItem value="view_count">View Count</SelectItem> </SelectContent> </Select> </div> <div className="space-y-2"> <Label>Order</Label> <Select value={filters.sortOrder} onValueChange={(value) => updateFilter('sortOrder', value)} > <SelectTrigger> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="desc"> <div className="flex items-center gap-2"> <SortDesc className="h-4 w-4" /> Descending </div> </SelectItem> <SelectItem value="asc"> <div className="flex items-center gap-2"> <SortAsc className="h-4 w-4" /> Ascending </div> </SelectItem> </SelectContent> </Select> </div> </div> {/* Date Filter */} <div className="space-y-2"> <Label>Date Range</Label> <Select value={filters.dateFilter} onValueChange={(value) => updateFilter('dateFilter', value)} > <SelectTrigger> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="all">All time</SelectItem> <SelectItem value="today">Today</SelectItem> <SelectItem value="week">This week</SelectItem> <SelectItem value="month">This month</SelectItem> <SelectItem value="year">This year</SelectItem> </SelectContent> </Select> </div> {/* Featured Filter */} <div className="space-y-2"> <Label>Featured Posts</Label> <Select value={filters.isFeatured === null ? 'all' : filters.isFeatured ? 'featured' : 'regular'} onValueChange={(value) => { if (value === 'all') updateFilter('isFeatured', null) else if (value === 'featured') updateFilter('isFeatured', true) else updateFilter('isFeatured', false) }} > <SelectTrigger> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="all">All posts</SelectItem> <SelectItem value="featured">Featured only</SelectItem> <SelectItem value="regular">Regular posts</SelectItem> </SelectContent> </Select> </div> </> )} {/* Active Filters Display */} {hasActiveFilters() && ( <div className="pt-4 border-t"> <Label className="text-sm font-medium mb-2">Active Filters</Label> <div className="flex flex-wrap gap-2"> {filters.search && ( <Badge variant="secondary" className="text-xs"> Search: {filters.search} <X className="h-3 w-3 ml-1 cursor-pointer" onClick={() => updateFilter('search', '')} /> </Badge> )} {filters.categoryId && ( <Badge variant="secondary" className="text-xs"> <Folder className="h-3 w-3 mr-1" /> {categories.find(c => c.id === filters.categoryId)?.name} <X className="h-3 w-3 ml-1 cursor-pointer" onClick={() => updateFilter('categoryId', null)} /> </Badge> )} {filters.tagId && ( <Badge variant="secondary" className="text-xs"> <Hash className="h-3 w-3 mr-1" /> {tags.find(t => t.id === filters.tagId)?.name} <X className="h-3 w-3 ml-1 cursor-pointer" onClick={() => updateFilter('tagId', null)} /> </Badge> )} {filters.dateFilter !== 'all' && ( <Badge variant="secondary" className="text-xs"> <Calendar className="h-3 w-3 mr-1" /> {filters.dateFilter} <X className="h-3 w-3 ml-1 cursor-pointer" onClick={() => updateFilter('dateFilter', 'all')} /> </Badge> )} {filters.isFeatured && ( <Badge variant="secondary" className="text-xs"> Featured <X className="h-3 w-3 ml-1 cursor-pointer" onClick={() => updateFilter('isFeatured', null)} /> </Badge> )} </div> </div> )} </CardContent> </Card> ) }