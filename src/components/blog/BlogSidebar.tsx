import { useState } from 'react' import { Link } from 'react-router-dom' import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card' import { Badge } from '@/components/ui/badge' import { Button } from '@/components/ui/button' import { Input } from '@/components/ui/input' import { Label } from '@/components/ui/label' import { Search, Calendar, TrendingUp, Hash, Folder, BookOpen, Clock, ArrowRight, Eye } from 'lucide-react' import { BlogPost, BlogCategory, BlogTag } from '@/types' interface BlogSidebarProps { categories?: BlogCategory[] tags?: BlogTag[] popularPosts?: BlogPost[] recentPosts?: BlogPost[] onSearch?: (query: string) => void onCategorySelect?: (categoryId: string) => void onTagSelect?: (tagId: string) => void className?: string } export function BlogSidebar({ categories = [], tags = [], popularPosts = [], recentPosts = [], onSearch, onCategorySelect, onTagSelect, className = '' }: BlogSidebarProps) { const [searchQuery, setSearchQuery] = useState('') const handleSearch = (e: React.FormEvent) => { e.preventDefault() if (onSearch) { onSearch(searchQuery) } } const formatDate = (date: string) => { try { return new Date(date).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) } catch { return 'Invalid date' } } const getReadingTime = (minutes: number) => { if (minutes < 1) return '1 min' if (minutes === 1) return '1 min' return `${minutes} min` } return ( <div className={`space-y-6 ${className}`}> {/* Search */} <Card> <CardHeader className="pb-3"> <CardTitle className="text-lg flex items-center gap-2"> <Search className="h-5 w-5" /> Search Blog </CardTitle> </CardHeader> <CardContent> <form onSubmit={handleSearch} className="space-y-3"> <div className="space-y-2"> <Label htmlFor="search">Search articles</Label> <div className="relative"> <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" /> <Input id="search" placeholder="Search blog posts..." value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} className="pl-9" /> </div> </div> <Button type="submit" className="w-full"> Search </Button> </form> </CardContent> </Card> {/* Categories */} {categories.length > 0 && ( <Card> <CardHeader className="pb-3"> <CardTitle className="text-lg flex items-center gap-2"> <Folder className="h-5 w-5" /> Categories </CardTitle> </CardHeader> <CardContent> <div className="space-y-2"> {categories.map((category) => ( <Link key={category.id} to={`/blog/category/${category.slug}`} onClick={() => onCategorySelect?.(category.id)} className="flex items-center justify-between p-2 rounded-lg hover:bg-muted transition-colors group" > <div className="flex items-center gap-2"> <div className="w-3 h-3 rounded-full" style={{ backgroundColor: category.color }} /> <span className="text-sm font-medium">{category.name}</span> </div> <div className="flex items-center gap-2"> <Badge variant="secondary" className="text-xs"> {category.post_count} </Badge> <ArrowRight className="h-3 w-3 opacity-0 group-hover:opacity-100 transition-opacity" /> </div> </Link> ))} </div> </CardContent> </Card> )} {/* Popular Tags */} {tags.length > 0 && ( <Card> <CardHeader className="pb-3"> <CardTitle className="text-lg flex items-center gap-2"> <Hash className="h-5 w-5" /> Popular Tags </CardTitle> </CardHeader> <CardContent> <div className="flex flex-wrap gap-2"> {tags.slice(0, 12).map((tag) => ( <Link key={tag.id} to={`/blog/tag/${tag.slug}`} onClick={() => onTagSelect?.(tag.id)} > <Badge variant="outline" className="hover:bg-primary/10 cursor-pointer text-xs" > #{tag.name} {tag.post_count > 0 && ( <span className="ml-1 text-muted-foreground">({tag.post_count})</span> )} </Badge> </Link> ))} </div> </CardContent> </Card> )} {/* Popular Posts */} {popularPosts.length > 0 && ( <Card> <CardHeader className="pb-3"> <CardTitle className="text-lg flex items-center gap-2"> <TrendingUp className="h-5 w-5" /> Popular Posts </CardTitle> </CardHeader> <CardContent> <div className="space-y-3"> {popularPosts.map((post) => ( <Link key={post.id} to={`/blog/${post.slug}`} className="block p-3 rounded-lg hover:bg-muted transition-colors group" > <h4 className="text-sm font-medium line-clamp-2 mb-1 group-hover:text-primary transition-colors"> {post.title} </h4> <div className="flex items-center gap-3 text-xs text-muted-foreground"> <div className="flex items-center gap-1"> <Eye className="h-3 w-3" /> <span>{post.view_count}</span> </div> <div className="flex items-center gap-1"> <Clock className="h-3 w-3" /> <span>{getReadingTime(post.reading_time)}</span> </div> </div> </Link> ))} </div> </CardContent> </Card> )} {/* Recent Posts */} {recentPosts.length > 0 && ( <Card> <CardHeader className="pb-3"> <CardTitle className="text-lg flex items-center gap-2"> <Calendar className="h-5 w-5" /> Recent Posts </CardTitle> </CardHeader> <CardContent> <div className="space-y-3"> {recentPosts.map((post) => ( <Link key={post.id} to={`/blog/${post.slug}`} className="block p-3 rounded-lg hover:bg-muted transition-colors group" > <h4 className="text-sm font-medium line-clamp-2 mb-1 group-hover:text-primary transition-colors"> {post.title} </h4> <div className="flex items-center gap-3 text-xs text-muted-foreground"> <div className="flex items-center gap-1"> <Calendar className="h-3 w-3" /> <span>{formatDate(post.published_at || post.created_at)}</span> </div> {post.categories && post.categories.length > 0 && ( <Badge variant="outline" className="text-xs"> {post.categories[0].name} </Badge> )} </div> </Link> ))} </div> </CardContent> </Card> )} {/* Newsletter Signup */} <Card> <CardHeader className="pb-3"> <CardTitle className="text-lg flex items-center gap-2"> <BookOpen className="h-5 w-5" /> Stay Updated </CardTitle> </CardHeader> <CardContent> <p className="text-sm text-muted-foreground mb-4"> Get the latest forex trading insights and broker reviews delivered to your inbox. </p> <div className="space-y-3"> <Input type="email" placeholder="Enter your email" className="text-sm" /> <Button className="w-full" size="sm"> Subscribe </Button> </div> </CardContent> </Card> </div> ) }