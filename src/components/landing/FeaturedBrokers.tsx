import { useQuery } from '@tanstack/react-query' import { motion, useInView } from 'framer-motion' import { useRef } from 'react' import { supabase } from '@/lib/supabase' import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card' import { Button } from '@/components/ui/button' import { Badge } from '@/components/ui/badge' import { Progress } from '@/components/ui/progress' import { Star, TrendingUp, ExternalLink, Loader2, Award, Shield } from 'lucide-react' import { Link } from 'react-router-dom' import { Broker } from '@/types' export function FeaturedBrokers() { const ref = useRef<HTMLElement>(null); const isInView = useInView(ref, { once: true, margin: "-100px" }); const { data: brokers = [], isLoading } = useQuery<Broker[]>({ queryKey: ['featured-brokers'], queryFn: async () => { const { data, error } = await supabase .from('brokers') .select('*') .eq('is_active', true) .not('name', 'ilike', '%IG%') .order('trust_score', { ascending: false }) .limit(3) if (error) throw error return data }, }) const getTrustScoreColor = (score: number) => { if (score >= 80) return 'from-green-500 to-green-600' if (score >= 60) return 'from-yellow-500 to-yellow-600' return 'from-red-500 to-red-600' } const getTrustScoreLabel = (score: number) => { if (score >= 80) return 'Excellent' if (score >= 60) return 'Good' return 'Fair' } return ( <section ref={ref} className="py-24 bg-white relative overflow-hidden"> {/* Background Elements */} <div className="absolute inset-0 bg-gradient-to-br from-blue-50/30 via-transparent to-purple-50/30" /> <div className="absolute top-20 right-10 w-40 h-40 bg-blue-500/5 rounded-full blur-3xl" /> <div className="absolute bottom-20 left-10 w-32 h-32 bg-purple-500/5 rounded-full blur-3xl" /> <div className="container mx-auto px-4 relative z-10"> {/* Section Header */} <motion.div className="text-center mb-20" initial={{ opacity: 0, y: 30 }} animate={isInView ? { opacity: 1, y: 0 } : {}} transition={{ duration: 0.6 }} > <motion.div className="inline-flex items-center gap-2 rounded-full bg-gradient-to-r from-blue-100 to-purple-100 px-4 py-2 text-sm font-medium text-blue-700 mb-6" initial={{ opacity: 0, scale: 0.8 }} animate={isInView ? { opacity: 1, scale: 1 } : {}} transition={{ duration: 0.5, delay: 0.2 }} > <Award className="w-4 h-4" /> Top Rated Brokers </motion.div> <h2 className="text-heading mb-6 text-gray-900"> Our <span className="gradient-text">Highest-Rated</span> Brokers </h2> <p className="text-subheading text-gray-600 max-w-3xl mx-auto"> These brokers have earned our highest Trust Scores based on regulation, user feedback, and comprehensive analysis of 1,200+ data points. </p> </motion.div> {/* Loading State */} {isLoading ? ( <div className="flex justify-center"> <motion.div animate={{ rotate: 360 }} transition={{ duration: 1, repeat: Infinity, ease: "linear" }} > <Loader2 className="h-12 w-12 text-blue-600" /> </motion.div> </div> ) : ( <> {/* Brokers Grid */} <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto"> {brokers.map((broker, index) => ( <motion.div key={broker.id} initial={{ opacity: 0, y: 50, scale: 0.9 }} animate={isInView ? { opacity: 1, y: 0, scale: 1 } : {}} transition={{ duration: 0.6, delay: index * 0.2, type: "spring", stiffness: 100 }} className="group" > <Card className="h-full elevated-card bg-white border-gray-100 hover:border-blue-200 overflow-hidden"> <CardHeader className="pb-4"> <div className="flex items-start justify-between mb-4"> <div className="flex items-center gap-4"> {/* Broker Logo */} <motion.div className="w-16 h-16 bg-gradient-to-br from-gray-50 to-gray-100 rounded-2xl flex items-center justify-center flex-shrink-0 shadow-sm group-hover:shadow-md transition-shadow" whileHover={{ scale: 1.05 }} > {broker.logo_url ? ( <img src={broker.logo_url} alt={broker.name} className="w-12 h-12 object-contain" style={{width: '48px', height: '48px'}} /> ) : ( <TrendingUp className="h-8 w-8 text-blue-600" /> )} </motion.div> <div className="flex-1"> <CardTitle className="text-xl text-gray-900 group-hover:text-blue-600 transition-colors"> {broker.name} </CardTitle> {/* Regulations */} <div className="flex flex-wrap gap-1 mt-2"> {broker.regulations.slice(0, 2).map((reg) => ( <Badge key={reg} variant="secondary" className="text-xs bg-blue-50 text-blue-700 hover:bg-blue-100"> <Shield className="w-3 h-3 mr-1" /> {reg} </Badge> ))} </div> </div> </div> {/* Rating */} <motion.div className="flex items-center gap-1 bg-yellow-50 px-2 py-1 rounded-lg" whileHover={{ scale: 1.05 }} > <Star className="w-4 h-4 fill-yellow-400 text-yellow-400" /> <span className="text-sm font-bold text-gray-900"> {(broker.avg_rating || 0).toFixed(1)} </span> </motion.div> </div> </CardHeader> <CardContent className="flex-grow flex flex-col justify-between"> {/* Trust Score */} <div className="mb-6"> <div className="flex justify-between items-center text-sm mb-2"> <span className="font-medium text-gray-700">Trust Score</span> <div className="flex items-center gap-2"> <span className="font-bold text-gray-900">{broker.trust_score}/100</span> <Badge variant="outline" className={`text-xs bg-gradient-to-r ${getTrustScoreColor(broker.trust_score || 0)} text-white border-0`} > {getTrustScoreLabel(broker.trust_score || 0)} </Badge> </div> </div> <Progress value={broker.trust_score || 0} className="h-3 bg-gray-100" indicatorClassName={`bg-gradient-to-r ${getTrustScoreColor(broker.trust_score || 0)} transition-all duration-500`} /> </div> {/* Key Metrics */} <div className="grid grid-cols-2 gap-4 mb-6"> <div className="bg-gray-50 rounded-xl p-3"> <div className="text-xs text-gray-500 mb-1">Min. Deposit</div> <div className="font-bold text-gray-900">${broker.min_deposit}</div> </div> <div className="bg-gray-50 rounded-xl p-3"> <div className="text-xs text-gray-500 mb-1">Avg. Spreads</div> <div className="font-bold text-gray-900">{broker.spreads_avg} pips</div> </div> </div> {/* Action Buttons */} <div className="space-y-3"> <Button asChild className="w-full modern-button bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800"> <Link to={`/review/${broker.slug}`}> Read Full Review </Link> </Button> {broker.affiliate_url && ( <Button variant="outline" className="w-full group/btn border-gray-200 hover:border-blue-300 hover:bg-blue-50" asChild> <a href={broker.affiliate_url} target="_blank" rel="noopener noreferrer"> Visit Broker <ExternalLink className="ml-2 w-4 h-4 group-hover/btn:translate-x-1 transition-transform" /> </a> </Button> )} </div> </CardContent> </Card> </motion.div> ))} </div> {/* Bottom CTA */} <motion.div className="text-center mt-16" initial={{ opacity: 0, y: 30 }} animate={isInView ? { opacity: 1, y: 0 } : {}} transition={{ duration: 0.6, delay: 0.8 }} > <div className="glass-card rounded-2xl p-8 max-w-2xl mx-auto"> <h3 className="text-2xl font-bold text-gray-900 mb-4"> Explore All Our Rated Brokers </h3> <p className="text-gray-600 mb-6"> Compare 100+ regulated brokers with detailed analysis and user reviews </p> <Button variant="outline" size="lg" asChild className="modern-button border-2 hover:bg-blue-50"> <Link to="/brokers"> View All Brokers <TrendingUp className="ml-2 w-5 h-5" /> </Link> </Button> </div> </motion.div> </> )} </div> </section> ) }