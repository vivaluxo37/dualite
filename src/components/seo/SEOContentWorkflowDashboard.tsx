import React, { useState, useEffect } from 'react' import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card' import { Button } from '@/components/ui/button' import { Badge } from '@/components/ui/badge' import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs' import { Input } from '@/components/ui/input' import { Label } from '@/components/ui/label' import { Textarea } from '@/components/ui/textarea' import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select' import { Progress } from '@/components/ui/progress' import { Alert, AlertDescription } from '@/components/ui/alert' import { Brain, Calendar, TrendingUp, Target, Zap, Settings, FileText, BarChart3, Clock, CheckCircle, AlertCircle, Plus, RefreshCw, Play, Pause } from 'lucide-react' // Import our SEO workflow classes import { EnhancedSEOContentWorkflow } from '@/lib/enhanced-seo-content-workflow' import { BlogAIAgentIntegration } from '@/lib/blog-ai-agent-integration' import { AutomatedContentPipeline } from '@/lib/automated-content-pipeline' interface WorkflowStatus { isRunning: boolean currentTask: string progress: number results: any[] errors: string[] } interface ContentCalendar { id: string topic: string targetDate: string priority: 'low' | 'medium' | 'high' status: 'scheduled' | 'in_progress' | 'completed' | 'failed' category?: string estimatedWords: number } interface PerformanceMetrics { postsGenerated: number postsPublished: number averageSEOScore: number topPerformingCategories: Record<string, number> totalViews: number engagementRate: number } export function SEOContentWorkflowDashboard() { const [workflowStatus, setWorkflowStatus] = useState<WorkflowStatus>({ isRunning: false, currentTask: '', progress: 0, results: [], errors: [] }) const [contentCalendar, setContentCalendar] = useState<ContentCalendar[]>([]) const [performanceMetrics, setPerformanceMetrics] = useState<PerformanceMetrics>({ postsGenerated: 0, postsPublished: 0, averageSEOScore: 0, topPerformingCategories: {}, totalViews: 0, engagementRate: 0 }) const [newTopic, setNewTopic] = useState('') const [selectedCategory, setSelectedCategory] = useState('') const [targetKeywords, setTargetKeywords] = useState('') const [activeTab, setActiveTab] = useState('overview') // Initialize workflow classes const [blogAI] = useState(() => new BlogAIAgentIntegration()) const [pipeline] = useState(() => new AutomatedContentPipeline()) useEffect(() => { loadDashboardData() }, []) const loadDashboardData = async () => { try { // Load content calendar const calendarStatus = await pipeline.getPipelineStatus() if (calendarStatus.schedules) { setContentCalendar(calendarStatus.schedules) } // Load performance metrics (placeholder - would connect to analytics) setPerformanceMetrics({ postsGenerated: 45, postsPublished: 42, averageSEOScore: 87.5, topPerformingCategories: { 'forex-basics': 15, 'broker-reviews': 12, 'market-analysis': 10, 'trading-strategies': 8 }, totalViews: 12500, engagementRate: 3.2 }) } catch (error) { console.error('Failed to load dashboard data:', error) } } const handleGenerateContent = async () => { if (!newTopic.trim()) return setWorkflowStatus(prev => ({ ...prev, isRunning: true, currentTask: 'Generating SEO content...', progress: 0, errors: [] })) try { // Simulate progress updates const progressInterval = setInterval(() => { setWorkflowStatus(prev => ({ ...prev, progress: Math.min(prev.progress + 10, 90) })) }, 500) const result = await blogAI.generateBlogPost({ topic: newTopic, categoryId: selectedCategory || undefined, targetKeywords: targetKeywords.split(',').map(k => k.trim()).filter(k => k), publishImmediately: false, featured: false }) clearInterval(progressInterval) if (result.success) { setWorkflowStatus(prev => ({ ...prev, isRunning: false, progress: 100, results: [...prev.results, result] })) // Reset form setNewTopic('') setTargetKeywords('') // Reload dashboard data await loadDashboardData() } else { setWorkflowStatus(prev => ({ ...prev, isRunning: false, errors: result.errors || [] })) } } catch (error) { setWorkflowStatus(prev => ({ ...prev, isRunning: false, errors: [error instanceof Error ? error.message : 'Unknown error'] })) } } const handleStartPipeline = async () => { setWorkflowStatus(prev => ({ ...prev, isRunning: true, currentTask: 'Running automated content pipeline...', progress: 0, errors: [] })) try { const result = await pipeline.start() if (result.success) { setWorkflowStatus(prev => ({ ...prev, isRunning: false, progress: 100, results: [...prev.results, result] })) await loadDashboardData() } else { setWorkflowStatus(prev => ({ ...prev, isRunning: false, errors: result.errors || [] })) } } catch (error) { setWorkflowStatus(prev => ({ ...prev, isRunning: false, errors: [error instanceof Error ? error.message : 'Unknown error'] })) } } const handleGenerateCalendar = async () => { setWorkflowStatus(prev => ({ ...prev, isRunning: true, currentTask: 'Generating content calendar...', progress: 0, errors: [] })) try { const calendar = await blogAI.generateContentCalendar(3) setWorkflowStatus(prev => ({ ...prev, isRunning: false, progress: 100, results: [...prev.results, { calendar }] })) await loadDashboardData() } catch (error) { setWorkflowStatus(prev => ({ ...prev, isRunning: false, errors: [error instanceof Error ? error.message : 'Unknown error'] })) } } const handleOptimizeContent = async () => { setWorkflowStatus(prev => ({ ...prev, isRunning: true, currentTask: 'Optimizing existing content...', progress: 0, errors: [] })) try { const result = await pipeline.executeContentOptimizationCycle() setWorkflowStatus(prev => ({ ...prev, isRunning: false, progress: 100, results: [...prev.results, result] })) await loadDashboardData() } catch (error) { setWorkflowStatus(prev => ({ ...prev, isRunning: false, errors: [error instanceof Error ? error.message : 'Unknown error'] })) } } return ( <div className="container mx-auto px-4 py-8 space-y-6"> <div className="flex items-center justify-between"> <div> <h1 className="text-3xl font-bold">SEO Content Workflow Dashboard</h1> <p className="text-muted-foreground"> AI-powered content creation and optimization system </p> </div> <div className="flex items-center gap-2"> <Badge variant={workflowStatus.isRunning ? "destructive" : "secondary"}> {workflowStatus.isRunning ? "Running" : "Idle"} </Badge> </div> </div> {/* Status Alert */} {workflowStatus.isRunning && ( <Alert> <AlertCircle className="h-4 w-4" /> <AlertDescription> <div className="space-y-2"> <div>{workflowStatus.currentTask}</div> <Progress value={workflowStatus.progress} className="w-full" /> </div> </AlertDescription> </Alert> )} {workflowStatus.errors.length > 0 && ( <Alert variant="destructive"> <AlertCircle className="h-4 w-4" /> <AlertDescription> <ul className="list-disc list-inside"> {workflowStatus.errors.map((error, index) => ( <li key={index}>{error}</li> ))} </ul> </AlertDescription> </Alert> )} <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6"> <TabsList className="grid w-full grid-cols-5"> <TabsTrigger value="overview">Overview</TabsTrigger> <TabsTrigger value="create">Create Content</TabsTrigger> <TabsTrigger value="calendar">Content Calendar</TabsTrigger> <TabsTrigger value="automation">Automation</TabsTrigger> <TabsTrigger value="analytics">Analytics</TabsTrigger> </TabsList> {/* Overview Tab */} <TabsContent value="overview" className="space-y-6"> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6"> <Card> <CardContent className="p-6"> <div className="flex items-center gap-2"> <FileText className="h-5 w-5 text-blue-500" /> <div> <p className="text-sm text-muted-foreground">Posts Generated</p> <p className="text-2xl font-bold">{performanceMetrics.postsGenerated}</p> </div> </div> </CardContent> </Card> <Card> <CardContent className="p-6"> <div className="flex items-center gap-2"> <CheckCircle className="h-5 w-5 text-green-500" /> <div> <p className="text-sm text-muted-foreground">Posts Published</p> <p className="text-2xl font-bold">{performanceMetrics.postsPublished}</p> </div> </div> </CardContent> </Card> <Card> <CardContent className="p-6"> <div className="flex items-center gap-2"> <Target className="h-5 w-5 text-purple-500" /> <div> <p className="text-sm text-muted-foreground">Avg SEO Score</p> <p className="text-2xl font-bold">{performanceMetrics.averageSEOScore}</p> </div> </div> </CardContent> </Card> <Card> <CardContent className="p-6"> <div className="flex items-center gap-2"> <TrendingUp className="h-5 w-5 text-orange-500" /> <div> <p className="text-sm text-muted-foreground">Total Views</p> <p className="text-2xl font-bold">{performanceMetrics.totalViews.toLocaleString()}</p> </div> </div> </CardContent> </Card> </div> <div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Brain className="h-5 w-5" /> AI Agents Status </CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="space-y-2"> <div className="flex justify-between items-center"> <span className="text-sm">Content Planner</span> <Badge variant="secondary">Ready</Badge> </div> <div className="flex justify-between items-center"> <span className="text-sm">Content Writer</span> <Badge variant="secondary">Ready</Badge> </div> <div className="flex justify-between items-center"> <span className="text-sm">SEO Optimizer</span> <Badge variant="secondary">Ready</Badge> </div> <div className="flex justify-between items-center"> <span className="text-sm">Quality Auditor</span> <Badge variant="secondary">Ready</Badge> </div> <div className="flex justify-between items-center"> <span className="text-sm">Content Refresher</span> <Badge variant="secondary">Ready</Badge> </div> </div> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <BarChart3 className="h-5 w-5" /> Top Performing Categories </CardTitle> </CardHeader> <CardContent className="space-y-4"> {Object.entries(performanceMetrics.topPerformingCategories).map(([category, count]) => ( <div key={category} className="space-y-2"> <div className="flex justify-between text-sm"> <span className="capitalize">{category.replace('-', ' ')}</span> <span>{count} posts</span> </div> <Progress value={(count / Math.max(...Object.values(performanceMetrics.topPerformingCategories))) * 100} className="h-2" /> </div> ))} </CardContent> </Card> </div> </TabsContent> {/* Create Content Tab */} <TabsContent value="create" className="space-y-6"> <Card> <CardHeader> <CardTitle>Generate New Blog Post</CardTitle> <CardDescription> Use AI agents to create SEO-optimized blog content </CardDescription> </CardHeader> <CardContent className="space-y-4"> <div className="space-y-2"> <Label htmlFor="topic">Topic</Label> <Input id="topic" placeholder="Enter blog post topic..." value={newTopic} onChange={(e) => setNewTopic(e.target.value)} /> </div> <div className="space-y-2"> <Label htmlFor="category">Category</Label> <Select value={selectedCategory} onValueChange={setSelectedCategory}> <SelectTrigger> <SelectValue placeholder="Select category" /> </SelectTrigger> <SelectContent> <SelectItem value="forex-basics">Forex Basics</SelectItem> <SelectItem value="broker-reviews">Broker Reviews</SelectItem> <SelectItem value="market-analysis">Market Analysis</SelectItem> <SelectItem value="trading-strategies">Trading Strategies</SelectItem> <SelectItem value="technology">Technology</SelectItem> <SelectItem value="regulation">Regulation</SelectItem> </SelectContent> </Select> </div> <div className="space-y-2"> <Label htmlFor="keywords">Target Keywords</Label> <Textarea id="keywords" placeholder="Enter target keywords separated by commas..." value={targetKeywords} onChange={(e) => setTargetKeywords(e.target.value)} /> </div> <Button onClick={handleGenerateContent} disabled={workflowStatus.isRunning || !newTopic.trim()} className="w-full" > <Plus className="h-4 w-4 mr-2" /> Generate Content </Button> </CardContent> </Card> <Card> <CardHeader> <CardTitle>Quick Actions</CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Button variant="outline" onClick={handleGenerateCalendar} disabled={workflowStatus.isRunning} > <Calendar className="h-4 w-4 mr-2" /> Generate Calendar </Button> <Button variant="outline" onClick={handleOptimizeContent} disabled={workflowStatus.isRunning} > <RefreshCw className="h-4 w-4 mr-2" /> Optimize Content </Button> <Button variant="outline" disabled={workflowStatus.isRunning} > <TrendingUp className="h-4 w-4 mr-2" /> Trend Analysis </Button> </div> </CardContent> </Card> </TabsContent> {/* Content Calendar Tab */} <TabsContent value="calendar" className="space-y-6"> <Card> <CardHeader> <CardTitle>Content Calendar</CardTitle> <CardDescription> Scheduled and published content </CardDescription> </CardHeader> <CardContent> <div className="space-y-4"> {contentCalendar.length === 0 ? ( <p className="text-muted-foreground text-center py-8"> No scheduled content. Generate a content calendar to get started. </p> ) : ( contentCalendar.map((item) => ( <div key={item.id} className="flex items-center justify-between p-4 border rounded-lg"> <div className="space-y-1"> <h4 className="font-medium">{item.topic}</h4> <div className="flex items-center gap-4 text-sm text-muted-foreground"> <span>{new Date(item.targetDate).toLocaleDateString()}</span> <span>{item.estimatedWords} words</span> <Badge variant={ item.status === 'completed' ? 'default' : item.status === 'in_progress' ? 'secondary' : item.status === 'failed' ? 'destructive' : 'outline' }> {item.status} </Badge> </div> </div> <div className="flex items-center gap-2"> <Badge variant={item.priority === 'high' ? 'destructive' : item.priority === 'medium' ? 'default' : 'secondary'}> {item.priority} </Badge> </div> </div> )) )} </div> </CardContent> </Card> </TabsContent> {/* Automation Tab */} <TabsContent value="automation" className="space-y-6"> <Card> <CardHeader> <CardTitle>Content Pipeline Automation</CardTitle> <CardDescription> Configure and run automated content generation </CardDescription> </CardHeader> <CardContent className="space-y-6"> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <div className="space-y-4"> <h3 className="font-semibold">Pipeline Settings</h3> <div className="space-y-2"> <Label htmlFor="maxPosts">Max Posts Per Day</Label> <Input id="maxPosts" type="number" defaultValue="3" /> </div> <div className="space-y-2"> <Label htmlFor="qualityThreshold">Quality Threshold</Label> <Input id="qualityThreshold" type="number" defaultValue="85" /> </div> <div className="space-y-2"> <Label htmlFor="publishingTimes">Publishing Times</Label> <Input id="publishingTimes" defaultValue="09:00, 14:00, 18:00" /> </div> </div> <div className="space-y-4"> <h3 className="font-semibold">Automation Controls</h3> <div className="space-y-4"> <Button onClick={handleStartPipeline} disabled={workflowStatus.isRunning} className="w-full" > <Play className="h-4 w-4 mr-2" /> Start Pipeline </Button> <Button variant="outline" disabled={!workflowStatus.isRunning} className="w-full" > <Pause className="h-4 w-4 mr-2" /> Pause Pipeline </Button> </div> </div> </div> </CardContent> </Card> </TabsContent> {/* Analytics Tab */} <TabsContent value="analytics" className="space-y-6"> <Card> <CardHeader> <CardTitle>Performance Analytics</CardTitle> <CardDescription> Content performance and SEO metrics </CardDescription> </CardHeader> <CardContent> <div className="space-y-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Card> <CardContent className="p-4"> <div className="text-center"> <p className="text-2xl font-bold">{performanceMetrics.engagementRate}%</p> <p className="text-sm text-muted-foreground">Engagement Rate</p> </div> </CardContent> </Card> <Card> <CardContent className="p-4"> <div className="text-center"> <p className="text-2xl font-bold">{performanceMetrics.postsPublished}</p> <p className="text-sm text-muted-foreground">Published Posts</p> </div> </CardContent> </Card> <Card> <CardContent className="p-4"> <div className="text-center"> <p className="text-2xl font-bold">{performanceMetrics.averageSEOScore}</p> <p className="text-sm text-muted-foreground">Avg SEO Score</p> </div> </CardContent> </Card> </div> <div className="space-y-4"> <h3 className="font-semibold">Recent Results</h3> <div className="space-y-2"> {workflowStatus.results.slice(-5).map((result, index) => ( <div key={index} className="flex items-center justify-between p-3 border rounded-lg"> <div className="flex items-center gap-2"> <CheckCircle className="h-4 w-4 text-green-500" /> <span className="text-sm"> {result.contentId ? `Post generated: ${result.contentId}` : 'Pipeline completed successfully'} </span> </div> <Badge variant="secondary">Success</Badge> </div> ))} </div> </div> </div> </CardContent> </Card> </TabsContent> </Tabs> </div> ) }