import { Component, ReactNode } from 'react' import { AlertTriangle, RefreshCw, Home, ArrowLeft } from 'lucide-react' import { Button } from '@/components/ui/button' import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card' import { motion } from 'framer-motion' import { Link } from 'react-router-dom' interface ErrorBoundaryState { hasError: boolean error: Error | null errorInfo: { componentStack: string } | null } interface ErrorBoundaryProps { children: ReactNode fallback?: ReactNode } export class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> { constructor(props: ErrorBoundaryProps) { super(props) this.state = { hasError: false, error: null, errorInfo: null } } static getDerivedStateFromError(error: Error): ErrorBoundaryState { return { hasError: true, error, errorInfo: null } } componentDidCatch(error: Error, errorInfo: { componentStack: string }) { console.error('Error caught by boundary:', error, errorInfo) this.setState({ error, errorInfo }) // Here you could also log the error to an error reporting service // logErrorToService(error, errorInfo) } handleReload = () => { window.location.reload() } handleGoBack = () => { window.history.back() } render() { if (this.state.hasError) { // If a custom fallback is provided, use it if (this.props.fallback) { return this.props.fallback } // Default error UI return ( <div className="min-h-screen bg-background flex items-center justify-center p-4"> <div className="max-w-2xl w-full"> <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }} > <Card className="border-destructive/20"> <CardHeader> <CardTitle className="flex items-center gap-2 text-destructive"> <AlertTriangle className="w-5 h-5" /> Something went wrong </CardTitle> </CardHeader> <CardContent className="space-y-6"> {/* Error Details */} <div className="space-y-3"> <div> <h4 className="font-semibold text-foreground mb-1">Error:</h4> <p className="text-sm text-muted-foreground font-mono bg-destructive/10 p-2 rounded"> {this.state.error?.message || 'Unknown error occurred'} </p> </div> {process.env.NODE_ENV === 'development' && this.state.errorInfo && ( <div> <h4 className="font-semibold text-foreground mb-1">Component Stack:</h4> <pre className="text-xs text-muted-foreground bg-muted p-3 rounded overflow-auto max-h-32"> {this.state.errorInfo.componentStack} </pre> </div> )} </div> {/* Action Buttons */} <div className="flex flex-col sm:flex-row gap-3"> <Button onClick={this.handleReload} className="flex-1" > <RefreshCw className="w-4 h-4 mr-2" /> Reload Page </Button> <Button onClick={this.handleGoBack} variant="outline" className="flex-1" > <ArrowLeft className="w-4 h-4 mr-2" /> Go Back </Button> <Button asChild variant="outline" className="flex-1"> <Link to="/" className="flex items-center gap-2"> <Home className="w-4 h-4" /> Home </Link> </Button> </div> {/* Help Text */} <div className="text-center"> <p className="text-sm text-muted-foreground"> If this problem persists, please contact our support team or try again later. </p> </div> </CardContent> </Card> </motion.div> </div> </div> ) } return this.props.children } } // Hook for error handling in functional components export function useErrorHandler() { return (error: Error) => { console.error('Error caught by handler:', error) // In a real app, you might want to send this to an error tracking service } } // Component to wrap pages with error boundary export function withErrorBoundary<P extends object>( Component: React.ComponentType<P>, fallback?: ReactNode ) { return function WrappedComponent(props: P) { return ( <ErrorBoundary fallback={fallback}> <Component {...props} /> </ErrorBoundary> ) } }