import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'; import { supabase } from '@/lib/supabase'; import { useClerkAuthContext } from '@/contexts/ClerkAuthContext'; import { toast } from 'sonner'; interface Broker { id: string; name: string; rating: number; regulation: string; min_deposit: number; spread_eur_usd: number; leverage: string; website_url: string; logo_url?: string; } interface SavedBroker { id: string; broker_id: string; created_at: string; broker: Broker; } export function useSavedBrokers() { const { userId } = useClerkAuthContext(); const queryClient = useQueryClient(); // Fetch saved brokers const { data: savedBrokers, isLoading, error } = useQuery({ queryKey: ['savedBrokers', userId], queryFn: async () => { if (!userId) throw new Error('User not authenticated'); const { data, error } = await supabase .from('user_shortlists') .select(` id, broker_id, created_at, broker:brokers( id, name, rating, regulation, min_deposit, spread_eur_usd, leverage, website_url, logo_url ) `) .eq('user_id', userId) .order('created_at', { ascending: false }); if (error) throw error; // Transform the data to match the expected interface const transformedData = data.map(item => ({ ...item, broker: Array.isArray(item.broker) ? item.broker[0] : item.broker })); return transformedData as SavedBroker[]; }, enabled: !!userId, staleTime: 5 * 60 * 1000, // 5 minutes gcTime: 10 * 60 * 1000, // 10 minutes }); // Save broker mutation const saveBrokerMutation = useMutation({ mutationFn: async (broker: Broker) => { if (!userId) throw new Error('User not authenticated'); const { data, error } = await supabase .from('user_shortlists') .insert({ user_id: userId, broker_id: broker.id, notes: '', priority: 0 }) .select() .single(); if (error) { // Handle unique constraint violation (broker already saved) if (error.code === '23505') { throw new Error('Broker is already saved'); } throw error; } return { ...data, broker }; }, onSuccess: (data) => { queryClient.invalidateQueries({ queryKey: ['savedBrokers'] }); toast.success(`${data.broker.name} saved to your list!`); }, onError: (error: any) => { console.error('Error saving broker:', error); if (error.message === 'Broker is already saved') { toast.info('Broker is already in your saved list'); } else { toast.error('Failed to save broker'); } }, }); // Remove broker mutation const removeBrokerMutation = useMutation({ mutationFn: async (shortlistId: string) => { const { error } = await supabase .from('user_shortlists') .delete() .eq('id', shortlistId) .eq('user_id', userId); if (error) throw error; }, onSuccess: () => { queryClient.invalidateQueries({ queryKey: ['savedBrokers'] }); toast.success('Broker removed from saved list'); }, onError: (error) => { console.error('Error removing broker:', error); toast.error('Failed to remove broker'); }, }); // Check if a broker is saved const isBrokerSaved = (brokerId: string) => { return savedBrokers?.some(item => item.broker_id === brokerId) || false; }; // Save broker function const saveBroker = (broker: Broker) => { saveBrokerMutation.mutate(broker); }; // Remove broker function const removeBroker = (shortlistId: string) => { removeBrokerMutation.mutate(shortlistId); }; // Toggle broker save state const toggleSaveBroker = (broker: Broker) => { const savedBroker = savedBrokers?.find(item => item.broker_id === broker.id); if (savedBroker) { removeBroker(savedBroker.id); } else { saveBroker(broker); } }; return { savedBrokers: savedBrokers || [], isLoading, error, saveBroker, removeBroker, toggleSaveBroker, isBrokerSaved, isSaving: saveBrokerMutation.isPending, isRemoving: removeBrokerMutation.isPending, }; }