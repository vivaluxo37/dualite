import { useEffect, useState } from 'react' import { User } from '@supabase/supabase-js' import { supabase } from '@/lib/supabase' export interface AuthUser extends User { user_metadata: { display_name?: string avatar_url?: string role?: string } } export function useAuth() { const [user, setUser] = useState<AuthUser | null>(null) const [loading, setLoading] = useState(true) useEffect(() => { // Get initial session supabase.auth.getSession().then(({ data: { session } }) => { setUser(session?.user ?? null) setLoading(false) }) // Listen for auth changes const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => { setUser(session?.user ?? null) setLoading(false) }) return () => subscription.unsubscribe() }, []) const signUp = async (email: string, password: string, displayName: string) => { const { error } = await supabase.auth.signUp({ email, password, options: { data: { display_name: displayName, }, }, }) if (error) throw error } const signIn = async (email: string, password: string) => { const { error } = await supabase.auth.signInWithPassword({ email, password, }) if (error) throw error } const signOut = async () => { const { error } = await supabase.auth.signOut() if (error) throw error } return { user, loading, signUp, signIn, signOut, } } 