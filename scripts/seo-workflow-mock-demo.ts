#!/usr/bin/env node /** * SEO Workflow Demo Script (Mock Version) * Tests the enhanced SEO content workflow system without database dependencies */ // Import the Task module directly import { Task } from '../src/lib/Task.js' async function runMockDemo() { console.log('🚀 Starting SEO Workflow Demo (Mock Version)') console.log('=============================================\n') try { // Test 1: Content Planning Task console.log('📝 Test 1: Content Planning Task') const planningTask = new Task({ description: 'Generate content calendar', prompt: 'Create a content calendar for forex trading blog', subagent_type: 'seo-content-planner' }) const planningResult = await planningTask.execute() console.log('✅ Content planning task completed') console.log(`📊 Execution Time: ${planningResult.executionTime}ms`) console.log(`🤖 Tokens Used: ${planningResult.tokensUsed}`) console.log(`📅 Calendar Items: ${planningResult.data?.calendar?.length || 0}`) console.log('') // Test 2: Content Writing Task console.log('✍️ Test 2: Content Writing Task') const writingTask = new Task({ description: 'Write SEO content', prompt: 'Write an SEO-optimized article about forex trading', subagent_type: 'seo-content-writer' }) const writingResult = await writingTask.execute() console.log('✅ Content writing task completed') console.log(`📊 Execution Time: ${writingResult.executionTime}ms`) console.log(`🤖 Tokens Used: ${writingResult.tokensUsed}`) console.log(`📝 Content Length: ${writingResult.data?.content?.length || 0} characters`) console.log(`🔍 SEO Score: ${writingResult.data?.seoScore || 'N/A'}`) console.log('') // Test 3: Search Specialist Task console.log('🔍 Test 3: Search Specialist Task') const searchTask = new Task({ description: 'Research forex trends', prompt: 'Research current forex trading trends and opportunities', subagent_type: 'search-specialist' }) const searchResult = await searchTask.execute() console.log('✅ Search specialist task completed') console.log(`📊 Execution Time: ${searchResult.executionTime}ms`) console.log(`🤖 Tokens Used: ${searchResult.tokensUsed}`) console.log(`📈 Trends Found: ${searchResult.data?.trends?.length || 0}`) console.log(`💡 Insights: ${searchResult.data?.insights?.length || 0}`) console.log('') // Test 4: Content Audit Task console.log('🔍 Test 4: Content Audit Task') const auditTask = new Task({ description: 'Audit content quality', prompt: 'Audit content quality and provide recommendations', subagent_type: 'seo-content-auditor' }) const auditResult = await auditTask.execute() console.log('✅ Content audit task completed') console.log(`📊 Execution Time: ${auditResult.executionTime}ms`) console.log(`🤖 Tokens Used: ${auditResult.tokensUsed}`) console.log(`📈 Audit Score: ${auditResult.data?.score || 'N/A'}`) console.log(`⚠️ Issues Found: ${auditResult.data?.issues?.length || 0}`) console.log(`💪 Strengths: ${auditResult.data?.strengths?.length || 0}`) console.log('') // Summary console.log('🎉 Demo Summary:') console.log('================================') console.log(`✅ Content Planning: ${planningResult.success ? 'Success' : 'Failed'}`) console.log(`✅ Content Writing: ${writingResult.success ? 'Success' : 'Failed'}`) console.log(`✅ Search Specialist: ${searchResult.success ? 'Success' : 'Failed'}`) console.log(`✅ Content Audit: ${auditResult.success ? 'Success' : 'Failed'}`) console.log('') console.log('🚀 SEO Workflow Task System is working correctly!') console.log('') console.log('📋 Task System Features:') console.log('- ✅ Task creation and execution') console.log('- ✅ AI agent simulation') console.log('- ✅ Performance metrics tracking') console.log('- ✅ Error handling and recovery') console.log('- ✅ Mock data generation') console.log('') console.log('🔧 Next Steps:') console.log('1. Set up database tables using the migration script') console.log('2. Configure environment variables') console.log('3. Integrate with actual AI services') console.log('4. Connect to the blog system') console.log('5. Deploy the automated content pipeline') } catch (error) { console.error('❌ Demo failed:', error) process.exit(1) } } // Run the demo runMockDemo()