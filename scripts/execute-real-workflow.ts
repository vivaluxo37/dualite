#!/usr/bin/env node /** * Real SEO Workflow Execution Script * This script executes the actual SEO workflow with real data */ import { WorkflowOrchestrator } from '../src/lib/workflow-orchestrator.js'; console.log('🚀 SEO Workflow System - Real Execution'); console.log('====================================='); // Configuration for real execution const executionConfig = { supabaseProjectId: process.env.VITE_SUPABASE_PROJECT_ID || 'your-project-id', brokerNames: [ 'IC Markets', 'Pepperstone', 'FXTM', 'XM', 'OctaFX', 'HotForex', 'Tickmill', 'IG Markets', 'CMC Markets', 'Saxo Bank', 'OANDA', 'City Index', 'FXCM', 'FOREX.com', 'TD Ameritrade', 'Interactive Brokers', 'IG US', 'ATC Brokers', 'AxiTrader', 'FP Markets', 'ADSS', 'ThinkMarkets', 'FXPrimus', 'Exness', 'FBS', 'Zerodha', 'ICICI Direct', 'HDFC Securities', 'Sharekhan', 'Angel One', 'Motilal Oswal' ], // All 31 brokers contentTypes: ['review', 'guide', 'comparison'], qualityThreshold: 85, maxConcurrentProcesses: 3, enableDeployment: true, // Enable deployment for production retryFailedSteps: true, notificationSettings: { email: process.env.NOTIFICATION_EMAIL }, debug: true, logLevel: 'info' }; class RealWorkflowExecutor { private config: typeof executionConfig; constructor(config: typeof executionConfig) { this.config = config; } async execute(): Promise<void> { console.log('📋 Execution Configuration:'); console.log(` - Project ID: ${this.config.supabaseProjectId}`); console.log(` - Brokers: ${this.config.brokerNames.join(', ')}`); console.log(` - Content Types: ${this.config.contentTypes.join(', ')}`); console.log(` - Quality Threshold: ${this.config.qualityThreshold}`); console.log(` - Enable Deployment: ${this.config.enableDeployment}`); console.log(` - Max Concurrent: ${this.config.maxConcurrentProcesses}`); // Check environment variables if (!process.env.VITE_SUPABASE_URL || !process.env.VITE_SUPABASE_ANON_KEY) { console.error('❌ Missing required environment variables:'); console.error(' - VITE_SUPABASE_URL'); console.error(' - VITE_SUPABASE_ANON_KEY'); console.error(' Please set these in your .env file'); process.exit(1); } try { console.log('\n⚡ Initializing workflow orchestrator...'); const orchestrator = new WorkflowOrchestrator(this.config); console.log('🔄 Setting up event listeners...'); // Set up progress tracking orchestrator.on('progress', (progress) => { const percentage = Math.round((progress.completedSteps / progress.totalSteps) * 100); console.log(`\n📈 Progress: ${percentage}% (${progress.completedSteps}/${progress.totalSteps})`); console.log(`🔄 Current Step: ${progress.currentStep}`); console.log(`📊 Step Progress: ${progress.stepProgress}%`); console.log(`🏢 Brokers: ${progress.brokersProcessed}/${progress.totalBrokers}`); console.log(`📝 Content: ${progress.contentGenerated} generated, ${progress.contentOptimized} optimized, ${progress.contentPublished} published`); }); orchestrator.on('error', (error) => { console.error(`\n❌ Workflow Error: ${error.message}`); if (error.brokerName) { console.error(` Broker: ${error.brokerName}`); } if (this.config.debug) { console.error(' Stack:', error.stack); } }); orchestrator.on('log', (log) => { if (this.config.logLevel === 'debug' || (this.config.logLevel === 'info' && log.level !== 'debug') || (this.config.logLevel === 'warn' && ['error', 'warn'].includes(log.level)) || (this.config.logLevel === 'error' && log.level === 'error')) { const timestamp = new Date().toLocaleTimeString(); console.log(`[${timestamp}] [${log.level.toUpperCase()}] ${log.message}`); if (log.brokerName) { console.log(` Broker: ${log.brokerName}`); } } }); console.log('\n🚀 Starting workflow execution...'); console.log(' This may take several minutes depending on the number of brokers...'); const startTime = Date.now(); // Execute the workflow const results = await orchestrator.executeWorkflow(); const endTime = Date.now(); const totalTime = Math.round((endTime - startTime) / 1000); console.log('\n🎉 Workflow Execution Completed!'); console.log('====================================='); // Display results const summary = results.summary; console.log('\n📊 Execution Summary:'); console.log(` ⏱️ Total Time: ${totalTime} seconds`); console.log(` 🏢 Brokers Processed: ${summary.totalBrokersProcessed}`); console.log(` 🔑 Keywords Generated: ${summary.totalKeywordsGenerated}`); console.log(` 📝 Content Generated: ${summary.totalContentPiecesGenerated}`); console.log(` ⚡ Content Optimized: ${summary.totalContentPiecesOptimized}`); console.log(` 📊 Content Published: ${summary.totalContentPiecesPublished}`); console.log(` 🎯 Average Quality: ${summary.averageQualityScore}/100`); console.log(` 🔍 Average SEO Score: ${summary.averageSEOScore}/100`); console.log(` ✅ Success Rate: ${summary.successRate}%`); console.log(` ❌ Errors: ${summary.errorsEncountered}`); if (results.errors && results.errors.length > 0) { console.log('\n⚠️ Errors Encountered:'); results.errors.forEach((error: any, index: number) => { console.log(` ${index + 1}. ${error.step} - ${error.brokerName}: ${error.message}`); }); } console.log('\n📈 Performance Metrics:'); console.log(` 📊 Processing Time: ${totalTime}s`); console.log(` ⚡ Average per Broker: ${Math.round(totalTime / Math.max(summary.totalBrokersProcessed, 1))}s`); console.log(` 📝 Content per Minute: ${Math.round((summary.totalContentPiecesGenerated / totalTime) * 60)}`); console.log(` 🎯 Quality Pass Rate: ${Math.round((summary.totalContentPiecesPublished / Math.max(summary.totalContentPiecesGenerated, 1)) * 100)}%`); console.log('\n💾 Results Storage:'); console.log(' 📊 All results have been stored in your Supabase database'); console.log(' 🔍 You can view detailed results in the Supabase dashboard'); console.log(' 📋 Tables to check:'); console.log(' - broker_keywords'); console.log(' - page_outlines'); console.log(' - page_drafts'); console.log(' - page_seo'); console.log(' - page_audit'); console.log(' - deployment_status'); if (this.config.enableDeployment) { console.log('\n🚀 Deployment Information:'); console.log(' 📁 Generated React components are ready for deployment'); console.log(' 🔗 Routes have been updated'); console.log(' 🗺️ Sitemap has been generated'); console.log(' 📱 Pages are mobile-responsive and SEO-optimized'); } console.log('\n🎯 Next Steps:'); console.log(' 1. Review the generated content in Supabase'); console.log(' 2. Check the quality scores and SEO optimization'); console.log(' 3. Enable deployment when ready: set enableDeployment: true'); console.log(' 4. Monitor performance and refine as needed'); console.log(' 5. Scale to more brokers gradually'); console.log('\n✅ Workflow execution completed successfully!'); } catch (error) { console.error('\n❌ Workflow execution failed:'); console.error(` Error: ${error.message}`); if (this.config.debug) { console.error(' Stack:', error.stack); } console.log('\n🔧 Troubleshooting:'); console.log(' 1. Check your Supabase connection'); console.log(' 2. Verify environment variables are set correctly'); console.log(' 3. Ensure MCP tools are available and configured'); console.log(' 4. Check network connectivity'); console.log(' 5. Review logs for specific error details'); process.exit(1); } } } // Main execution function async function main() { console.log('🔧 Environment Check:'); if (!process.env.VITE_SUPABASE_URL) { console.log(' ❌ VITE_SUPABASE_URL not set'); } else { console.log(' ✅ VITE_SUPABASE_URL set'); } if (!process.env.VITE_SUPABASE_ANON_KEY) { console.log(' ❌ VITE_SUPABASE_ANON_KEY not set'); } else { console.log(' ✅ VITE_SUPABASE_ANON_KEY set'); } if (!process.env.VITE_SUPABASE_PROJECT_ID) { console.log(' ⚠️ VITE_SUPABASE_PROJECT_ID not set (using default)'); } else { console.log(' ✅ VITE_SUPABASE_PROJECT_ID set'); } console.log(''); const executor = new RealWorkflowExecutor(executionConfig); await executor.execute(); } // Handle graceful shutdown process.on('SIGINT', () => { console.log('\n\n🛑 Workflow execution interrupted by user'); console.log(' You can resume from where it left off by running again'); process.exit(0); }); process.on('SIGTERM', () => { console.log('\n\n🛑 Workflow execution terminated'); process.exit(0); }); // Run the execution main().catch((error) => { console.error('Fatal error:', error); process.exit(1); });