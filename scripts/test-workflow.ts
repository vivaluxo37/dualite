import { WorkflowOrchestrator } from '../lib/workflow-orchestrator'; import { supabase } from '../lib/supabase'; /** * Test script for the complete SEO workflow * This script tests the entire workflow from scraping to deployment */ interface TestConfig { supabaseProjectId: string; sampleBrokers: string[]; contentTypes: ('guide' | 'review' | 'comparison' | 'tutorial' | 'news')[]; qualityThreshold: number; enableDeployment: boolean; } class WorkflowTestRunner { private config: TestConfig; constructor(config: TestConfig) { this.config = config; } async runFullWorkflowTest(): Promise<void> { console.log('üöÄ Starting complete SEO workflow test...'); console.log('üìã Test Configuration:', JSON.stringify(this.config, null, 2)); // Initialize workflow orchestrator const workflowConfig = { supabaseProjectId: this.config.supabaseProjectId, brokerNames: this.config.sampleBrokers, contentTypes: this.config.contentTypes, qualityThreshold: this.config.qualityThreshold, maxConcurrentProcesses: 3, enableDeployment: this.config.enableDeployment, retryFailedSteps: true, notificationSettings: { email: process.env.NOTIFICATION_EMAIL } }; const orchestrator = new WorkflowOrchestrator(workflowConfig); try { // Execute the complete workflow const results = await orchestrator.executeWorkflow(); console.log('‚úÖ Workflow completed successfully!'); console.log('üìä Workflow Results:', JSON.stringify(results, null, 2)); // Verify results await this.verifyWorkflowResults(results); } catch (error) { console.error('‚ùå Workflow test failed:', error); await this.handleTestFailure(error); } } async runIndividualComponentTests(): Promise<void> { console.log('üîß Starting individual component tests...'); const testResults = { scraping: await this.testScrapingComponent(), keywordResearch: await this.testKeywordResearchComponent(), contentPlanning: await this.testContentPlanningComponent(), contentGeneration: await this.testContentGenerationComponent(), seoOptimization: await this.testSEOOptimizationComponent(), qualityAssurance: await this.testQualityAssuranceComponent(), deployment: await this.testDeploymentComponent() }; console.log('üìã Component Test Results:', JSON.stringify(testResults, null, 2)); // Generate test report await this.generateTestReport(testResults); } private async testScrapingComponent(): Promise<boolean> { console.log('üï∑Ô∏è Testing scraping component...'); try { const { BrokerScrapingService } = await import('../lib/broker-scraping'); const scrapingService = new BrokerScrapingService(); const sampleBroker = this.config.sampleBrokers[0]; const result = await scrapingService.scrapeBrokerData(sampleBroker); if (result && Object.keys(result).length > 0) { console.log('‚úÖ Scraping component test passed'); return true; } else { console.log('‚ùå Scraping component test failed - no data returned'); return false; } } catch (error) { console.error('‚ùå Scraping component test failed:', error); return false; } } private async testKeywordResearchComponent(): Promise<boolean> { console.log('üîç Testing keyword research component...'); try { const { KeywordResearchAgent } = await import('../lib/keyword-research'); const keywordAgent = new KeywordResearchAgent(this.config.supabaseProjectId); const sampleBroker = this.config.sampleBrokers[0]; const result = await keywordAgent.researchBrokerKeywords({ broker_name: sampleBroker, broker_type: 'forex', target_audience: 'traders', content_goals: ['educational', 'review'] }); if (result && result.keywords && result.keywords.length > 0) { console.log('‚úÖ Keyword research component test passed'); return true; } else { console.log('‚ùå Keyword research component test failed - no keywords returned'); return false; } } catch (error) { console.error('‚ùå Keyword research component test failed:', error); return false; } } private async testContentPlanningComponent(): Promise<boolean> { console.log('üìù Testing content planning component...'); try { const { ContentPlanningAgent } = await import('../lib/content-planning'); const planningAgent = new ContentPlanningAgent(this.config.supabaseProjectId); const sampleBroker = this.config.sampleBrokers[0]; const result = await planningAgent.createContentOutline({ broker_name: sampleBroker, content_type: 'review', target_keywords: ['forex broker', 'trading platform', 'broker review'], content_goals: ['comprehensive review', 'user education'], audience_level: 'beginner' }); if (result && result.sections && result.sections.length > 0) { console.log('‚úÖ Content planning component test passed'); return true; } else { console.log('‚ùå Content planning component test failed - no outline returned'); return false; } } catch (error) { console.error('‚ùå Content planning component test failed:', error); return false; } } private async testContentGenerationComponent(): Promise<boolean> { console.log('‚úçÔ∏è Testing content generation component...'); try { const { ContentGenerationAgent } = await import('../lib/content-generation'); const generationAgent = new ContentGenerationAgent(this.config.supabaseProjectId); const sampleBroker = this.config.sampleBrokers[0]; const result = await generationAgent.generateContent({ broker_name: sampleBroker, content_type: 'review', outline: { title: `${sampleBroker} Review`, sections: [ { title: 'Introduction', content: 'Comprehensive review of the broker', word_count: 200 } ] }, target_keywords: ['forex broker', 'trading platform'], tone: 'professional', word_count: 1000 }); if (result && result.content && result.content.length > 0) { console.log('‚úÖ Content generation component test passed'); return true; } else { console.log('‚ùå Content generation component test failed - no content generated'); return false; } } catch (error) { console.error('‚ùå Content generation component test failed:', error); return false; } } private async testSEOOptimizationComponent(): Promise<boolean> { console.log('üîß Testing SEO optimization component...'); try { const { SEOOptimizationAgent } = await import('../lib/seo-optimization'); const seoAgent = new SEOOptimizationAgent(this.config.supabaseProjectId); const result = await seoAgent.optimizeContent({ content: 'Sample content about forex trading and broker reviews', title: 'Sample Broker Review', content_type: 'review', target_keywords: ['forex broker', 'trading platform'], broker_data: { name: 'Sample Broker', type: 'forex' }, current_url: '/brokers/sample-broker', include_structured_data: true, optimize_for_snippets: true }); if (result && result.metaTags && result.metaTags.title) { console.log('‚úÖ SEO optimization component test passed'); return true; } else { console.log('‚ùå SEO optimization component test failed - no optimization returned'); return false; } } catch (error) { console.error('‚ùå SEO optimization component test failed:', error); return false; } } private async testQualityAssuranceComponent(): Promise<boolean> { console.log('üõ°Ô∏è Testing quality assurance component...'); try { const { QualityAssuranceAgent } = await import('../lib/quality-assurance'); const qaAgent = new QualityAssuranceAgent(this.config.supabaseProjectId); const result = await qaAgent.performQualityAssurance({ content: 'Sample content about forex trading and broker reviews with proper structure and keywords.', title: 'Sample Broker Review', content_type: 'review', target_keywords: ['forex broker', 'trading platform'], broker_data: { name: 'Sample Broker', type: 'forex' }, content_metadata: { word_count: 500, reading_time: 3 }, compliance_requirements: ['financial_services', 'broker_disclosure'], quality_threshold: this.config.qualityThreshold }); if (result && result.overall_score >= this.config.qualityThreshold) { console.log('‚úÖ Quality assurance component test passed'); return true; } else { console.log('‚ùå Quality assurance component test failed - quality score too low'); return false; } } catch (error) { console.error('‚ùå Quality assurance component test failed:', error); return false; } } private async testDeploymentComponent(): Promise<boolean> { console.log('üöÄ Testing deployment component...'); try { const { AutomatedDeploymentService } = await import('../lib/automated-deployment'); const deploymentService = new AutomatedDeploymentService({ outputDir: 'src/pages', templateDir: 'src/templates', generateRoutes: false, updateSitemap: false, deployToProduction: false }); const samplePage = { brokerId: 'sample-broker', brokerName: 'Sample Broker', contentType: 'review', content: 'Sample content for testing deployment', title: 'Sample Broker Review', description: 'Test description', seoOptimization: { metaTags: { title: 'Sample Broker Review', description: 'Test description', keywords: ['forex', 'broker', 'review'] }, structuredData: {}, internalLinks: [], headerStructure: [] }, qualityAssurance: { overall_score: 85, accuracy_verification: { passed: true }, readability_analysis: { score: 85 }, seo_compliance: { score: 85 } }, metadata: {} }; const result = await deploymentService.deployPages([samplePage]); if (result.success) { console.log('‚úÖ Deployment component test passed'); return true; } else { console.log('‚ùå Deployment component test failed:', result.errors); return false; } } catch (error) { console.error('‚ùå Deployment component test failed:', error); return false; } } private async verifyWorkflowResults(results: any): Promise<void> { console.log('üîç Verifying workflow results...'); const verificationResults = { brokerDataCollected: Object.keys(results.brokerData || {}).length > 0, keywordsGenerated: Object.keys(results.keywordsGenerated || {}).length > 0, contentPlansCreated: Object.keys(results.contentPlans || {}).length > 0, contentGenerated: Object.keys(results.generatedContent || {}).length > 0, contentOptimized: Object.keys(results.optimizedContent || {}).length > 0, qualityReports: Object.keys(results.qualityReports || {}).length > 0, contentPublished: Object.keys(results.publishedContent || {}).length > 0 }; console.log('üìä Verification Results:', JSON.stringify(verificationResults, null, 2)); // Check if all major components produced results const allComponentsWorking = Object.values(verificationResults).every(result => result); if (allComponentsWorking) { console.log('‚úÖ All workflow components are working correctly'); } else { console.log('‚ö†Ô∏è Some workflow components may need attention'); } // Store verification results await this.storeVerificationResults(verificationResults, results); } private async storeVerificationResults(verificationResults: any, workflowResults: any): Promise<void> { try { const { data, error } = await supabase .from('workflow_test_results') .insert([ { test_type: 'full_workflow', verification_results: verificationResults, workflow_results: workflowResults, test_timestamp: new Date().toISOString() } ]); if (error) { console.error('Failed to store verification results:', error); } else { console.log('‚úÖ Verification results stored successfully'); } } catch (error) { console.error('Error storing verification results:', error); } } private async generateTestReport(componentResults: any): Promise<void> { console.log('üìÑ Generating test report...'); const report = { test_timestamp: new Date().toISOString(), test_type: 'component_tests', components: componentResults, summary: { total_components: Object.keys(componentResults).length, passed_components: Object.values(componentResults).filter((result: any) => result).length, failed_components: Object.values(componentResults).filter((result: any) => !result).length, success_rate: Math.round((Object.values(componentResults).filter((result: any) => result).length / Object.keys(componentResults).length) * 100) } }; console.log('üìã Test Report:', JSON.stringify(report, null, 2)); // Store report try { const { data, error } = await supabase .from('workflow_test_reports') .insert([report]); if (error) { console.error('Failed to store test report:', error); } else { console.log('‚úÖ Test report stored successfully'); } } catch (error) { console.error('Error storing test report:', error); } } private async handleTestFailure(error: any): Promise<void> { console.error('üö® Handling test failure...'); // Log failure details const failureDetails = { error_message: error.message, error_stack: error.stack, test_timestamp: new Date().toISOString(), config: this.config }; try { const { data, error: logError } = await supabase .from('workflow_test_failures') .insert([failureDetails]); if (logError) { console.error('Failed to log test failure:', logError); } else { console.log('‚úÖ Test failure logged successfully'); } } catch (logError) { console.error('Error logging test failure:', logError); } // Attempt to provide diagnostic information console.log('üîß Diagnostic Information:'); console.log('- Check Supabase connection and project ID'); console.log('- Verify MCP tools are available and configured'); console.log('- Ensure environment variables are set correctly'); console.log('- Check network connectivity for external services'); } } // Default test configuration const defaultTestConfig: TestConfig = { supabaseProjectId: process.env.VITE_SUPABASE_PROJECT_ID || 'your-project-id', sampleBrokers: ['XM', 'FP Markets', 'Pepperstone'], contentTypes: ['review', 'guide'], qualityThreshold: 70, enableDeployment: false // Set to false for testing }; // Main test runner async function main() { const testRunner = new WorkflowTestRunner(defaultTestConfig); console.log('üß™ SEO Workflow Test Suite'); console.log('========================'); // Run individual component tests first await testRunner.runIndividualComponentTests(); console.log('\n'); // Run full workflow test await testRunner.runFullWorkflowTest(); console.log('\nüéâ Test suite completed!'); } // Export for use in other modules export { WorkflowTestRunner, TestConfig, defaultTestConfig }; // Run if this is the main module if (require.main === module) { main().catch(console.error); }